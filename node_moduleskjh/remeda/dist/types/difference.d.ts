import type { LazyEvaluator } from "./pipe";
/**
 * Excludes the values from `other` array.
 *
 * ! **DEPRECATED**: Use `R.filter(array, R.isNot(R.isIncludedIn(other)))`. Will be removed in v2!
 *
 * @param array - The source array.
 * @param other - The values to exclude.
 * @signature
 *    R.difference(array, other)
 * @example
 *    R.difference([1, 2, 3, 4], [2, 5, 3]) // => [1, 4]
 * @dataFirst
 * @pipeable
 * @category Deprecated
 * @deprecated Use `R.filter(array, R.isNot(R.isIncludedIn(other)))`. Will be removed in v2.
 */
export declare function difference<T>(array: ReadonlyArray<T>, other: ReadonlyArray<T>): Array<T>;
/**
 * Excludes the values from `other` array.
 *
 * ! **DEPRECATED**: Use `R.filter(R.isNot(R.isIncludedIn(other)))`. Will be removed in v2!
 *
 * @param other - The values to exclude.
 * @signature
 *    R.difference(other)(array)
 * @example
 *    R.difference([2, 5, 3])([1, 2, 3, 4]) // => [1, 4]
 *    R.pipe(
 *      [1, 2, 3, 4, 5, 6], // only 4 iterations
 *      R.difference([2, 3]),
 *      R.take(2)
 *    ) // => [1, 4]
 * @dataLast
 * @pipeable
 * @category Deprecated
 * @deprecated Use `R.filter(R.isNot(R.isIncludedIn(other)))`. Will be removed in v2.
 */
export declare function difference<T, K>(other: ReadonlyArray<T>): (array: ReadonlyArray<K>) => Array<T>;
export declare namespace difference {
    function lazy<T>(other: ReadonlyArray<T>): LazyEvaluator<T>;
}
//# sourceMappingURL=difference.d.ts.map