import type { LazyEvaluator } from "./pipe";
/**
 * Returns a list of elements that exist in both array.
 *
 * ! **DEPRECATED**: Use `R.filter(array, R.isIncludedIn(other))`. Will be removed in v2!
 *
 * @param array - The source array.
 * @param other - The second array.
 * @signature
 *    R.intersection(array, other)
 * @example
 *    R.intersection([1, 2, 3], [2, 3, 5]) // => [2, 3]
 * @dataFirst
 * @pipeable
 * @category Deprecated
 * @deprecated Use `R.filter(array, R.isIncludedIn(other))`. Will be removed in v2.
 */
export declare function intersection<T>(source: ReadonlyArray<T>, other: ReadonlyArray<T>): Array<T>;
/**
 * Returns a list of elements that exist in both array.
 *
 * ! **DEPRECATED**: Use `R.filter(R.isIncludedIn(other))`. Will be removed in v2!
 *
 * @param array - The source array.
 * @param other - The second array.
 * @signature
 *    R.intersection(other)(array)
 * @example
 *    R.intersection([2, 3, 5])([1, 2, 3]) // => [2, 3]
 * @dataLast
 * @pipeable
 * @category Deprecated
 * @deprecated Use `R.filter(R.isIncludedIn(other))`. Will be removed in v2.
 */
export declare function intersection<T, K>(other: ReadonlyArray<T>): (source: ReadonlyArray<K>) => Array<T>;
export declare namespace intersection {
    function lazy<T>(other: ReadonlyArray<T>): LazyEvaluator<T>;
}
//# sourceMappingURL=intersection.d.ts.map