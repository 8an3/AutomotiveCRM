import {
  useHovercard
} from "../__chunks/CXDKC5CW.js";
import "../__chunks/X7FKJQME.js";
import {
  useMenuList
} from "../__chunks/DQSQP4IL.js";
import {
  MenuBarContext,
  MenuContext
} from "../__chunks/HVBRRKV4.js";
import "../__chunks/JJHXFKMC.js";
import "../__chunks/EMZ4NQG4.js";
import "../__chunks/ZFMAA4DD.js";
import "../__chunks/4H6H5RRM.js";
import "../__chunks/7A3SODQV.js";
import "../__chunks/RBUEJWRA.js";
import "../__chunks/T3WBUAHU.js";
import "../__chunks/KUXENZYT.js";
import "../__chunks/KOVUJERF.js";
import "../__chunks/62DFK33R.js";
import "../__chunks/BH4YAZB2.js";
import "../__chunks/DJESYNLE.js";
import "../__chunks/6WVG5KFF.js";
import "../__chunks/ISPCL6N4.js";
import "../__chunks/7JNF6I52.js";
import "../__chunks/6OMX4H3W.js";
import "../__chunks/COQHFAEN.js";
import "../__chunks/LNHZLQEK.js";
import "../__chunks/KSVEVAMH.js";
import "../__chunks/6GS36SYX.js";
import "../__chunks/OY5YT7OV.js";
import "../__chunks/OXPV2NBK.js";
import "../__chunks/AGWM73EZ.js";
import "../__chunks/BMLNRUFQ.js";
import "../__chunks/Z3X3QN6P.js";
import "../__chunks/USCWE5QL.js";
import "../__chunks/DIO64N2C.js";
import "../__chunks/LDDPB3PY.js";
import "../__chunks/6AJCHLAV.js";
import "../__chunks/JQEVJM46.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/5ETIGB6O.js";
import "../__chunks/AV5WE37O.js";
import {
  useBooleanEvent,
  useEvent,
  useForkRef
} from "../__chunks/ASYR66PQ.js";
import "../__chunks/SXC6BPOF.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/4BKCJXBM.js";

// src/menu/menu.ts
import { createRef, useContext, useEffect, useRef, useState } from "react";
import { hasFocusWithin } from "@ariakit/core/utils/focus";
var useMenu = createHook(
  (_a) => {
    var _b = _a, {
      store,
      hideOnEscape = true,
      autoFocusOnShow = true,
      hideOnHoverOutside
    } = _b, props = __objRest(_b, [
      "store",
      "hideOnEscape",
      "autoFocusOnShow",
      "hideOnHoverOutside"
    ]);
    const ref = useRef(null);
    const parentMenu = useContext(MenuContext);
    const parentMenuBar = useContext(MenuBarContext);
    const hasParentMenu = !!parentMenu;
    const parentIsMenuBar = !!parentMenuBar && !hasParentMenu;
    const onKeyDownProp = props.onKeyDown;
    const hideOnEscapeProp = useBooleanEvent(hideOnEscape);
    const onKeyDown = useEvent((event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented)
        return;
      if (event.key === "Escape") {
        if (!hideOnEscapeProp(event))
          return;
        if (!hasParentMenu) {
          event.stopPropagation();
        }
        return store.hide();
      }
    });
    props = __spreadProps(__spreadValues({}, props), {
      ref: useForkRef(ref, props.ref),
      onKeyDown
    });
    const _a2 = useMenuList(
      __spreadValues({ store }, props)
    ), { "aria-labelledby": ariaLabelledBy } = _a2, menuListProps = __objRest(_a2, ["aria-labelledby"]);
    props = menuListProps;
    const [initialFocusRef, setInitialFocusRef] = useState();
    const autoFocusOnShowState = store.useState("autoFocusOnShow");
    const initialFocus = store.useState("initialFocus");
    const baseElement = store.useState("baseElement");
    const items = store.useState("items");
    useEffect(() => {
      let cleaning = false;
      setInitialFocusRef((prevInitialFocusRef) => {
        var _a3, _b2, _c;
        if (cleaning)
          return;
        if (!autoFocusOnShowState)
          return;
        if ((_a3 = prevInitialFocusRef == null ? void 0 : prevInitialFocusRef.current) == null ? void 0 : _a3.isConnected)
          return prevInitialFocusRef;
        const ref2 = createRef();
        switch (initialFocus) {
          case "first":
            ref2.current = ((_b2 = items.find((item) => !item.disabled && item.element)) == null ? void 0 : _b2.element) || null;
            break;
          case "last":
            ref2.current = ((_c = [...items].reverse().find((item) => !item.disabled && item.element)) == null ? void 0 : _c.element) || null;
            break;
          default:
            ref2.current = baseElement;
        }
        if (!ref2.current)
          return;
        return ref2;
      });
      return () => {
        cleaning = true;
      };
    }, [store, autoFocusOnShowState, initialFocus, items, baseElement]);
    const mayAutoFocusOnShow = !!autoFocusOnShow;
    const canAutoFocusOnShow = !!initialFocusRef || !!props.initialFocus || !!props.modal;
    props = useHovercard(__spreadProps(__spreadValues({
      store,
      initialFocus: initialFocusRef,
      autoFocusOnShow: mayAutoFocusOnShow ? canAutoFocusOnShow && autoFocusOnShow : autoFocusOnShowState || !!props.modal
    }, props), {
      hideOnHoverOutside: (event) => {
        if (typeof hideOnHoverOutside === "function") {
          return hideOnHoverOutside(event);
        }
        if (hideOnHoverOutside != null)
          return hideOnHoverOutside;
        if (hasParentMenu) {
          parentMenu.setActiveId(null);
          return true;
        }
        if (!parentIsMenuBar)
          return false;
        const { disclosureElement } = store.getState();
        const disclosure = disclosureElement;
        if (!disclosure)
          return true;
        if (hasFocusWithin(disclosure))
          return false;
        return true;
      },
      // If it's a submenu, it shouldn't behave like a modal dialog, nor display
      // a backdrop.
      modal: hasParentMenu ? false : props.modal,
      backdrop: hasParentMenu ? false : props.backdrop,
      // If it's a submenu, hide on esc will be handled differently. That is,
      // event.stopPropagation() won't be called, so the parent menus will also
      // be closed.
      hideOnEscape: hasParentMenu ? false : hideOnEscape
    }));
    props = __spreadValues({
      "aria-labelledby": ariaLabelledBy
    }, props);
    return props;
  }
);
var Menu = createComponent((props) => {
  const htmlProps = useMenu(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Menu.displayName = "Menu";
}
export {
  Menu,
  useMenu
};
