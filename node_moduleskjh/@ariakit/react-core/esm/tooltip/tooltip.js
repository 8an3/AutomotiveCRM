import {
  usePortal
} from "../__chunks/USCWE5QL.js";
import "../__chunks/DIO64N2C.js";
import "../__chunks/LDDPB3PY.js";
import {
  useDisclosureContent
} from "../__chunks/6AJCHLAV.js";
import {
  TooltipContext
} from "../__chunks/Z5BJMNGY.js";
import "../__chunks/JQEVJM46.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/5ETIGB6O.js";
import {
  useBooleanEvent,
  useSafeLayoutEffect,
  useWrapElement
} from "../__chunks/ASYR66PQ.js";
import "../__chunks/SXC6BPOF.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/4BKCJXBM.js";

// src/tooltip/tooltip.tsx
import { useEffect } from "react";
import { addGlobalEventListener } from "@ariakit/core/utils/events";
import { jsx } from "react/jsx-runtime";
var useTooltip = createHook(
  (_a) => {
    var _b = _a, {
      store,
      portal = true,
      hideOnEscape = true,
      hideOnControl = false,
      wrapperProps
    } = _b, props = __objRest(_b, [
      "store",
      "portal",
      "hideOnEscape",
      "hideOnControl",
      "wrapperProps"
    ]);
    const popoverElement = store.useState("popoverElement");
    const contentElement = store.useState("contentElement");
    useSafeLayoutEffect(() => {
      const wrapper = popoverElement;
      const popover = contentElement;
      if (!wrapper)
        return;
      if (!popover)
        return;
      wrapper.style.zIndex = getComputedStyle(popover).zIndex;
    }, [popoverElement, contentElement]);
    const hideOnEscapeProp = useBooleanEvent(hideOnEscape);
    const hideOnControlProp = useBooleanEvent(hideOnControl);
    const open = store.useState("open");
    useEffect(() => {
      if (!open)
        return;
      return addGlobalEventListener("keydown", (event) => {
        if (event.defaultPrevented)
          return;
        const isEscape = event.key === "Escape" && hideOnEscapeProp(event);
        const isControl = event.key === "Control" && hideOnControlProp(event);
        if (isEscape || isControl) {
          store.hide();
        }
      });
    }, [store, open, hideOnEscapeProp, hideOnControlProp]);
    const position = store.useState(
      (state) => state.fixed ? "fixed" : "absolute"
    );
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(
        "div",
        __spreadProps(__spreadValues({
          role: "presentation"
        }, wrapperProps), {
          style: __spreadValues({
            position,
            top: 0,
            left: 0
          }, wrapperProps == null ? void 0 : wrapperProps.style),
          ref: store.setPopoverElement,
          children: element
        })
      ),
      [store, position, wrapperProps]
    );
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(TooltipContext.Provider, { value: store, children: element }),
      [store]
    );
    props = __spreadValues({
      role: "tooltip"
    }, props);
    props = useDisclosureContent(__spreadValues({ store }, props));
    props = usePortal(__spreadProps(__spreadValues({ portal }, props), { preserveTabOrder: false }));
    return props;
  }
);
var Tooltip = createComponent((props) => {
  const htmlProps = useTooltip(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Tooltip.displayName = "Tooltip";
}
export {
  Tooltip,
  useTooltip
};
