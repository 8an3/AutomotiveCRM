import type { PopoverAnchorOptions } from "../popover/popover-anchor.js";
import type { As, Props } from "../utils/types.js";
import type { TooltipStore } from "./tooltip-store.js";
/**
 * Returns props to create a `TooltipAnchor` component.
 * @see https://ariakit.org/components/tooltip
 * @example
 * ```jsx
 * const store = useToolTipStore();
 * const props = useTooltipAnchor({ store });
 * <Role {...props}>Anchor</Role>
 * <Tooltip store={store}>Tooltip</Tooltip>
 * ```
 */
export declare const useTooltipAnchor: import("../utils/types.js").Hook<TooltipAnchorOptions<"div">>;
/**
 * Renders an element that will be labelled or described by a `Tooltip`
 * component. This component will also be used as the reference to position the
 * tooltip on the screen.
 * @see https://ariakit.org/components/tooltip
 * @example
 * ```jsx
 * const tooltip = useTooltipStore();
 * <TooltipAnchor store={tooltip}>Anchor</TooltipAnchor>
 * <Tooltip store={tooltip}>Tooltip</Tooltip>
 * ```
 */
export declare const TooltipAnchor: import("../utils/types.js").Component<TooltipAnchorOptions<"div">>;
export interface TooltipAnchorOptions<T extends As = "div"> extends PopoverAnchorOptions<T> {
    /**
     * Object returned by the `useTooltipStore` hook.
     */
    store: TooltipStore;
    /**
     * Determines wether the tooltip anchor is described or labelled by the
     * tooltip. If `true`, the tooltip id will be set as the `aria-describedby`
     * attribute on the anchor element, and not as the `aria-labelledby`
     * attribute.
     * @default false
     * @example
     * ```jsx
     * const tooltip = useTooltipStore();
     * <TooltipAnchor store={tooltip} described>
     *   This is an element with a visible label.
     * </TooltipAnchor>
     * <Tooltip store={tooltip}>Description</Tooltip>
     * ```
     */
    described?: boolean;
}
export type TooltipAnchorProps<T extends As = "div"> = Props<TooltipAnchorOptions<T>>;
