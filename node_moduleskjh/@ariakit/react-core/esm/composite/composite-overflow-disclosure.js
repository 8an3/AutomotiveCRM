import {
  usePopoverDisclosure
} from "../__chunks/6O3TZMB4.js";
import "../__chunks/LSTZ5Q72.js";
import "../__chunks/24P2K6AU.js";
import "../__chunks/OQUXG6FE.js";
import "../__chunks/6GS36SYX.js";
import "../__chunks/D6NPK2DL.js";
import {
  useCompositeItem
} from "../__chunks/M32DI6TL.js";
import "../__chunks/4QNHBDVS.js";
import "../__chunks/X7UZWWYG.js";
import "../__chunks/T3DJZG63.js";
import "../__chunks/OXPV2NBK.js";
import "../__chunks/AGWM73EZ.js";
import "../__chunks/BMLNRUFQ.js";
import "../__chunks/Z3X3QN6P.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/5ETIGB6O.js";
import "../__chunks/AV5WE37O.js";
import {
  useEvent,
  useForkRef
} from "../__chunks/ASYR66PQ.js";
import "../__chunks/SXC6BPOF.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/4BKCJXBM.js";

// src/composite/composite-overflow-disclosure.ts
import { useEffect, useRef, useState } from "react";
var useCompositeOverflowDisclosure = createHook((_a) => {
  var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
  const ref = useRef(null);
  const [shouldRegisterItem, setShouldRegisterItem] = useState(false);
  useEffect(() => {
    return store.sync(() => {
      store.setDisclosureElement(ref.current);
    }, ["disclosureElement"]);
  }, [store]);
  const onFocusProp = props.onFocus;
  const onFocus = useEvent((event) => {
    onFocusProp == null ? void 0 : onFocusProp(event);
    if (event.defaultPrevented)
      return;
    setShouldRegisterItem(true);
  });
  const onBlurProp = props.onBlur;
  const onBlur = useEvent((event) => {
    onBlurProp == null ? void 0 : onBlurProp(event);
    if (event.defaultPrevented)
      return;
    setShouldRegisterItem(false);
  });
  props = __spreadProps(__spreadValues({
    "aria-hidden": !shouldRegisterItem
  }, props), {
    ref: useForkRef(props.ref, ref),
    onFocus,
    onBlur
  });
  props = useCompositeItem(__spreadProps(__spreadValues({}, props), { shouldRegisterItem }));
  props = usePopoverDisclosure(__spreadValues({ store }, props));
  return props;
});
var CompositeOverflowDisclosure = createComponent((props) => {
  const htmlProps = useCompositeOverflowDisclosure(props);
  return createElement("button", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  CompositeOverflowDisclosure.displayName = "CompositeOverflowDisclosure";
}
export {
  CompositeOverflowDisclosure,
  useCompositeOverflowDisclosure
};
