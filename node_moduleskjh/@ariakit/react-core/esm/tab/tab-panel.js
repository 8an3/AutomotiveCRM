import {
  useCollectionItem
} from "../__chunks/X7UZWWYG.js";
import "../__chunks/T3DJZG63.js";
import {
  useFocusable
} from "../__chunks/AGWM73EZ.js";
import "../__chunks/BMLNRUFQ.js";
import {
  useDisclosureContent
} from "../__chunks/6AJCHLAV.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/5ETIGB6O.js";
import {
  useDisclosureStore
} from "../__chunks/HN4VMOUI.js";
import "../__chunks/AV5WE37O.js";
import {
  useForkRef,
  useId
} from "../__chunks/ASYR66PQ.js";
import "../__chunks/SXC6BPOF.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/4BKCJXBM.js";

// src/tab/tab-panel.ts
import { useCallback, useEffect, useRef, useState } from "react";
import { getAllTabbableIn } from "@ariakit/core/utils/focus";
var useTabPanel = createHook(
  (_a) => {
    var _b = _a, { store, tabId: tabIdProp, getItem: getItemProp } = _b, props = __objRest(_b, ["store", "tabId", "getItem"]);
    const ref = useRef(null);
    const id = useId(props.id);
    const [hasTabbableChildren, setHasTabbableChildren] = useState(false);
    useEffect(() => {
      const element = ref.current;
      if (!element)
        return;
      const tabbable = getAllTabbableIn(element);
      setHasTabbableChildren(!!tabbable.length);
    }, []);
    const getItem = useCallback(
      (item) => {
        const nextItem = __spreadProps(__spreadValues({}, item), { id: id || item.id, tabId: tabIdProp });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [id, tabIdProp, getItemProp]
    );
    const tabId = store.panels.useState(
      () => {
        var _a2;
        return tabIdProp || ((_a2 = store.panels.item(id)) == null ? void 0 : _a2.tabId);
      }
    );
    const open = store.useState(
      (state) => !!tabId && state.selectedId === tabId
    );
    props = __spreadProps(__spreadValues({
      id,
      role: "tabpanel",
      "aria-labelledby": tabId || void 0
    }, props), {
      ref: useForkRef(ref, props.ref)
    });
    const disclosure = useDisclosureStore({ open });
    props = useFocusable(__spreadValues({ focusable: !hasTabbableChildren }, props));
    props = useDisclosureContent(__spreadValues({ store: disclosure }, props));
    props = useCollectionItem(__spreadProps(__spreadValues({ store: store.panels }, props), { getItem }));
    return props;
  }
);
var TabPanel = createComponent((props) => {
  const htmlProps = useTabPanel(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  TabPanel.displayName = "TabPanel";
}
export {
  TabPanel,
  useTabPanel
};
