import {
  useDialogDisclosure
} from "./LSTZ5Q72.js";
import {
  PopoverContext
} from "./6GS36SYX.js";
import {
  usePopoverAnchor
} from "./D6NPK2DL.js";
import {
  createComponent,
  createElement,
  createHook
} from "./5ETIGB6O.js";
import {
  useEvent,
  useWrapElement
} from "./ASYR66PQ.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./4BKCJXBM.js";

// src/popover/popover-disclosure.tsx
import { jsx } from "react/jsx-runtime";
var usePopoverDisclosure = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const onClickProp = props.onClick;
    const onClick = useEvent((event) => {
      store.setAnchorElement(event.currentTarget);
      onClickProp == null ? void 0 : onClickProp(event);
    });
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(PopoverContext.Provider, { value: store, children: element }),
      [store]
    );
    props = __spreadProps(__spreadValues({}, props), {
      onClick
    });
    props = usePopoverAnchor(__spreadValues({ store }, props));
    props = useDialogDisclosure(__spreadValues({ store }, props));
    return props;
  }
);
var PopoverDisclosure = createComponent(
  (props) => {
    const htmlProps = usePopoverDisclosure(props);
    return createElement("button", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  PopoverDisclosure.displayName = "PopoverDisclosure";
}

export {
  usePopoverDisclosure,
  PopoverDisclosure
};
