import {
  ComboboxContext
} from "./5VGBBGF5.js";
import {
  createComponent,
  createElement,
  createHook
} from "./5ETIGB6O.js";
import {
  useEvent,
  useForkRef,
  useId,
  useWrapElement
} from "./ASYR66PQ.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./4BKCJXBM.js";

// src/combobox/combobox-list.tsx
import { useRef } from "react";
import { jsx } from "react/jsx-runtime";
var useComboboxList = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const ref = useRef(null);
    const id = useId(props.id);
    const onKeyDownProp = props.onKeyDown;
    const onKeyDown = useEvent((event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented)
        return;
      if (event.key === "Escape") {
        store.move(null);
      }
    });
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(ComboboxContext.Provider, { value: store, children: element }),
      [store]
    );
    const mounted = store.useState("mounted");
    const style = mounted ? props.style : __spreadProps(__spreadValues({}, props.style), { display: "none" });
    props = __spreadProps(__spreadValues({
      id,
      role: "listbox",
      hidden: !mounted
    }, props), {
      ref: useForkRef(id ? store.setContentElement : null, ref, props.ref),
      style,
      onKeyDown
    });
    return props;
  }
);
var ComboboxList = createComponent((props) => {
  const htmlProps = useComboboxList(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  ComboboxList.displayName = "ComboboxList";
}

export {
  useComboboxList,
  ComboboxList
};
