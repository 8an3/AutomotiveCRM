import {
  useDialog
} from "./EMZ4NQG4.js";
import {
  PopoverContext
} from "./6GS36SYX.js";
import {
  createComponent,
  createElement,
  createHook
} from "./5ETIGB6O.js";
import {
  usePortalRef,
  useSafeLayoutEffect,
  useWrapElement
} from "./ASYR66PQ.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./4BKCJXBM.js";

// src/popover/popover.tsx
import { useState } from "react";
import { jsx } from "react/jsx-runtime";
var usePopover = createHook(
  (_a) => {
    var _b = _a, {
      store,
      modal = false,
      portal = !!modal,
      preserveTabOrder = true,
      autoFocusOnShow = true,
      wrapperProps
    } = _b, props = __objRest(_b, [
      "store",
      "modal",
      "portal",
      "preserveTabOrder",
      "autoFocusOnShow",
      "wrapperProps"
    ]);
    const popoverElement = store.useState("popoverElement");
    const contentElement = store.useState("contentElement");
    useSafeLayoutEffect(() => {
      const wrapper = popoverElement;
      const popover = contentElement;
      if (!wrapper)
        return;
      if (!popover)
        return;
      wrapper.style.zIndex = getComputedStyle(popover).zIndex;
    }, [popoverElement, contentElement]);
    const [canAutoFocusOnShow, setCanAutoFocusOnShow] = useState(false);
    const { portalRef, domReady } = usePortalRef(portal, props.portalRef);
    const mounted = store.useState("mounted");
    useSafeLayoutEffect(() => {
      if (!domReady)
        return;
      if (!mounted)
        return;
      if (!(contentElement == null ? void 0 : contentElement.isConnected))
        return;
      const raf = requestAnimationFrame(() => {
        setCanAutoFocusOnShow(true);
      });
      return () => {
        cancelAnimationFrame(raf);
      };
    }, [domReady, mounted, contentElement]);
    const position = store.useState(
      (state) => state.fixed ? "fixed" : "absolute"
    );
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(
        "div",
        __spreadProps(__spreadValues({
          role: "presentation"
        }, wrapperProps), {
          style: __spreadValues({
            position,
            top: 0,
            left: 0
          }, wrapperProps == null ? void 0 : wrapperProps.style),
          ref: store.setPopoverElement,
          children: element
        })
      ),
      [store, position, wrapperProps]
    );
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(PopoverContext.Provider, { value: store, children: element }),
      [store]
    );
    props = __spreadProps(__spreadValues({}, props), {
      style: __spreadValues({
        position: "relative"
      }, props.style)
    });
    props = useDialog(__spreadProps(__spreadValues({
      store,
      modal,
      preserveTabOrder,
      portal,
      autoFocusOnShow: canAutoFocusOnShow && autoFocusOnShow
    }, props), {
      portalRef
    }));
    return props;
  }
);
var Popover = createComponent((props) => {
  const htmlProps = usePopover(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Popover.displayName = "Popover";
}

export {
  usePopover,
  Popover
};
