"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _FO6MB5HFcjs = require('./FO6MB5HF.cjs');


var _DASOL6J2cjs = require('./DASOL6J2.cjs');




var _7NAIPZYNcjs = require('./7NAIPZYN.cjs');


var _F7HVNVHQcjs = require('./F7HVNVHQ.cjs');





var _NREUHWTUcjs = require('./NREUHWTU.cjs');




var _6455U47Tcjs = require('./6455U47T.cjs');

// src/checkbox/checkbox.tsx
var _react = require('react');
var _jsxruntime = require('react/jsx-runtime');
function setMixed(element, mixed) {
  if (mixed) {
    element.indeterminate = true;
  } else if (element.indeterminate) {
    element.indeterminate = false;
  }
}
function isNativeCheckbox(tagName, type) {
  return tagName === "input" && (!type || type === "checkbox");
}
var useCheckbox = _7NAIPZYNcjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, {
      store,
      value: valueProp,
      checked: checkedProp,
      defaultChecked
    } = _b, props = _6455U47Tcjs.__objRest.call(void 0, _b, [
      "store",
      "value",
      "checked",
      "defaultChecked"
    ]);
    var _a2;
    const storeChecked = _F7HVNVHQcjs.useStoreState.call(void 0, store, (state) => {
      if (checkedProp !== void 0)
        return checkedProp;
      if (state.value === void 0)
        return;
      if (valueProp) {
        if (Array.isArray(state.value))
          return state.value.includes(valueProp);
        return state.value === valueProp;
      }
      if (Array.isArray(state.value))
        return false;
      if (typeof state.value === "boolean")
        return state.value;
      return false;
    });
    const [_checked, setChecked] = _react.useState.call(void 0, defaultChecked != null ? defaultChecked : false);
    const checked = (_a2 = checkedProp != null ? checkedProp : storeChecked) != null ? _a2 : _checked;
    const ref = _react.useRef.call(void 0, null);
    const tagName = _NREUHWTUcjs.useTagName.call(void 0, ref, props.as || "input");
    const nativeCheckbox = isNativeCheckbox(tagName, props.type);
    const mixed = checked ? checked === "mixed" : void 0;
    const isChecked = checked === "mixed" ? false : checked;
    _react.useEffect.call(void 0, () => {
      const element = ref.current;
      if (!element)
        return;
      setMixed(element, mixed);
      element.checked = isChecked;
    }, [mixed, isChecked]);
    const onChangeProp = props.onChange;
    const onChange = _NREUHWTUcjs.useEvent.call(void 0, (event) => {
      if (props.disabled) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }
      setMixed(event.currentTarget, mixed);
      if (!nativeCheckbox) {
        event.currentTarget.checked = !event.currentTarget.checked;
      }
      onChangeProp == null ? void 0 : onChangeProp(event);
      if (event.defaultPrevented)
        return;
      const elementChecked = event.currentTarget.checked;
      setChecked(elementChecked);
      store == null ? void 0 : store.setValue((prevValue) => {
        if (!valueProp)
          return elementChecked;
        if (!Array.isArray(prevValue)) {
          return prevValue === valueProp ? false : valueProp;
        }
        if (elementChecked)
          return [...prevValue, valueProp];
        return prevValue.filter((v) => v !== valueProp);
      });
    });
    const onClickProp = props.onClick;
    const onClick = _NREUHWTUcjs.useEvent.call(void 0, (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (nativeCheckbox)
        return;
      onChange(event);
    });
    props = _NREUHWTUcjs.useWrapElement.call(void 0, 
      props,
      (element) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, _FO6MB5HFcjs.CheckboxCheckedContext.Provider, { value: isChecked, children: element }),
      [isChecked]
    );
    props = _6455U47Tcjs.__spreadProps.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, {
      role: !nativeCheckbox ? "checkbox" : void 0,
      type: nativeCheckbox ? "checkbox" : void 0,
      "aria-checked": checked
    }, props), {
      ref: _NREUHWTUcjs.useForkRef.call(void 0, ref, props.ref),
      onChange,
      onClick
    });
    props = _DASOL6J2cjs.useCommand.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, { clickOnEnter: !nativeCheckbox }, props));
    return _6455U47Tcjs.__spreadValues.call(void 0, {
      value: nativeCheckbox ? valueProp : void 0,
      checked: isChecked
    }, props);
  }
);
var Checkbox = _7NAIPZYNcjs.createComponent.call(void 0, (props) => {
  const htmlProps = useCheckbox(props);
  return _7NAIPZYNcjs.createElement.call(void 0, "input", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Checkbox.displayName = "Checkbox";
}




exports.useCheckbox = useCheckbox; exports.Checkbox = Checkbox;
