"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/dialog/utils/orchestrate.ts
var setups = Symbol();
function orchestrate(element, key, setup, cleanup) {
  if (!element[setups]) {
    element[setups] = /* @__PURE__ */ new Map();
  }
  element[setups].set(key, setup);
  setup();
  return () => {
    var _a, _b;
    cleanup();
    const prevSetup = (_a = element[setups]) == null ? void 0 : _a.get(key);
    if (prevSetup === setup) {
      (_b = element[setups]) == null ? void 0 : _b.delete(key);
    } else if (prevSetup) {
      prevSetup();
    }
  };
}
function setAttribute(element, attr, value) {
  let previousValue = element.getAttribute(attr);
  const setup = () => {
    previousValue = element.getAttribute(attr);
    element.setAttribute(attr, value);
  };
  const cleanup = () => {
    if (previousValue == null) {
      element.removeAttribute(attr);
    } else {
      element.setAttribute(attr, previousValue);
    }
  };
  return orchestrate(element, attr, setup, cleanup);
}
function setProperty(element, property, value) {
  let exists = property in element;
  let previousValue = element[property];
  const setup = () => {
    exists = property in element;
    previousValue = element[property];
    element[property] = value;
  };
  const cleanup = () => {
    if (!exists) {
      delete element[property];
    } else {
      element[property] = previousValue;
    }
  };
  return orchestrate(element, property, setup, cleanup);
}
function assignStyle(element, style) {
  if (!element)
    return () => {
    };
  let prevStyle = element.style.cssText;
  const setup = () => {
    prevStyle = element.style.cssText;
    Object.assign(element.style, style);
  };
  const cleanup = () => {
    element.style.cssText = prevStyle;
  };
  return orchestrate(element, "style", setup, cleanup);
}
function setCSSProperty(element, property, value) {
  if (!element)
    return () => {
    };
  let previousValue = element.style.getPropertyValue(property);
  const setup = () => {
    previousValue = element.style.getPropertyValue(property);
    element.style.setProperty(property, value);
  };
  const cleanup = () => {
    if (previousValue) {
      element.style.setProperty(property, previousValue);
    } else {
      element.style.removeProperty(property);
    }
  };
  return orchestrate(element, property, setup, cleanup);
}






exports.setAttribute = setAttribute; exports.setProperty = setProperty; exports.assignStyle = assignStyle; exports.setCSSProperty = setCSSProperty;
