"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _CARNFZQTcjs = require('./CARNFZQT.cjs');


var _EM2PMFEWcjs = require('./EM2PMFEW.cjs');



var _NREUHWTUcjs = require('./NREUHWTU.cjs');



var _6455U47Tcjs = require('./6455U47T.cjs');

// src/dialog/dialog-backdrop.tsx
var _react = require('react');
var _misc = require('@ariakit/core/utils/misc');
var _jsxruntime = require('react/jsx-runtime');
function DialogBackdrop({
  store,
  backdrop,
  backdropProps,
  hidden,
  children
}) {
  const ref = _react.useRef.call(void 0, null);
  store = _react.useMemo.call(void 0, 
    () => _6455U47Tcjs.__spreadProps.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, {}, store), {
      // Override the setContentElement method to prevent the backdrop from
      // overwriting the dialog's content element. TODO: Refactor this.
      setContentElement: _misc.noop
    }),
    [store]
  );
  const contentElement = store.useState("contentElement");
  _NREUHWTUcjs.useSafeLayoutEffect.call(void 0, () => {
    const backdrop2 = ref.current;
    const dialog = contentElement;
    if (!backdrop2)
      return;
    if (!dialog)
      return;
    backdrop2.style.zIndex = getComputedStyle(dialog).zIndex;
  }, [contentElement]);
  _NREUHWTUcjs.useSafeLayoutEffect.call(void 0, () => {
    const id = contentElement == null ? void 0 : contentElement.id;
    if (!id)
      return;
    const backdrop2 = ref.current;
    if (!backdrop2)
      return;
    return _CARNFZQTcjs.markAncestor.call(void 0, backdrop2, id);
  }, [contentElement]);
  const props = _EM2PMFEWcjs.useDisclosureContent.call(void 0, _6455U47Tcjs.__spreadProps.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, {
    store,
    id: void 0,
    role: "presentation",
    hidden
  }, backdropProps), {
    ref: _NREUHWTUcjs.useForkRef.call(void 0, backdropProps == null ? void 0 : backdropProps.ref, ref),
    style: _6455U47Tcjs.__spreadValues.call(void 0, {
      position: "fixed",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }, backdropProps == null ? void 0 : backdropProps.style)
  }));
  const Component = typeof backdrop !== "boolean" ? backdrop || "div" : "div";
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Component, _6455U47Tcjs.__spreadProps.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, {}, props), { "data-backdrop": (contentElement == null ? void 0 : contentElement.id) || "", children }));
}



exports.DialogBackdrop = DialogBackdrop;
