"use strict";Object.defineProperty(exports, "__esModule", {value: true});


var _2WZVSPAIcjs = require('../__chunks/2WZVSPAI.cjs');


var _UBDR3SABcjs = require('../__chunks/UBDR3SAB.cjs');


var _LIP53P4Icjs = require('../__chunks/LIP53P4I.cjs');
require('../__chunks/DASOL6J2.cjs');
require('../__chunks/3FTPSHLH.cjs');
require('../__chunks/ZQAFJQIS.cjs');
require('../__chunks/KLZID3QO.cjs');
require('../__chunks/NVBNDB5B.cjs');
require('../__chunks/LHHW5ZQP.cjs');
require('../__chunks/NVMBKFRB.cjs');




var _7NAIPZYNcjs = require('../__chunks/7NAIPZYN.cjs');
require('../__chunks/F7HVNVHQ.cjs');




var _NREUHWTUcjs = require('../__chunks/NREUHWTU.cjs');
require('../__chunks/2X5K3J7Y.cjs');




var _6455U47Tcjs = require('../__chunks/6455U47T.cjs');

// src/combobox/combobox-item.tsx
var _react = require('react');
var _dom = require('@ariakit/core/utils/dom');
var _events = require('@ariakit/core/utils/events');
var _focus = require('@ariakit/core/utils/focus');
var _misc = require('@ariakit/core/utils/misc');
var _jsxruntime = require('react/jsx-runtime');
var useComboboxItem = _7NAIPZYNcjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, {
      store,
      value,
      hideOnClick = value != null,
      setValueOnClick = true,
      shouldRegisterItem = true,
      focusOnHover = false,
      moveOnKeyPress = true,
      getItem: getItemProp
    } = _b, props = _6455U47Tcjs.__objRest.call(void 0, _b, [
      "store",
      "value",
      "hideOnClick",
      "setValueOnClick",
      "shouldRegisterItem",
      "focusOnHover",
      "moveOnKeyPress",
      "getItem"
    ]);
    const context = _react.useContext.call(void 0, _2WZVSPAIcjs.ComboboxContext);
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "ComboboxItem must be wrapped in a ComboboxList or ComboboxPopover component"
    );
    const getItem = _react.useCallback.call(void 0, 
      (item) => {
        const nextItem = _6455U47Tcjs.__spreadProps.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, {}, item), { value });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [value, getItemProp]
    );
    const onClickProp = props.onClick;
    const setValueOnClickProp = _NREUHWTUcjs.useBooleanEvent.call(void 0, setValueOnClick);
    const hideOnClickProp = _NREUHWTUcjs.useBooleanEvent.call(void 0, hideOnClick);
    const onClick = _NREUHWTUcjs.useEvent.call(void 0, (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (_events.isDownloading.call(void 0, event))
        return;
      if (_events.isOpeningInNewTab.call(void 0, event))
        return;
      if (value != null && setValueOnClickProp(event)) {
        store == null ? void 0 : store.setValue(value);
      }
      if (hideOnClickProp(event)) {
        store == null ? void 0 : store.move(null);
        store == null ? void 0 : store.hide();
      }
    });
    const onKeyDownProp = props.onKeyDown;
    const onKeyDown = _NREUHWTUcjs.useEvent.call(void 0, (event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented)
        return;
      const baseElement = store == null ? void 0 : store.getState().baseElement;
      if (!baseElement)
        return;
      if (_focus.hasFocus.call(void 0, baseElement))
        return;
      const printable = event.key.length === 1;
      if (printable || event.key === "Backspace" || event.key === "Delete") {
        queueMicrotask(() => baseElement.focus());
        if (_dom.isTextField.call(void 0, baseElement)) {
          store == null ? void 0 : store.setValue(baseElement.value);
        }
      }
    });
    props = _NREUHWTUcjs.useWrapElement.call(void 0, 
      props,
      (element) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, _2WZVSPAIcjs.ComboboxItemValueContext.Provider, { value, children: element }),
      [value]
    );
    const contentElement = store.useState("contentElement");
    props = _6455U47Tcjs.__spreadProps.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, {
      role: _dom.getPopupItemRole.call(void 0, contentElement),
      children: value
    }, props), {
      onClick,
      onKeyDown
    });
    const moveOnKeyPressProp = _NREUHWTUcjs.useBooleanEvent.call(void 0, moveOnKeyPress);
    const shouldRegister = store.useState(
      (state) => state.mounted && shouldRegisterItem
    );
    props = _LIP53P4Icjs.useCompositeItem.call(void 0, _6455U47Tcjs.__spreadProps.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, {
      store
    }, props), {
      getItem,
      shouldRegisterItem: shouldRegister,
      // Dispatch a custom event on the combobox input when moving to an item
      // with the keyboard so the Combobox component can enable inline
      // autocompletion.
      moveOnKeyPress: (event) => {
        if (!moveOnKeyPressProp(event))
          return false;
        const moveEvent = new Event("combobox-item-move");
        const baseElement = store == null ? void 0 : store.getState().baseElement;
        baseElement == null ? void 0 : baseElement.dispatchEvent(moveEvent);
        return true;
      }
    }));
    props = _UBDR3SABcjs.useCompositeHover.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, { store, focusOnHover }, props));
    return props;
  }
);
var ComboboxItem = _7NAIPZYNcjs.createMemoComponent.call(void 0, 
  (props) => {
    const htmlProps = useComboboxItem(props);
    return _7NAIPZYNcjs.createElement.call(void 0, "div", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  ComboboxItem.displayName = "ComboboxItem";
}



exports.ComboboxItem = ComboboxItem; exports.useComboboxItem = useComboboxItem;
