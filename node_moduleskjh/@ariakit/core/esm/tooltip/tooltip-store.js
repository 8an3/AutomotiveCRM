import {
  createPopoverStore
} from "../__chunks/CUW3E24J.js";
import "../__chunks/MNNKHNLW.js";
import {
  createDisclosureStore
} from "../__chunks/ZV2GEGPL.js";
import {
  createStore
} from "../__chunks/BOKMNDR7.js";
import {
  defaultValue
} from "../__chunks/NWU4GBZ6.js";
import {
  __spreadProps,
  __spreadValues
} from "../__chunks/4BKCJXBM.js";

// src/tooltip/tooltip-store.ts
var tooltips = createStore({ activeRef: null });
function afterTimeout(timeoutMs, cb) {
  const timeoutId = setTimeout(cb, timeoutMs);
  return () => clearTimeout(timeoutId);
}
function createTooltipStore(props = {}) {
  var _a;
  const syncState = (_a = props.store) == null ? void 0 : _a.getState();
  const open = defaultValue(props.open, syncState == null ? void 0 : syncState.open, false);
  const disclosure = createDisclosureStore(__spreadProps(__spreadValues({}, props), { open }));
  const popover = createPopoverStore(__spreadProps(__spreadValues({}, props), {
    open,
    placement: defaultValue(
      props.placement,
      syncState == null ? void 0 : syncState.placement,
      "top"
    ),
    gutter: defaultValue(props.gutter, syncState == null ? void 0 : syncState.gutter, 8)
  }));
  const initialState = __spreadProps(__spreadValues({}, popover.getState()), {
    timeout: defaultValue(props.timeout, syncState == null ? void 0 : syncState.timeout, 0)
  });
  const tooltip = createStore(
    initialState,
    popover,
    disclosure.omit("open", "mounted"),
    props.store
  );
  const ref = Symbol();
  tooltip.setup(
    () => disclosure.sync(
      (state, prev) => {
        const { timeout } = tooltip.getState();
        const { activeRef } = tooltips.getState();
        if (state.open) {
          if (!timeout || activeRef) {
            tooltips.setState("activeRef", ref);
            tooltip.setState("open", true);
            return;
          } else {
            tooltips.setState("activeRef", null);
            return afterTimeout(timeout, () => {
              tooltips.setState("activeRef", ref);
            });
          }
        } else if (state.open !== prev.open) {
          tooltip.setState("open", false);
          return afterTimeout(timeout, () => {
            tooltips.setState(
              "activeRef",
              (activeRef2) => activeRef2 === ref ? null : activeRef2
            );
          });
        }
        return;
      },
      ["open"]
    )
  );
  tooltip.setup(
    () => tooltips.sync(
      (state) => {
        tooltip.setState("open", state.activeRef === ref);
      },
      ["activeRef"]
    )
  );
  tooltip.setup(() => () => {
    tooltips.setState(
      "activeRef",
      (activeRef) => activeRef === ref ? null : activeRef
    );
  });
  return __spreadValues(__spreadValues(__spreadValues({}, popover), disclosure), tooltip);
}
export {
  createTooltipStore
};
