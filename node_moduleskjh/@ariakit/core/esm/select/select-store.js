import {
  createPopoverStore
} from "../__chunks/CUW3E24J.js";
import "../__chunks/MNNKHNLW.js";
import "../__chunks/ZV2GEGPL.js";
import {
  createCompositeStore
} from "../__chunks/R6VHFWTV.js";
import "../__chunks/EWHSN7GO.js";
import {
  createStore,
  mergeStore
} from "../__chunks/BOKMNDR7.js";
import {
  defaultValue
} from "../__chunks/NWU4GBZ6.js";
import "../__chunks/N6JW4ITM.js";
import {
  toArray
} from "../__chunks/5XEKIOCW.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/4BKCJXBM.js";

// src/select/select-store.ts
function createSelectStore(_a = {}) {
  var _b = _a, {
    combobox
  } = _b, props = __objRest(_b, [
    "combobox"
  ]);
  const store = mergeStore(
    props.store,
    combobox == null ? void 0 : combobox.omit(
      "value",
      "items",
      "renderedItems",
      "baseElement",
      "arrowElement",
      "anchorElement",
      "contentElement",
      "popoverElement",
      "disclosureElement"
    )
  );
  const syncState = store.getState();
  const composite = createCompositeStore(__spreadProps(__spreadValues({}, props), {
    store,
    virtualFocus: defaultValue(
      props.virtualFocus,
      syncState.virtualFocus,
      true
    ),
    includesBaseElement: defaultValue(
      props.includesBaseElement,
      syncState.includesBaseElement,
      false
    ),
    activeId: defaultValue(
      props.activeId,
      syncState.activeId,
      props.defaultActiveId,
      null
    ),
    orientation: defaultValue(
      props.orientation,
      syncState.orientation,
      "vertical"
    )
  }));
  const popover = createPopoverStore(__spreadProps(__spreadValues({}, props), {
    store,
    placement: defaultValue(
      props.placement,
      syncState.placement,
      "bottom-start"
    )
  }));
  const initialValue = new String("");
  const initialState = __spreadProps(__spreadValues(__spreadValues({}, composite.getState()), popover.getState()), {
    value: defaultValue(
      props.value,
      syncState.value,
      props.defaultValue,
      initialValue
    ),
    setValueOnMove: defaultValue(
      props.setValueOnMove,
      syncState.setValueOnMove,
      false
    ),
    selectElement: defaultValue(syncState.selectElement, null),
    labelElement: defaultValue(syncState.labelElement, null)
  });
  const select = createStore(initialState, composite, popover, store);
  select.setup(
    () => select.sync(
      (state) => {
        if (state.value !== initialValue)
          return;
        if (!state.items.length)
          return;
        const item = state.items.find(
          (item2) => !item2.disabled && item2.value != null
        );
        if ((item == null ? void 0 : item.value) == null)
          return;
        select.setState("value", item.value);
      },
      ["value", "items"]
    )
  );
  select.setup(
    () => select.sync(
      (state) => {
        if (combobox)
          return;
        if (state.mounted)
          return;
        const values = toArray(state.value);
        const lastValue = values[values.length - 1];
        if (lastValue == null)
          return;
        const item = state.items.find(
          (item2) => !item2.disabled && item2.value === lastValue
        );
        if (!item)
          return;
        select.setState("activeId", item.id);
      },
      ["mounted", "items", "value"]
    )
  );
  select.setup(
    () => select.syncBatch(
      (state) => {
        const { mounted, value, activeId } = select.getState();
        if (!state.setValueOnMove && mounted)
          return;
        if (Array.isArray(value))
          return;
        if (!state.moves)
          return;
        if (!activeId)
          return;
        const item = composite.item(activeId);
        if (!item || item.disabled || item.value == null)
          return;
        select.setState("value", item.value);
      },
      ["setValueOnMove", "moves"]
    )
  );
  return __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, composite), popover), select), {
    setValue: (value) => select.setState("value", value),
    setSelectElement: (element) => select.setState("selectElement", element),
    setLabelElement: (element) => select.setState("labelElement", element)
  });
}
export {
  createSelectStore
};
