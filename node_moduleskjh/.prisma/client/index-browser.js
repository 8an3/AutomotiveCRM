
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  username: 'username',
  email: 'email',
  phone: 'phone',
  lastSubscriptionCheck: 'lastSubscriptionCheck',
  refreshToken: 'refreshToken',
  expires_in: 'expires_in',
  omvicNumber: 'omvicNumber',
  idToken: 'idToken',
  position: 'position',
  roleId: 'roleId',
  profileId: 'profileId',
  customerId: 'customerId',
  returning: 'returning',
  subscriptionId: 'subscriptionId',
  activixActivated: 'activixActivated',
  activixEmail: 'activixEmail',
  activisUserId: 'activisUserId'
};

exports.Prisma.MicrosoftAccountScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  username: 'username',
  microId: 'microId',
  name: 'name',
  givenName: 'givenName',
  familyName: 'familyName',
  identityProvider: 'identityProvider'
};

exports.Prisma.MicroCacheScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userEmail: 'userEmail',
  accessToken: 'accessToken',
  accessTokenExpiry: 'accessTokenExpiry',
  refreshToken: 'refreshToken'
};

exports.Prisma.UserIntergrationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userEmail: 'userEmail',
  activixId: 'activixId',
  activixActivated: 'activixActivated',
  dealerAccountId: 'dealerAccountId',
  activixEmail: 'activixEmail'
};

exports.Prisma.DealerCustomerScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dealerName: 'dealerName',
  dealerPhone: 'dealerPhone',
  dealerAddress: 'dealerAddress',
  dealerCity: 'dealerCity',
  dealerProvince: 'dealerProvince',
  dealerPostal: 'dealerPostal',
  dealerEmail: 'dealerEmail',
  planetScale: 'planetScale',
  vercel: 'vercel',
  github: 'github'
};

exports.Prisma.DealerFeesScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dealer: 'dealer',
  dealerAddress: 'dealerAddress',
  dealerProv: 'dealerProv',
  dealerPhone: 'dealerPhone',
  omvicNumber: 'omvicNumber',
  userLoanProt: 'userLoanProt',
  userTireandRim: 'userTireandRim',
  userGap: 'userGap',
  userExtWarr: 'userExtWarr',
  userServicespkg: 'userServicespkg',
  vinE: 'vinE',
  lifeDisability: 'lifeDisability',
  rustProofing: 'rustProofing',
  userLicensing: 'userLicensing',
  userFinance: 'userFinance',
  userDemo: 'userDemo',
  userGasOnDel: 'userGasOnDel',
  userOMVIC: 'userOMVIC',
  userOther: 'userOther',
  userTax: 'userTax',
  userAirTax: 'userAirTax',
  userTireTax: 'userTireTax',
  userGovern: 'userGovern',
  userPDI: 'userPDI',
  userLabour: 'userLabour',
  userMarketAdj: 'userMarketAdj',
  userCommodity: 'userCommodity',
  destinationCharge: 'destinationCharge',
  userFreight: 'userFreight',
  userAdmin: 'userAdmin',
  userEmail: 'userEmail'
};

exports.Prisma.DealerInfoScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dealerName: 'dealerName',
  dealerAddress: 'dealerAddress',
  dealerCity: 'dealerCity',
  dealerProv: 'dealerProv',
  dealerPostal: 'dealerPostal',
  dealerPhone: 'dealerPhone'
};

exports.Prisma.DealerFeesAdminScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dealer: 'dealer',
  dealerAddress: 'dealerAddress',
  dealerProv: 'dealerProv',
  dealerPhone: 'dealerPhone',
  omvicNumber: 'omvicNumber',
  userLoanProt: 'userLoanProt',
  userTireandRim: 'userTireandRim',
  userGap: 'userGap',
  userExtWarr: 'userExtWarr',
  userServicespkg: 'userServicespkg',
  vinE: 'vinE',
  lifeDisability: 'lifeDisability',
  rustProofing: 'rustProofing',
  userLicensing: 'userLicensing',
  userFinance: 'userFinance',
  userDemo: 'userDemo',
  userGasOnDel: 'userGasOnDel',
  userOMVIC: 'userOMVIC',
  userOther: 'userOther',
  userTax: 'userTax',
  userAirTax: 'userAirTax',
  userTireTax: 'userTireTax',
  userGovern: 'userGovern',
  userPDI: 'userPDI',
  userLabour: 'userLabour',
  userMarketAdj: 'userMarketAdj',
  userCommodity: 'userCommodity',
  destinationCharge: 'destinationCharge',
  userFreight: 'userFreight',
  userAdmin: 'userAdmin'
};

exports.Prisma.DailyPDFScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userEmail: 'userEmail',
  todaysGoalGuest: 'todaysGoalGuest',
  todaysActualGuest: 'todaysActualGuest',
  differenceGuest: 'differenceGuest',
  monthsGoalGuest: 'monthsGoalGuest',
  todaysGoalTestDrives: 'todaysGoalTestDrives',
  todaysActualTestDrives: 'todaysActualTestDrives',
  differenceTestDrives: 'differenceTestDrives',
  monthsGoalTestDrives: 'monthsGoalTestDrives',
  todaysGoalWriteUps: 'todaysGoalWriteUps',
  todaysActualWriteUps: 'todaysActualWriteUps',
  differenceWriteUps: 'differenceWriteUps',
  monthsGoalWriteUps: 'monthsGoalWriteUps',
  todaysGoalDeliveries: 'todaysGoalDeliveries',
  todaysActualDeliveries: 'todaysActualDeliveries',
  differenceDeliveries: 'differenceDeliveries',
  monthsGoalDeliveries: 'monthsGoalDeliveries'
};

exports.Prisma.UserPasswordScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  hash: 'hash',
  userId: 'userId'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sequence: 'sequence',
  symbol: 'symbol',
  name: 'name',
  description: 'description'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  headline: 'headline',
  bio: 'bio',
  userId: 'userId'
};

exports.Prisma.UserAvatarImageScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  url: 'url',
  filePath: 'filePath',
  profileId: 'profileId'
};

exports.Prisma.UserCoverImageScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  url: 'url',
  filePath: 'filePath',
  profileId: 'profileId'
};

exports.Prisma.NotificationsUserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  content: 'content',
  read: 'read',
  userId: 'userId',
  dimiss: 'dimiss',
  type: 'type',
  financeId: 'financeId',
  clientfileId: 'clientfileId',
  to: 'to',
  from: 'from'
};

exports.Prisma.UserNotificationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  content: 'content',
  read: 'read',
  userId: 'userId',
  type: 'type',
  financeId: 'financeId',
  clientfileId: 'clientfileId'
};

exports.Prisma.StaffChatScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  message: 'message',
  sender: 'sender',
  senderName: 'senderName',
  to: 'to',
  toName: 'toName',
  room: 'room',
  token: 'token'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  slug: 'slug',
  title: 'title',
  description: 'description',
  content: 'content',
  isPublished: 'isPublished',
  userId: 'userId'
};

exports.Prisma.NoteImageScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  url: 'url',
  filePath: 'filePath',
  userId: 'userId',
  noteId: 'noteId'
};

exports.Prisma.SalesScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  email: 'email',
  sales: 'sales',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  label: 'label',
  addressComplete: 'addressComplete',
  addressGoogleMapsURL: 'addressGoogleMapsURL',
  street: 'street',
  streetDetails: 'streetDetails',
  subDistrict: 'subDistrict',
  district: 'district',
  city: 'city',
  province: 'province',
  postalCode: 'postalCode',
  countryCode: 'countryCode',
  countryId: 'countryId',
  provinceId: 'provinceId',
  cityId: 'cityId',
  districtId: 'districtId',
  subDistrictId: 'subDistrictId',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.AutomationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userEmail: 'userEmail',
  title: 'title',
  when: 'when',
  trigger: 'trigger',
  executionDate: 'executionDate',
  parameters: 'parameters',
  actions: 'actions',
  associate: 'associate',
  template: 'template',
  firstAssociate: 'firstAssociate',
  secAssociate: 'secAssociate',
  compeleted: 'compeleted',
  recurrence: 'recurrence',
  timeType: 'timeType',
  timeValue: 'timeValue',
  executeWhen: 'executeWhen',
  executionSchedule: 'executionSchedule'
};

exports.Prisma.InventoryMotorcycleScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  packageNumber: 'packageNumber',
  packagePrice: 'packagePrice',
  stockNumber: 'stockNumber',
  type: 'type',
  class: 'class',
  year: 'year',
  make: 'make',
  model: 'model',
  modelName: 'modelName',
  submodel: 'submodel',
  subSubmodel: 'subSubmodel',
  price: 'price',
  exteriorColor: 'exteriorColor',
  mileage: 'mileage',
  consignment: 'consignment',
  onOrder: 'onOrder',
  expectedOn: 'expectedOn',
  status: 'status',
  orderStatus: 'orderStatus',
  hdcFONumber: 'hdcFONumber',
  hdmcFONumber: 'hdmcFONumber',
  vin: 'vin',
  age: 'age',
  floorPlanDueDate: 'floorPlanDueDate',
  location: 'location',
  stocked: 'stocked',
  stockedDate: 'stockedDate',
  isNew: 'isNew',
  actualCost: 'actualCost',
  mfgSerialNumber: 'mfgSerialNumber',
  engineNumber: 'engineNumber',
  plates: 'plates',
  keyNumber: 'keyNumber',
  length: 'length',
  width: 'width',
  engine: 'engine',
  fuelType: 'fuelType',
  power: 'power',
  chassisNumber: 'chassisNumber',
  chassisYear: 'chassisYear',
  chassisMake: 'chassisMake',
  chassisModel: 'chassisModel',
  chassisType: 'chassisType',
  registrationState: 'registrationState',
  registrationExpiry: 'registrationExpiry',
  grossWeight: 'grossWeight',
  netWeight: 'netWeight',
  insuranceCompany: 'insuranceCompany',
  policyNumber: 'policyNumber',
  insuranceAgent: 'insuranceAgent',
  insuranceStartDate: 'insuranceStartDate',
  insuranceEndDate: 'insuranceEndDate',
  sold: 'sold'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  url: 'url',
  filePath: 'filePath',
  userId: 'userId'
};

exports.Prisma.GetConversationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  jsonData: 'jsonData',
  userEmail: 'userEmail'
};

exports.Prisma.ScriptScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  content: 'content',
  category: 'category',
  subCat: 'subCat',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailTemplatesScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  firstName: 'firstName',
  lastName: 'lastName',
  name: 'name',
  body: 'body',
  userEmail: 'userEmail',
  category: 'category',
  type: 'type',
  subject: 'subject',
  title: 'title',
  cc: 'cc',
  bcc: 'bcc',
  attributes: 'attributes',
  dept: 'dept',
  label: 'label',
  attachments: 'attachments',
  to: 'to',
  review: 'review',
  date: 'date',
  fromEmail: 'fromEmail'
};

exports.Prisma.EmailClientScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  firstName: 'firstName',
  lastName: 'lastName',
  name: 'name',
  body: 'body',
  userEmail: 'userEmail',
  category: 'category',
  type: 'type',
  subject: 'subject',
  cc: 'cc',
  bcc: 'bcc',
  attributes: 'attributes',
  dept: 'dept',
  label: 'label',
  attachments: 'attachments',
  to: 'to',
  review: 'review',
  date: 'date',
  fromEmail: 'fromEmail'
};

exports.Prisma.UCDAFormScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  financeId: 'financeId',
  seenOwnership: 'seenOwnership',
  originalOwner: 'originalOwner',
  vinChecked: 'vinChecked',
  orignialVinPlate: 'orignialVinPlate',
  registeredLien: 'registeredLien',
  totalLoss: 'totalLoss',
  theftRecovery: 'theftRecovery',
  manuWarrCancelled: 'manuWarrCancelled',
  outOfProv: 'outOfProv',
  usVehicle: 'usVehicle',
  dailyRental: 'dailyRental',
  fireDmg: 'fireDmg',
  waterDmg: 'waterDmg',
  policeCruiser: 'policeCruiser',
  paintedBodyPanels: 'paintedBodyPanels',
  absInoperable: 'absInoperable',
  polutionInoperable: 'polutionInoperable',
  repairsTransmission: 'repairsTransmission',
  repairsSuspSubframe: 'repairsSuspSubframe',
  repairsFuelSystem: 'repairsFuelSystem',
  repairsPowerTrain: 'repairsPowerTrain',
  repairsECU: 'repairsECU',
  repairsElectrical: 'repairsElectrical',
  repairsStructuralFrameDamage: 'repairsStructuralFrameDamage',
  alteredOrRepaired: 'alteredOrRepaired',
  decalsBadges: 'decalsBadges',
  dmgExcess3000: 'dmgExcess3000'
};

exports.Prisma.SaveMyDocScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  doc: 'doc',
  docName: 'docName',
  dept: 'dept',
  fileName: 'fileName',
  category: 'category'
};

exports.Prisma.UploadDocsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  financeId: 'financeId',
  category: 'category',
  fileName: 'fileName',
  userId: 'userId'
};

exports.Prisma.TwilioSMSDetailsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  conversationSid: 'conversationSid',
  participantSid: 'participantSid',
  userSid: 'userSid',
  username: 'username',
  userEmail: 'userEmail',
  passClient: 'passClient',
  myPhone: 'myPhone',
  proxyPhone: 'proxyPhone'
};

exports.Prisma.FinanceStorageScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  url: 'url',
  filePath: 'filePath',
  financeId: 'financeId'
};

exports.Prisma.FinanceNoteScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  financeId: 'financeId',
  slug: 'slug',
  customContent: 'customContent',
  urgentFinanceNote: 'urgentFinanceNote',
  author: 'author',
  isPublished: 'isPublished',
  customerId: 'customerId',
  dept: 'dept'
};

exports.Prisma.ClientAptsScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  title: 'title',
  start: 'start',
  end: 'end',
  contactMethod: 'contactMethod',
  completed: 'completed',
  apptStatus: 'apptStatus',
  apptType: 'apptType',
  note: 'note',
  unit: 'unit',
  brand: 'brand',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  userId: 'userId',
  description: 'description',
  userName: 'userName',
  attachments: 'attachments',
  direction: 'direction',
  resultOfcall: 'resultOfcall',
  resourceId: 'resourceId',
  activixId: 'activixId',
  activixNoteId: 'activixNoteId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isPublished: 'isPublished'
};

exports.Prisma.CommunicationsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  financeId: 'financeId',
  InPerson: 'InPerson',
  Phone: 'Phone',
  SMS: 'SMS',
  Email: 'Email',
  Other: 'Other'
};

exports.Prisma.CheckLatestEmailScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userEmail: 'userEmail',
  emailId: 'emailId',
  lastEmailSent: 'lastEmailSent',
  subject: 'subject',
  sender: 'sender',
  isRead: 'isRead'
};

exports.Prisma.CommunicationsOverviewScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  financeId: 'financeId',
  userId: 'userId',
  title: 'title',
  content: 'content',
  date: 'date',
  userName: 'userName',
  type: 'type',
  lead_id: 'lead_id',
  direction: 'direction',
  subject: 'subject',
  result: 'result',
  method: 'method',
  userEmail: 'userEmail'
};

exports.Prisma.WishListScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  brand: 'brand',
  model: 'model',
  brand2: 'brand2',
  model2: 'model2',
  wishListNotes: 'wishListNotes',
  notified: 'notified'
};

exports.Prisma.PartScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  partNumber: 'partNumber',
  brand: 'brand',
  name: 'name',
  price: 'price',
  cost: 'cost',
  quantity: 'quantity',
  description: 'description',
  category: 'category',
  subCategory: 'subCategory'
};

exports.Prisma.PartsOrderScalarFieldEnum = {
  orderNumber: 'orderNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  clientfileId: 'clientfileId',
  partNumber: 'partNumber'
};

exports.Prisma.PartsOrderDetailScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  partNumber: 'partNumber',
  quantity: 'quantity'
};

exports.Prisma.ClientfileScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  financeId: 'financeId',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  postal: 'postal',
  province: 'province',
  dl: 'dl',
  typeOfContact: 'typeOfContact',
  timeToContact: 'timeToContact',
  conversationId: 'conversationId'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  data: 'data',
  expires: 'expires',
  email: 'email',
  expiresAt: 'expiresAt',
  refreshToken: 'refreshToken',
  accessToken: 'accessToken',
  name: 'name',
  clientId: 'clientId',
  clientSecret: 'clientSecret'
};

exports.Prisma.LockFinanceTerminalsScalarFieldEnum = {
  id: 'id',
  locked: 'locked',
  financeId: 'financeId'
};

exports.Prisma.FinanceScalarFieldEnum = {
  id: 'id',
  clientfileId: 'clientfileId',
  dashboardId: 'dashboardId',
  financeId: 'financeId',
  activixId: 'activixId',
  theRealActId: 'theRealActId',
  financeManager: 'financeManager',
  email: 'email',
  firstName: 'firstName',
  mileage: 'mileage',
  lastName: 'lastName',
  phone: 'phone',
  name: 'name',
  address: 'address',
  city: 'city',
  postal: 'postal',
  province: 'province',
  dl: 'dl',
  typeOfContact: 'typeOfContact',
  timeToContact: 'timeToContact',
  iRate: 'iRate',
  months: 'months',
  discount: 'discount',
  total: 'total',
  onTax: 'onTax',
  on60: 'on60',
  biweekly: 'biweekly',
  weekly: 'weekly',
  weeklyOth: 'weeklyOth',
  biweekOth: 'biweekOth',
  oth60: 'oth60',
  weeklyqc: 'weeklyqc',
  biweeklyqc: 'biweeklyqc',
  qc60: 'qc60',
  deposit: 'deposit',
  biweeklNatWOptions: 'biweeklNatWOptions',
  weeklylNatWOptions: 'weeklylNatWOptions',
  nat60WOptions: 'nat60WOptions',
  weeklyOthWOptions: 'weeklyOthWOptions',
  biweekOthWOptions: 'biweekOthWOptions',
  oth60WOptions: 'oth60WOptions',
  biweeklNat: 'biweeklNat',
  weeklylNat: 'weeklylNat',
  nat60: 'nat60',
  qcTax: 'qcTax',
  otherTax: 'otherTax',
  totalWithOptions: 'totalWithOptions',
  otherTaxWithOptions: 'otherTaxWithOptions',
  desiredPayments: 'desiredPayments',
  freight: 'freight',
  admin: 'admin',
  commodity: 'commodity',
  pdi: 'pdi',
  discountPer: 'discountPer',
  userLoanProt: 'userLoanProt',
  userTireandRim: 'userTireandRim',
  userGap: 'userGap',
  userExtWarr: 'userExtWarr',
  userServicespkg: 'userServicespkg',
  deliveryCharge: 'deliveryCharge',
  vinE: 'vinE',
  lifeDisability: 'lifeDisability',
  rustProofing: 'rustProofing',
  userOther: 'userOther',
  paintPrem: 'paintPrem',
  licensing: 'licensing',
  stockNum: 'stockNum',
  options: 'options',
  accessories: 'accessories',
  labour: 'labour',
  year: 'year',
  brand: 'brand',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  msrp: 'msrp',
  userEmail: 'userEmail',
  tradeValue: 'tradeValue',
  tradeDesc: 'tradeDesc',
  tradeColor: 'tradeColor',
  tradeYear: 'tradeYear',
  tradeMake: 'tradeMake',
  tradeVin: 'tradeVin',
  tradeTrim: 'tradeTrim',
  tradeMileage: 'tradeMileage',
  trim: 'trim',
  vin: 'vin',
  leadNote: 'leadNote',
  sendToFinanceNow: 'sendToFinanceNow',
  dealNumber: 'dealNumber',
  bikeStatus: 'bikeStatus',
  lien: 'lien',
  dob: 'dob',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Finance2ScalarFieldEnum = {
  id: 'id',
  finance: 'finance',
  leadOrigin: 'leadOrigin',
  optionsTotal: 'optionsTotal',
  lienPyout: 'lienPyout',
  lienReg: 'lienReg'
};

exports.Prisma.DashboardScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  clientfileId: 'clientfileId',
  userEmail: 'userEmail',
  referral: 'referral',
  visited: 'visited',
  bookedApt: 'bookedApt',
  aptShowed: 'aptShowed',
  aptNoShowed: 'aptNoShowed',
  testDrive: 'testDrive',
  metService: 'metService',
  metManager: 'metManager',
  metParts: 'metParts',
  sold: 'sold',
  depositMade: 'depositMade',
  refund: 'refund',
  turnOver: 'turnOver',
  financeApp: 'financeApp',
  approved: 'approved',
  signed: 'signed',
  pickUpSet: 'pickUpSet',
  demoed: 'demoed',
  delivered: 'delivered',
  lastContact: 'lastContact',
  status: 'status',
  customerState: 'customerState',
  result: 'result',
  timesContacted: 'timesContacted',
  nextAppointment: 'nextAppointment',
  followUpDay: 'followUpDay',
  deliveredDate: 'deliveredDate',
  notes: 'notes',
  visits: 'visits',
  progress: 'progress',
  metSalesperson: 'metSalesperson',
  metFinance: 'metFinance',
  financeApplication: 'financeApplication',
  pickUpDate: 'pickUpDate',
  pickUpTime: 'pickUpTime',
  depositTakenDate: 'depositTakenDate',
  docsSigned: 'docsSigned',
  tradeRepairs: 'tradeRepairs',
  seenTrade: 'seenTrade',
  lastNote: 'lastNote',
  applicationDone: 'applicationDone',
  licensingSent: 'licensingSent',
  liceningDone: 'liceningDone',
  refunded: 'refunded',
  cancelled: 'cancelled',
  lost: 'lost',
  dLCopy: 'dLCopy',
  insCopy: 'insCopy',
  testDrForm: 'testDrForm',
  voidChq: 'voidChq',
  loanOther: 'loanOther',
  signBill: 'signBill',
  ucda: 'ucda',
  tradeInsp: 'tradeInsp',
  customerWS: 'customerWS',
  otherDocs: 'otherDocs',
  deposit: 'deposit',
  urgentFinanceNote: 'urgentFinanceNote',
  funded: 'funded',
  leadSource: 'leadSource',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FinManOptionsScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  email: 'email',
  BEandTR: 'BEandTR',
  intColor1: 'intColor1',
  licensingMan: 'licensingMan',
  licensingManTr: 'licensingManTr',
  dts: 'dts',
  verado: 'verado',
  motor: 'motor',
  sigPkgCruise: 'sigPkgCruise',
  biminiCr: 'biminiCr',
  wallCol: 'wallCol',
  wallColCr: 'wallColCr',
  colorCruise: 'colorCruise',
  furnitureColor: 'furnitureColor',
  sigPkgExplore: 'sigPkgExplore',
  selPkgExplore: 'selPkgExplore',
  tubesExplore: 'tubesExplore',
  colorExplore: 'colorExplore',
  wallColorExplore: 'wallColorExplore',
  sigPkgLX: 'sigPkgLX',
  selRFXPkgLX: 'selRFXPkgLX',
  selRFXWPkgLX: 'selRFXWPkgLX',
  blkPkg: 'blkPkg',
  blkPkgLX: 'blkPkgLX',
  wallGraphic: 'wallGraphic',
  colMatchedFiberLX: 'colMatchedFiberLX',
  powderCoatingLX: 'powderCoatingLX',
  blackAnoLX: 'blackAnoLX',
  premiumJLLX: 'premiumJLLX',
  JLTowerLX: 'JLTowerLX',
  wallColorLX: 'wallColorLX',
  wallGraphicLX: 'wallGraphicLX',
  wallGraphicAccentLX: 'wallGraphicAccentLX',
  fibreGlassPodsLX: 'fibreGlassPodsLX',
  powderCoatLX: 'powderCoatLX',
  signature: 'signature',
  select: 'select',
  tubeColor: 'tubeColor',
  furnitureLX: 'furnitureLX',
  flooringLX: 'flooringLX',
  blackoutPkgXT: 'blackoutPkgXT',
  signaturePkgXT: 'signaturePkgXT',
  premAudioPkg: 'premAudioPkg',
  XTPremiumcolor: 'XTPremiumcolor',
  JLPremiumxt: 'JLPremiumxt',
  JlPremiumAudio: 'JlPremiumAudio',
  fibreglassFrontXT: 'fibreglassFrontXT',
  WallGraphicXT: 'WallGraphicXT',
  powderCoatXT: 'powderCoatXT',
  furnitureXT: 'furnitureXT',
  battery: 'battery',
  propeller: 'propeller',
  gps: 'gps',
  saltwaterPkg: 'saltwaterPkg',
  baseInst: 'baseInst',
  cupHolder: 'cupHolder',
  multiHolder: 'multiHolder',
  cooler13: 'cooler13',
  coolerExtension: 'coolerExtension',
  coolerBag14: 'coolerBag14',
  singleHolder: 'singleHolder',
  stemwareHolder: 'stemwareHolder',
  cargoBox10: 'cargoBox10',
  cargoBox20: 'cargoBox20',
  cargoBox30: 'cargoBox30',
  rodHolder: 'rodHolder',
  batteryCharger: 'batteryCharger',
  bowFillerBench: 'bowFillerBench',
  portAquaLounger: 'portAquaLounger',
  skiTowMirror: 'skiTowMirror',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FinCanOptionsScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  baseInst: 'baseInst',
  cupHolder: 'cupHolder',
  multiHolder: 'multiHolder',
  cooler13: 'cooler13',
  stemwareHolder: 'stemwareHolder',
  coolerExtension: 'coolerExtension',
  coolerBag14: 'coolerBag14',
  singleHolder: 'singleHolder',
  cargoBox10: 'cargoBox10',
  cargoBox20: 'cargoBox20',
  cargoBox30: 'cargoBox30',
  rodHolder: 'rodHolder',
  batteryCharger: 'batteryCharger',
  bowFillerBench: 'bowFillerBench',
  skiTowMirror: 'skiTowMirror',
  portAquaLounger: 'portAquaLounger',
  Essentialkg: 'Essentialkg',
  ComfortPkg: 'ComfortPkg',
  watersports: 'watersports',
  familyBundle: 'familyBundle',
  BatterySwitch: 'BatterySwitch',
  familyBundleSW: 'familyBundleSW',
  watersportsSW: 'watersportsSW',
  EssentialpkgSW: 'EssentialpkgSW',
  ComfortPkgSW: 'ComfortPkgSW',
  BRPAudio: 'BRPAudio',
  UltimateAudio: 'UltimateAudio',
  BRPAudioL: 'BRPAudioL',
  SunshadeSW: 'SunshadeSW',
  ThermalInsert: 'ThermalInsert',
  CargoTile: 'CargoTile',
  VerticalSupport: 'VerticalSupport',
  BRPAudioRl0: 'BRPAudioRl0',
  familyBundlesSP: 'familyBundlesSP',
  watersportsSP: 'watersportsSP',
  ComfortPkgSP: 'ComfortPkgSP',
  familyBundleCR: 'familyBundleCR',
  ComfortPkgCR: 'ComfortPkgCR',
  HeatedGrips: 'HeatedGrips',
  TrailerLock: 'TrailerLock',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BmwMotoOptionsScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  m1000rMPkg: 'm1000rMPkg',
  m1000rTitEx: 'm1000rTitEx',
  desOption: 'desOption',
  m1000rrMPkg: 'm1000rrMPkg',
  s1000rrRacePkg: 's1000rrRacePkg',
  s1000rrRacePkg2: 's1000rrRacePkg2',
  f7gsConn: 'f7gsConn',
  f8gsDblSeat: 'f8gsDblSeat',
  r12rtAudioSystem: 'r12rtAudioSystem',
  f9xrHandProtectors: 'f9xrHandProtectors',
  r12gsCrossGld: 'r12gsCrossGld',
  r12gsSpSusp: 'r12gsSpSusp',
  r12gsProtBar: 'r12gsProtBar',
  r12gsCrossBlk: 'r12gsCrossBlk',
  audioSystem: 'audioSystem',
  highShield: 'highShield',
  psgrKit: 'psgrKit',
  alarm: 'alarm',
  color: 'color',
  chain: 'chain',
  comfortPkg: 'comfortPkg',
  touringPkg: 'touringPkg',
  activePkg: 'activePkg',
  dynamicPkg: 'dynamicPkg',
  offTire: 'offTire',
  keyless: 'keyless',
  headlightPro: 'headlightPro',
  shiftAssPro: 'shiftAssPro',
  tpc: 'tpc',
  cruise: 'cruise',
  windshield: 'windshield',
  handleBar: 'handleBar',
  extraHighSeat: 'extraHighSeat',
  alumTank1: 'alumTank1',
  alumTank2: 'alumTank2',
  classicW: 'classicW',
  silencer: 'silencer',
  chromedExhaust: 'chromedExhaust',
  crossW: 'crossW',
  highSeat: 'highSeat',
  lowKitLowSeat: 'lowKitLowSeat',
  lowSeat: 'lowSeat',
  passengerKitLowSeat: 'passengerKitLowSeat',
  comfortPsgrSeat: 'comfortPsgrSeat',
  mPsgrSeat: 'mPsgrSeat'
};

exports.Prisma.BmwMotoOptions2ScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  comfortSeat: 'comfortSeat',
  designW: 'designW',
  loweringKit: 'loweringKit',
  forgedWheels: 'forgedWheels',
  carbonWheels: 'carbonWheels',
  centerStand: 'centerStand',
  billetPack1: 'billetPack1',
  billetPack2: 'billetPack2',
  heatedSeat: 'heatedSeat',
  lugRack: 'lugRack',
  lugRackBrackets: 'lugRackBrackets',
  chargeSocket: 'chargeSocket',
  auxLights: 'auxLights',
  mLightBat: 'mLightBat',
  carbonPkg: 'carbonPkg',
  enduroPkg: 'enduroPkg',
  sportShield: 'sportShield',
  sportWheels: 'sportWheels',
  sportSeat: 'sportSeat',
  brownBench: 'brownBench',
  brownSeat: 'brownSeat',
  handleRisers: 'handleRisers',
  lgihtsPkg: 'lgihtsPkg',
  fogLights: 'fogLights',
  pilSeatCover: 'pilSeatCover',
  lapTimer: 'lapTimer',
  floorLight: 'floorLight',
  blackBench: 'blackBench',
  hillStart: 'hillStart',
  floorboards: 'floorboards',
  reverse: 'reverse',
  forkTubeTrim: 'forkTubeTrim',
  spokedW: 'spokedW',
  lockGasCap: 'lockGasCap',
  aeroWheel: 'aeroWheel',
  psgrBench719: 'psgrBench719',
  blackS719: 'blackS719',
  aero719: 'aero719',
  pinstripe: 'pinstripe',
  designPkgBL: 'designPkgBL',
  benchseatlow: 'benchseatlow',
  iconWheel: 'iconWheel',
  centreStand: 'centreStand',
  tubeHandle: 'tubeHandle',
  classicWheels: 'classicWheels',
  blackContrastwheel: 'blackContrastwheel',
  silverContastWheel: 'silverContastWheel',
  silverWheel: 'silverWheel',
  activeCruise: 'activeCruise',
  blackPowertrain: 'blackPowertrain',
  blackWheel: 'blackWheel',
  aeroPkg719: 'aeroPkg719'
};

exports.Prisma.ActivixLeadScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  activixId: 'activixId',
  account_id: 'account_id',
  customer_id: 'customer_id',
  source_id: 'source_id',
  phoneId: 'phoneId',
  vehicleIdWanted: 'vehicleIdWanted',
  vehicleIdWTrade: 'vehicleIdWTrade',
  emailId: 'emailId',
  Integer: 'Integer',
  provider_id: 'provider_id',
  appointment_date: 'appointment_date',
  phone_appointment_date: 'phone_appointment_date',
  available_date: 'available_date',
  be_back_date: 'be_back_date',
  birth_date: 'birth_date',
  call_date: 'call_date',
  created_at: 'created_at',
  csi_date: 'csi_date',
  delivered_date: 'delivered_date',
  deliverable_date: 'deliverable_date',
  delivery_date: 'delivery_date',
  home_presented_date: 'home_presented_date',
  paperwork_date: 'paperwork_date',
  presented_date: 'presented_date',
  promised_date: 'promised_date',
  financed_date: 'financed_date',
  road_test_date: 'road_test_date',
  home_road_test_date: 'home_road_test_date',
  sale_date: 'sale_date',
  take_over_date: 'take_over_date',
  unsubscribe_all_date: 'unsubscribe_all_date',
  unsubscribe_call_date: 'unsubscribe_call_date',
  unsubscribe_email_date: 'unsubscribe_email_date',
  unsubscribe_sms_date: 'unsubscribe_sms_date',
  updated_at: 'updated_at',
  address_line1: 'address_line1',
  address_line2: 'address_line2',
  business: 'business',
  business_name: 'business_name',
  campaign: 'campaign',
  city: 'city',
  civility: 'civility',
  country: 'country',
  created_method: 'created_method',
  credit_approved: 'credit_approved',
  dealer_tour: 'dealer_tour',
  division: 'division',
  financial_institution: 'financial_institution',
  first_name: 'first_name',
  form: 'form',
  funded: 'funded',
  gender: 'gender',
  inspected: 'inspected',
  keyword: 'keyword',
  last_name: 'last_name',
  locale: 'locale',
  navigation_history: 'navigation_history',
  postal_code: 'postal_code',
  progress_state: 'progress_state',
  provider: 'provider',
  province: 'province',
  qualification: 'qualification',
  rating: 'rating',
  referrer: 'referrer',
  result: 'result',
  search_term: 'search_term',
  second_contact: 'second_contact',
  second_contact_civility: 'second_contact_civility',
  segment: 'segment',
  source: 'source',
  status: 'status',
  type: 'type',
  walk_around: 'walk_around',
  comment: 'comment',
  advisor: 'advisor',
  delivered_by: 'delivered_by',
  emails: 'emails',
  emails2: 'emails2',
  phones: 'phones',
  phones2: 'phones2',
  phones3: 'phones3',
  financeId: 'financeId',
  dashboardId: 'dashboardId',
  userEmail: 'userEmail',
  promised_datere: 'promised_datere'
};

exports.Prisma.ActivixCommunicationScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  lead_id: 'lead_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  executed_at: 'executed_at',
  method: 'method',
  type: 'type',
  description: 'description',
  call_duration: 'call_duration',
  call_phone: 'call_phone',
  call_status: 'call_status',
  email_subject: 'email_subject',
  email_body: 'email_body',
  email_user: 'email_user',
  url: 'url',
  answered: 'answered',
  attempted: 'attempted',
  error: 'error',
  interrupted: 'interrupted',
  pending: 'pending',
  unanswered: 'unanswered'
};

exports.Prisma.ActivixEmailScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  lead_id: 'lead_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  address: 'address',
  type: 'type',
  string: 'string',
  valid: 'valid'
};

exports.Prisma.ActivixEventScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  lead_id: 'lead_id',
  owner_id: 'owner_id',
  completed_at: 'completed_at',
  created_at: 'created_at',
  end_at: 'end_at',
  start_at: 'start_at',
  updated_at: 'updated_at',
  canceled: 'canceled',
  completed: 'completed',
  confirmed: 'confirmed',
  description: 'description',
  no_show: 'no_show',
  priority: 'priority',
  title: 'title',
  Attribute: 'Attribute',
  lead: 'lead',
  owner: 'owner'
};

exports.Prisma.ActivixNotesScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  parent_id: 'parent_id',
  lead_id: 'lead_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  content: 'content',
  file_url: 'file_url'
};

exports.Prisma.ActivixPhonesScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  lead_id: 'lead_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  extension: 'extension',
  number: 'number',
  type: 'type',
  valid: 'valid'
};

exports.Prisma.ActivixProductsScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  created_at: 'created_at',
  updated_at: 'updated_at',
  category: 'category',
  minutes: 'minutes',
  notes: 'notes',
  premium: 'premium',
  price: 'price',
  sold: 'sold',
  boolean: 'boolean',
  name: 'name',
  type: 'type',
  label: 'label',
  ins_filling: 'ins_filling',
  ins_rental: 'ins_rental',
  ins_invalidity: 'ins_invalidity',
  ins_health: 'ins_health',
  ins_life: 'ins_life',
  extended_warranty: 'extended_warranty',
  rustproofing: 'rustproofing',
  chiselling: 'chiselling',
  anti_theft: 'anti_theft',
  starter: 'starter',
  window_tint: 'window_tint',
  pre_paid_maintenance: 'pre_paid_maintenance',
  seat_protection: 'seat_protection',
  financing: 'financing',
  pef: 'pef',
  pep: 'pep',
  other: 'other',
  pellicule: 'pellicule',
  windshield_treatment: 'windshield_treatment',
  paint_treatment: 'paint_treatment',
  roof_treatment: 'roof_treatment',
  leather_tissu_interior_treatment: 'leather_tissu_interior_treatment',
  maintenance_a: 'maintenance_a',
  maintenance_b: 'maintenance_b',
  maintenance_c: 'maintenance_c',
  maintenance_d: 'maintenance_d',
  maintenance_recommended: 'maintenance_recommended',
  diagnostic: 'diagnostic',
  air_filter: 'air_filter',
  pollen_filter: 'pollen_filter',
  alignment: 'alignment',
  brakes: 'brakes',
  injection: 'injection',
  transmission: 'transmission',
  wash: 'wash',
  tires: 'tires',
  parts: 'parts',
  body: 'body',
  oil_filter: 'oil_filter',
  others: 'others',
  niotext: 'niotext',
  walk_in: 'walk_in',
  sale_table: 'sale_table',
  in_turn: 'in_turn',
  renewal: 'renewal',
  event: 'event',
  service: 'service'
};

exports.Prisma.ActivixUserScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  created_at: 'created_at',
  updated_at: 'updated_at',
  email: 'email',
  first_name: 'first_name',
  last_name: 'last_name'
};

exports.Prisma.ActivixVehicleScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  lead_id: 'lead_id',
  created_at: 'created_at',
  end_contract_date: 'end_contract_date',
  end_warranty_date: 'end_warranty_date',
  purchase_date: 'purchase_date',
  recorded_date: 'recorded_date',
  sold_date: 'sold_date',
  updated_at: 'updated_at',
  accessories: 'accessories',
  actual_value: 'actual_value',
  allowed_odometer: 'allowed_odometer',
  balance: 'balance',
  cash_down: 'cash_down',
  category: 'category',
  category_rv: 'category_rv',
  certified: 'certified',
  client_number: 'client_number',
  color_exterior: 'color_exterior',
  color_interior: 'color_interior',
  comment: 'comment',
  condition: 'condition',
  driving_wheels: 'driving_wheels',
  engine: 'engine',
  extended_warranty: 'extended_warranty',
  fuel: 'fuel',
  license_plate: 'license_plate',
  make: 'make',
  modality: 'modality',
  model: 'model',
  odometer: 'odometer',
  offer_number: 'offer_number',
  option: 'option',
  order_number: 'order_number',
  payment: 'payment',
  payment_frequency: 'payment_frequency',
  preparation: 'preparation',
  price: 'price',
  profit: 'profit',
  rate: 'rate',
  recall: 'recall',
  residual: 'residual',
  security_deposit: 'security_deposit',
  sleeping: 'sleeping',
  sold: 'sold',
  sold_by: 'sold_by',
  stock: 'stock',
  stock_state: 'stock_state',
  term: 'term',
  tire: 'tire',
  transmission: 'transmission',
  string: 'string',
  trim: 'trim',
  type: 'type',
  value: 'value',
  vin: 'vin',
  warranty: 'warranty',
  weight: 'weight',
  year: 'year',
  budget_max: 'budget_max',
  budget_min: 'budget_min',
  length_max: 'length_max',
  length_min: 'length_min',
  year_max: 'year_max',
  year_min: 'year_min',
  Attribute: 'Attribute',
  verified_by: 'verified_by'
};

exports.Prisma.ActivixTaskScalarFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  lead_id: 'lead_id',
  owner_id: 'owner_id',
  completed_at: 'completed_at',
  created_at: 'created_at',
  date: 'date',
  updated_at: 'updated_at',
  completed: 'completed',
  description: 'description',
  priority: 'priority',
  title: 'title',
  type: 'type'
};

exports.Prisma.CanamScalarFieldEnum = {
  id: 'id',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  freight: 'freight',
  commodity: 'commodity',
  pdi: 'pdi',
  msrp: 'msrp'
};

exports.Prisma.CanamsxsScalarFieldEnum = {
  id: 'id',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  freight: 'freight',
  commodity: 'commodity',
  pdi: 'pdi',
  msrp: 'msrp'
};

exports.Prisma.SkidooScalarFieldEnum = {
  id: 'id',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  freight: 'freight',
  commodity: 'commodity',
  pdi: 'pdi',
  msrp: 'msrp'
};

exports.Prisma.SwitchScalarFieldEnum = {
  id: 'id',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  freight: 'freight',
  commodity: 'commodity',
  pdi: 'pdi',
  msrp: 'msrp'
};

exports.Prisma.SeadooScalarFieldEnum = {
  id: 'id',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  freight: 'freight',
  commodity: 'commodity',
  pdi: 'pdi',
  msrp: 'msrp'
};

exports.Prisma.SpyderScalarFieldEnum = {
  id: 'id',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  freight: 'freight',
  commodity: 'commodity',
  pdi: 'pdi',
  msrp: 'msrp'
};

exports.Prisma.SuzukiScalarFieldEnum = {
  id: 'id',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  freight: 'freight',
  commodity: 'commodity',
  pdi: 'pdi',
  msrp: 'msrp'
};

exports.Prisma.ManitouScalarFieldEnum = {
  id: 'id',
  model: 'model',
  length: 'length',
  trailer: 'trailer',
  boatEngineAndTrailerFees: 'boatEngineAndTrailerFees',
  engineRigging: 'engineRigging',
  enginePreRigPrice: 'enginePreRigPrice',
  nmma: 'nmma',
  engineFreight: 'engineFreight',
  msrp: 'msrp'
};

exports.Prisma.BmwmotoScalarFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color',
  msrp: 'msrp',
  paintPrem: 'paintPrem',
  brand: 'brand'
};

exports.Prisma.TriumphScalarFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color',
  msrp: 'msrp',
  paintPrem: 'paintPrem',
  brand: 'brand'
};

exports.Prisma.KawasakiScalarFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color',
  msrp: 'msrp',
  paintPrem: 'paintPrem',
  brand: 'brand'
};

exports.Prisma.HarleyScalarFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color',
  msrp: 'msrp'
};

exports.Prisma.Harley24ScalarFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color',
  msrp: 'msrp'
};

exports.Prisma.YamahaScalarFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color',
  msrp: 'msrp'
};

exports.Prisma.KtmScalarFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color',
  msrp: 'msrp'
};

exports.Prisma.IndianScalarFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color',
  msrp: 'msrp'
};

exports.Prisma.My24canamScalarFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color',
  msrp: 'msrp',
  url: 'url',
  spec: 'spec',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  username: 'username',
  email: 'email',
  phone: 'phone',
  lastSubscriptionCheck: 'lastSubscriptionCheck',
  refreshToken: 'refreshToken',
  expires_in: 'expires_in',
  omvicNumber: 'omvicNumber',
  idToken: 'idToken',
  position: 'position',
  roleId: 'roleId',
  profileId: 'profileId',
  customerId: 'customerId',
  subscriptionId: 'subscriptionId',
  activixActivated: 'activixActivated',
  activixEmail: 'activixEmail',
  activisUserId: 'activisUserId'
};

exports.Prisma.microsoftAccountOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  microId: 'microId',
  name: 'name',
  givenName: 'givenName',
  familyName: 'familyName',
  identityProvider: 'identityProvider'
};

exports.Prisma.microCacheOrderByRelevanceFieldEnum = {
  id: 'id',
  userEmail: 'userEmail',
  accessToken: 'accessToken',
  accessTokenExpiry: 'accessTokenExpiry',
  refreshToken: 'refreshToken'
};

exports.Prisma.userIntergrationOrderByRelevanceFieldEnum = {
  id: 'id',
  userEmail: 'userEmail',
  activixId: 'activixId',
  activixActivated: 'activixActivated',
  dealerAccountId: 'dealerAccountId',
  activixEmail: 'activixEmail'
};

exports.Prisma.DealerCustomerOrderByRelevanceFieldEnum = {
  id: 'id',
  dealerName: 'dealerName',
  dealerPhone: 'dealerPhone',
  dealerAddress: 'dealerAddress',
  dealerCity: 'dealerCity',
  dealerProvince: 'dealerProvince',
  dealerPostal: 'dealerPostal',
  dealerEmail: 'dealerEmail',
  planetScale: 'planetScale',
  vercel: 'vercel',
  github: 'github'
};

exports.Prisma.DealerFeesOrderByRelevanceFieldEnum = {
  id: 'id',
  dealer: 'dealer',
  dealerAddress: 'dealerAddress',
  dealerProv: 'dealerProv',
  dealerPhone: 'dealerPhone',
  omvicNumber: 'omvicNumber',
  userTireandRim: 'userTireandRim',
  userExtWarr: 'userExtWarr',
  userFinance: 'userFinance',
  userDemo: 'userDemo',
  userGasOnDel: 'userGasOnDel',
  userOMVIC: 'userOMVIC',
  userTax: 'userTax',
  userAirTax: 'userAirTax',
  userTireTax: 'userTireTax',
  userGovern: 'userGovern',
  userPDI: 'userPDI',
  userLabour: 'userLabour',
  userMarketAdj: 'userMarketAdj',
  userCommodity: 'userCommodity',
  userFreight: 'userFreight',
  userAdmin: 'userAdmin',
  userEmail: 'userEmail'
};

exports.Prisma.DealerInfoOrderByRelevanceFieldEnum = {
  dealerName: 'dealerName',
  dealerAddress: 'dealerAddress',
  dealerCity: 'dealerCity',
  dealerProv: 'dealerProv',
  dealerPostal: 'dealerPostal',
  dealerPhone: 'dealerPhone'
};

exports.Prisma.DealerFeesAdminOrderByRelevanceFieldEnum = {
  dealer: 'dealer',
  dealerAddress: 'dealerAddress',
  dealerProv: 'dealerProv',
  dealerPhone: 'dealerPhone',
  omvicNumber: 'omvicNumber',
  userTireandRim: 'userTireandRim',
  userExtWarr: 'userExtWarr',
  userFinance: 'userFinance',
  userDemo: 'userDemo',
  userGasOnDel: 'userGasOnDel',
  userOMVIC: 'userOMVIC',
  userTax: 'userTax',
  userAirTax: 'userAirTax',
  userTireTax: 'userTireTax',
  userGovern: 'userGovern',
  userPDI: 'userPDI',
  userLabour: 'userLabour',
  userMarketAdj: 'userMarketAdj',
  userCommodity: 'userCommodity',
  userFreight: 'userFreight',
  userAdmin: 'userAdmin'
};

exports.Prisma.DailyPDFOrderByRelevanceFieldEnum = {
  id: 'id',
  userEmail: 'userEmail',
  todaysGoalGuest: 'todaysGoalGuest',
  todaysActualGuest: 'todaysActualGuest',
  differenceGuest: 'differenceGuest',
  monthsGoalGuest: 'monthsGoalGuest',
  todaysGoalTestDrives: 'todaysGoalTestDrives',
  todaysActualTestDrives: 'todaysActualTestDrives',
  differenceTestDrives: 'differenceTestDrives',
  monthsGoalTestDrives: 'monthsGoalTestDrives',
  todaysGoalWriteUps: 'todaysGoalWriteUps',
  todaysActualWriteUps: 'todaysActualWriteUps',
  differenceWriteUps: 'differenceWriteUps',
  monthsGoalWriteUps: 'monthsGoalWriteUps',
  todaysGoalDeliveries: 'todaysGoalDeliveries',
  todaysActualDeliveries: 'todaysActualDeliveries',
  differenceDeliveries: 'differenceDeliveries',
  monthsGoalDeliveries: 'monthsGoalDeliveries'
};

exports.Prisma.UserPasswordOrderByRelevanceFieldEnum = {
  id: 'id',
  hash: 'hash',
  userId: 'userId'
};

exports.Prisma.UserRoleOrderByRelevanceFieldEnum = {
  id: 'id',
  symbol: 'symbol',
  name: 'name',
  description: 'description'
};

exports.Prisma.UserProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  headline: 'headline',
  bio: 'bio',
  userId: 'userId'
};

exports.Prisma.UserAvatarImageOrderByRelevanceFieldEnum = {
  id: 'id',
  url: 'url',
  filePath: 'filePath',
  profileId: 'profileId'
};

exports.Prisma.UserCoverImageOrderByRelevanceFieldEnum = {
  id: 'id',
  url: 'url',
  filePath: 'filePath',
  profileId: 'profileId'
};

exports.Prisma.NotificationsUserOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  read: 'read',
  userId: 'userId',
  dimiss: 'dimiss',
  type: 'type',
  financeId: 'financeId',
  clientfileId: 'clientfileId',
  to: 'to',
  from: 'from'
};

exports.Prisma.UserNotificationOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  read: 'read',
  userId: 'userId',
  type: 'type',
  financeId: 'financeId',
  clientfileId: 'clientfileId'
};

exports.Prisma.StaffChatOrderByRelevanceFieldEnum = {
  id: 'id',
  message: 'message',
  sender: 'sender',
  senderName: 'senderName',
  to: 'to',
  toName: 'toName',
  room: 'room',
  token: 'token'
};

exports.Prisma.NoteOrderByRelevanceFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  description: 'description',
  content: 'content',
  userId: 'userId'
};

exports.Prisma.NoteImageOrderByRelevanceFieldEnum = {
  id: 'id',
  url: 'url',
  filePath: 'filePath',
  userId: 'userId',
  noteId: 'noteId'
};

exports.Prisma.SalesOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  email: 'email',
  date: 'date'
};

exports.Prisma.AddressOrderByRelevanceFieldEnum = {
  id: 'id',
  label: 'label',
  addressComplete: 'addressComplete',
  addressGoogleMapsURL: 'addressGoogleMapsURL',
  street: 'street',
  streetDetails: 'streetDetails',
  subDistrict: 'subDistrict',
  district: 'district',
  city: 'city',
  province: 'province',
  postalCode: 'postalCode',
  countryCode: 'countryCode',
  countryId: 'countryId',
  provinceId: 'provinceId',
  cityId: 'cityId',
  districtId: 'districtId',
  subDistrictId: 'subDistrictId'
};

exports.Prisma.AutomationOrderByRelevanceFieldEnum = {
  id: 'id',
  userEmail: 'userEmail',
  title: 'title',
  when: 'when',
  trigger: 'trigger',
  executionDate: 'executionDate',
  parameters: 'parameters',
  actions: 'actions',
  associate: 'associate',
  template: 'template',
  firstAssociate: 'firstAssociate',
  secAssociate: 'secAssociate',
  compeleted: 'compeleted',
  recurrence: 'recurrence',
  timeType: 'timeType',
  timeValue: 'timeValue',
  executeWhen: 'executeWhen',
  executionSchedule: 'executionSchedule'
};

exports.Prisma.InventoryMotorcycleOrderByRelevanceFieldEnum = {
  id: 'id',
  packageNumber: 'packageNumber',
  packagePrice: 'packagePrice',
  stockNumber: 'stockNumber',
  type: 'type',
  class: 'class',
  year: 'year',
  make: 'make',
  model: 'model',
  modelName: 'modelName',
  submodel: 'submodel',
  subSubmodel: 'subSubmodel',
  price: 'price',
  exteriorColor: 'exteriorColor',
  mileage: 'mileage',
  expectedOn: 'expectedOn',
  status: 'status',
  orderStatus: 'orderStatus',
  hdcFONumber: 'hdcFONumber',
  hdmcFONumber: 'hdmcFONumber',
  vin: 'vin',
  floorPlanDueDate: 'floorPlanDueDate',
  location: 'location',
  stockedDate: 'stockedDate',
  actualCost: 'actualCost',
  mfgSerialNumber: 'mfgSerialNumber',
  engineNumber: 'engineNumber',
  plates: 'plates',
  keyNumber: 'keyNumber',
  length: 'length',
  width: 'width',
  engine: 'engine',
  fuelType: 'fuelType',
  power: 'power',
  chassisNumber: 'chassisNumber',
  chassisYear: 'chassisYear',
  chassisMake: 'chassisMake',
  chassisModel: 'chassisModel',
  chassisType: 'chassisType',
  registrationState: 'registrationState',
  registrationExpiry: 'registrationExpiry',
  grossWeight: 'grossWeight',
  netWeight: 'netWeight',
  insuranceCompany: 'insuranceCompany',
  policyNumber: 'policyNumber',
  insuranceAgent: 'insuranceAgent',
  insuranceStartDate: 'insuranceStartDate',
  insuranceEndDate: 'insuranceEndDate',
  sold: 'sold'
};

exports.Prisma.ImageOrderByRelevanceFieldEnum = {
  id: 'id',
  url: 'url',
  filePath: 'filePath',
  userId: 'userId'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.GetConversationOrderByRelevanceFieldEnum = {
  userEmail: 'userEmail'
};

exports.Prisma.ScriptOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  content: 'content',
  category: 'category',
  subCat: 'subCat'
};

exports.Prisma.EmailTemplatesOrderByRelevanceFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  name: 'name',
  body: 'body',
  userEmail: 'userEmail',
  category: 'category',
  type: 'type',
  subject: 'subject',
  title: 'title',
  cc: 'cc',
  bcc: 'bcc',
  attributes: 'attributes',
  dept: 'dept',
  label: 'label',
  attachments: 'attachments',
  to: 'to',
  review: 'review',
  date: 'date',
  fromEmail: 'fromEmail'
};

exports.Prisma.EmailClientOrderByRelevanceFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  name: 'name',
  body: 'body',
  userEmail: 'userEmail',
  category: 'category',
  type: 'type',
  subject: 'subject',
  cc: 'cc',
  bcc: 'bcc',
  attributes: 'attributes',
  dept: 'dept',
  label: 'label',
  attachments: 'attachments',
  to: 'to',
  review: 'review',
  date: 'date',
  fromEmail: 'fromEmail'
};

exports.Prisma.UCDAFormOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  seenOwnership: 'seenOwnership',
  originalOwner: 'originalOwner',
  vinChecked: 'vinChecked',
  orignialVinPlate: 'orignialVinPlate',
  registeredLien: 'registeredLien',
  totalLoss: 'totalLoss',
  theftRecovery: 'theftRecovery',
  manuWarrCancelled: 'manuWarrCancelled',
  outOfProv: 'outOfProv',
  usVehicle: 'usVehicle',
  dailyRental: 'dailyRental',
  fireDmg: 'fireDmg',
  waterDmg: 'waterDmg',
  policeCruiser: 'policeCruiser',
  paintedBodyPanels: 'paintedBodyPanels',
  absInoperable: 'absInoperable',
  polutionInoperable: 'polutionInoperable',
  repairsTransmission: 'repairsTransmission',
  repairsSuspSubframe: 'repairsSuspSubframe',
  repairsFuelSystem: 'repairsFuelSystem',
  repairsPowerTrain: 'repairsPowerTrain',
  repairsECU: 'repairsECU',
  repairsElectrical: 'repairsElectrical',
  repairsStructuralFrameDamage: 'repairsStructuralFrameDamage',
  alteredOrRepaired: 'alteredOrRepaired',
  decalsBadges: 'decalsBadges',
  dmgExcess3000: 'dmgExcess3000'
};

exports.Prisma.SaveMyDocOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  docName: 'docName',
  dept: 'dept',
  fileName: 'fileName',
  category: 'category'
};

exports.Prisma.UploadDocsOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  category: 'category',
  fileName: 'fileName',
  userId: 'userId'
};

exports.Prisma.TwilioSMSDetailsOrderByRelevanceFieldEnum = {
  id: 'id',
  conversationSid: 'conversationSid',
  participantSid: 'participantSid',
  userSid: 'userSid',
  username: 'username',
  userEmail: 'userEmail',
  passClient: 'passClient',
  myPhone: 'myPhone',
  proxyPhone: 'proxyPhone'
};

exports.Prisma.FinanceStorageOrderByRelevanceFieldEnum = {
  id: 'id',
  url: 'url',
  filePath: 'filePath',
  financeId: 'financeId'
};

exports.Prisma.FinanceNoteOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  slug: 'slug',
  customContent: 'customContent',
  urgentFinanceNote: 'urgentFinanceNote',
  author: 'author',
  customerId: 'customerId',
  dept: 'dept'
};

exports.Prisma.ClientAptsOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  title: 'title',
  start: 'start',
  end: 'end',
  contactMethod: 'contactMethod',
  completed: 'completed',
  apptStatus: 'apptStatus',
  apptType: 'apptType',
  note: 'note',
  unit: 'unit',
  brand: 'brand',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  userId: 'userId',
  description: 'description',
  userName: 'userName',
  attachments: 'attachments',
  direction: 'direction',
  resultOfcall: 'resultOfcall',
  activixId: 'activixId',
  activixNoteId: 'activixNoteId'
};

exports.Prisma.CommunicationsOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId'
};

exports.Prisma.CheckLatestEmailOrderByRelevanceFieldEnum = {
  userEmail: 'userEmail',
  emailId: 'emailId',
  lastEmailSent: 'lastEmailSent',
  subject: 'subject',
  sender: 'sender',
  isRead: 'isRead'
};

exports.Prisma.CommunicationsOverviewOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  userId: 'userId',
  title: 'title',
  content: 'content',
  date: 'date',
  userName: 'userName',
  type: 'type',
  lead_id: 'lead_id',
  direction: 'direction',
  subject: 'subject',
  result: 'result',
  method: 'method',
  userEmail: 'userEmail'
};

exports.Prisma.WishListOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  brand: 'brand',
  model: 'model',
  brand2: 'brand2',
  model2: 'model2',
  wishListNotes: 'wishListNotes',
  notified: 'notified'
};

exports.Prisma.PartOrderByRelevanceFieldEnum = {
  id: 'id',
  brand: 'brand',
  name: 'name',
  description: 'description',
  category: 'category',
  subCategory: 'subCategory'
};

exports.Prisma.PartsOrderOrderByRelevanceFieldEnum = {
  userId: 'userId',
  clientfileId: 'clientfileId',
  partNumber: 'partNumber'
};

exports.Prisma.PartsOrderDetailOrderByRelevanceFieldEnum = {
  partNumber: 'partNumber'
};

exports.Prisma.ClientfileOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  postal: 'postal',
  province: 'province',
  dl: 'dl',
  typeOfContact: 'typeOfContact',
  timeToContact: 'timeToContact',
  conversationId: 'conversationId'
};

exports.Prisma.ServiceOrderByRelevanceFieldEnum = {
  id: 'id'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  data: 'data',
  email: 'email',
  refreshToken: 'refreshToken',
  accessToken: 'accessToken',
  name: 'name',
  clientId: 'clientId',
  clientSecret: 'clientSecret'
};

exports.Prisma.LockFinanceTerminalsOrderByRelevanceFieldEnum = {
  financeId: 'financeId'
};

exports.Prisma.FinanceOrderByRelevanceFieldEnum = {
  id: 'id',
  clientfileId: 'clientfileId',
  dashboardId: 'dashboardId',
  financeId: 'financeId',
  activixId: 'activixId',
  theRealActId: 'theRealActId',
  financeManager: 'financeManager',
  email: 'email',
  firstName: 'firstName',
  mileage: 'mileage',
  lastName: 'lastName',
  phone: 'phone',
  name: 'name',
  address: 'address',
  city: 'city',
  postal: 'postal',
  province: 'province',
  dl: 'dl',
  typeOfContact: 'typeOfContact',
  timeToContact: 'timeToContact',
  iRate: 'iRate',
  months: 'months',
  discount: 'discount',
  total: 'total',
  onTax: 'onTax',
  on60: 'on60',
  biweekly: 'biweekly',
  weekly: 'weekly',
  weeklyOth: 'weeklyOth',
  biweekOth: 'biweekOth',
  oth60: 'oth60',
  weeklyqc: 'weeklyqc',
  biweeklyqc: 'biweeklyqc',
  qc60: 'qc60',
  deposit: 'deposit',
  biweeklNatWOptions: 'biweeklNatWOptions',
  weeklylNatWOptions: 'weeklylNatWOptions',
  nat60WOptions: 'nat60WOptions',
  weeklyOthWOptions: 'weeklyOthWOptions',
  biweekOthWOptions: 'biweekOthWOptions',
  oth60WOptions: 'oth60WOptions',
  biweeklNat: 'biweeklNat',
  weeklylNat: 'weeklylNat',
  nat60: 'nat60',
  qcTax: 'qcTax',
  otherTax: 'otherTax',
  totalWithOptions: 'totalWithOptions',
  otherTaxWithOptions: 'otherTaxWithOptions',
  desiredPayments: 'desiredPayments',
  freight: 'freight',
  admin: 'admin',
  commodity: 'commodity',
  pdi: 'pdi',
  discountPer: 'discountPer',
  userTireandRim: 'userTireandRim',
  userExtWarr: 'userExtWarr',
  paintPrem: 'paintPrem',
  licensing: 'licensing',
  stockNum: 'stockNum',
  options: 'options',
  labour: 'labour',
  year: 'year',
  brand: 'brand',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  msrp: 'msrp',
  userEmail: 'userEmail',
  tradeValue: 'tradeValue',
  tradeDesc: 'tradeDesc',
  tradeColor: 'tradeColor',
  tradeYear: 'tradeYear',
  tradeMake: 'tradeMake',
  tradeVin: 'tradeVin',
  tradeTrim: 'tradeTrim',
  tradeMileage: 'tradeMileage',
  trim: 'trim',
  vin: 'vin',
  leadNote: 'leadNote',
  sendToFinanceNow: 'sendToFinanceNow',
  dealNumber: 'dealNumber',
  bikeStatus: 'bikeStatus',
  lien: 'lien',
  dob: 'dob'
};

exports.Prisma.Finance2OrderByRelevanceFieldEnum = {
  id: 'id',
  finance: 'finance',
  leadOrigin: 'leadOrigin',
  optionsTotal: 'optionsTotal',
  lienPyout: 'lienPyout',
  lienReg: 'lienReg'
};

exports.Prisma.DashboardOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  clientfileId: 'clientfileId',
  userEmail: 'userEmail',
  referral: 'referral',
  visited: 'visited',
  bookedApt: 'bookedApt',
  aptShowed: 'aptShowed',
  aptNoShowed: 'aptNoShowed',
  testDrive: 'testDrive',
  metService: 'metService',
  metManager: 'metManager',
  metParts: 'metParts',
  sold: 'sold',
  depositMade: 'depositMade',
  refund: 'refund',
  turnOver: 'turnOver',
  financeApp: 'financeApp',
  approved: 'approved',
  signed: 'signed',
  pickUpSet: 'pickUpSet',
  demoed: 'demoed',
  delivered: 'delivered',
  lastContact: 'lastContact',
  status: 'status',
  customerState: 'customerState',
  result: 'result',
  timesContacted: 'timesContacted',
  nextAppointment: 'nextAppointment',
  followUpDay: 'followUpDay',
  deliveredDate: 'deliveredDate',
  notes: 'notes',
  visits: 'visits',
  progress: 'progress',
  metSalesperson: 'metSalesperson',
  metFinance: 'metFinance',
  financeApplication: 'financeApplication',
  pickUpDate: 'pickUpDate',
  pickUpTime: 'pickUpTime',
  depositTakenDate: 'depositTakenDate',
  docsSigned: 'docsSigned',
  tradeRepairs: 'tradeRepairs',
  seenTrade: 'seenTrade',
  lastNote: 'lastNote',
  applicationDone: 'applicationDone',
  licensingSent: 'licensingSent',
  liceningDone: 'liceningDone',
  refunded: 'refunded',
  cancelled: 'cancelled',
  lost: 'lost',
  dLCopy: 'dLCopy',
  insCopy: 'insCopy',
  testDrForm: 'testDrForm',
  voidChq: 'voidChq',
  loanOther: 'loanOther',
  signBill: 'signBill',
  ucda: 'ucda',
  tradeInsp: 'tradeInsp',
  customerWS: 'customerWS',
  otherDocs: 'otherDocs',
  deposit: 'deposit',
  urgentFinanceNote: 'urgentFinanceNote',
  funded: 'funded',
  leadSource: 'leadSource'
};

exports.Prisma.FinManOptionsOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  email: 'email',
  BEandTR: 'BEandTR',
  intColor1: 'intColor1',
  licensingMan: 'licensingMan',
  licensingManTr: 'licensingManTr',
  dts: 'dts',
  verado: 'verado',
  motor: 'motor',
  sigPkgCruise: 'sigPkgCruise',
  biminiCr: 'biminiCr',
  wallCol: 'wallCol',
  wallColCr: 'wallColCr',
  colorCruise: 'colorCruise',
  furnitureColor: 'furnitureColor',
  sigPkgExplore: 'sigPkgExplore',
  selPkgExplore: 'selPkgExplore',
  tubesExplore: 'tubesExplore',
  colorExplore: 'colorExplore',
  wallColorExplore: 'wallColorExplore',
  sigPkgLX: 'sigPkgLX',
  selRFXPkgLX: 'selRFXPkgLX',
  selRFXWPkgLX: 'selRFXWPkgLX',
  blkPkg: 'blkPkg',
  blkPkgLX: 'blkPkgLX',
  wallGraphic: 'wallGraphic',
  colMatchedFiberLX: 'colMatchedFiberLX',
  powderCoatingLX: 'powderCoatingLX',
  blackAnoLX: 'blackAnoLX',
  premiumJLLX: 'premiumJLLX',
  JLTowerLX: 'JLTowerLX',
  wallColorLX: 'wallColorLX',
  wallGraphicLX: 'wallGraphicLX',
  wallGraphicAccentLX: 'wallGraphicAccentLX',
  fibreGlassPodsLX: 'fibreGlassPodsLX',
  powderCoatLX: 'powderCoatLX',
  signature: 'signature',
  select: 'select',
  tubeColor: 'tubeColor',
  furnitureLX: 'furnitureLX',
  flooringLX: 'flooringLX',
  blackoutPkgXT: 'blackoutPkgXT',
  signaturePkgXT: 'signaturePkgXT',
  premAudioPkg: 'premAudioPkg',
  XTPremiumcolor: 'XTPremiumcolor',
  JLPremiumxt: 'JLPremiumxt',
  JlPremiumAudio: 'JlPremiumAudio',
  fibreglassFrontXT: 'fibreglassFrontXT',
  WallGraphicXT: 'WallGraphicXT',
  powderCoatXT: 'powderCoatXT',
  furnitureXT: 'furnitureXT',
  battery: 'battery',
  propeller: 'propeller',
  gps: 'gps',
  saltwaterPkg: 'saltwaterPkg',
  baseInst: 'baseInst',
  cupHolder: 'cupHolder',
  multiHolder: 'multiHolder',
  cooler13: 'cooler13',
  coolerExtension: 'coolerExtension',
  coolerBag14: 'coolerBag14',
  singleHolder: 'singleHolder',
  stemwareHolder: 'stemwareHolder',
  cargoBox10: 'cargoBox10',
  cargoBox20: 'cargoBox20',
  cargoBox30: 'cargoBox30',
  rodHolder: 'rodHolder',
  batteryCharger: 'batteryCharger',
  bowFillerBench: 'bowFillerBench',
  portAquaLounger: 'portAquaLounger',
  skiTowMirror: 'skiTowMirror'
};

exports.Prisma.FinCanOptionsOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  baseInst: 'baseInst',
  cupHolder: 'cupHolder',
  multiHolder: 'multiHolder',
  cooler13: 'cooler13',
  stemwareHolder: 'stemwareHolder',
  coolerExtension: 'coolerExtension',
  coolerBag14: 'coolerBag14',
  singleHolder: 'singleHolder',
  cargoBox10: 'cargoBox10',
  cargoBox20: 'cargoBox20',
  cargoBox30: 'cargoBox30',
  rodHolder: 'rodHolder',
  batteryCharger: 'batteryCharger',
  bowFillerBench: 'bowFillerBench',
  skiTowMirror: 'skiTowMirror',
  portAquaLounger: 'portAquaLounger',
  Essentialkg: 'Essentialkg',
  ComfortPkg: 'ComfortPkg',
  watersports: 'watersports',
  familyBundle: 'familyBundle',
  BatterySwitch: 'BatterySwitch',
  familyBundleSW: 'familyBundleSW',
  watersportsSW: 'watersportsSW',
  EssentialpkgSW: 'EssentialpkgSW',
  ComfortPkgSW: 'ComfortPkgSW',
  BRPAudio: 'BRPAudio',
  UltimateAudio: 'UltimateAudio',
  BRPAudioL: 'BRPAudioL',
  SunshadeSW: 'SunshadeSW',
  ThermalInsert: 'ThermalInsert',
  CargoTile: 'CargoTile',
  VerticalSupport: 'VerticalSupport',
  BRPAudioRl0: 'BRPAudioRl0',
  familyBundlesSP: 'familyBundlesSP',
  watersportsSP: 'watersportsSP',
  ComfortPkgSP: 'ComfortPkgSP',
  familyBundleCR: 'familyBundleCR',
  ComfortPkgCR: 'ComfortPkgCR',
  HeatedGrips: 'HeatedGrips',
  TrailerLock: 'TrailerLock'
};

exports.Prisma.BmwMotoOptionsOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  m1000rMPkg: 'm1000rMPkg',
  m1000rTitEx: 'm1000rTitEx',
  desOption: 'desOption',
  m1000rrMPkg: 'm1000rrMPkg',
  s1000rrRacePkg: 's1000rrRacePkg',
  s1000rrRacePkg2: 's1000rrRacePkg2',
  f7gsConn: 'f7gsConn',
  f8gsDblSeat: 'f8gsDblSeat',
  r12rtAudioSystem: 'r12rtAudioSystem',
  f9xrHandProtectors: 'f9xrHandProtectors',
  r12gsCrossGld: 'r12gsCrossGld',
  r12gsSpSusp: 'r12gsSpSusp',
  r12gsProtBar: 'r12gsProtBar',
  r12gsCrossBlk: 'r12gsCrossBlk',
  audioSystem: 'audioSystem',
  highShield: 'highShield',
  psgrKit: 'psgrKit',
  alarm: 'alarm',
  color: 'color',
  chain: 'chain',
  comfortPkg: 'comfortPkg',
  touringPkg: 'touringPkg',
  activePkg: 'activePkg',
  dynamicPkg: 'dynamicPkg',
  offTire: 'offTire',
  keyless: 'keyless',
  headlightPro: 'headlightPro',
  shiftAssPro: 'shiftAssPro',
  tpc: 'tpc',
  cruise: 'cruise',
  windshield: 'windshield',
  handleBar: 'handleBar',
  extraHighSeat: 'extraHighSeat',
  alumTank1: 'alumTank1',
  alumTank2: 'alumTank2',
  classicW: 'classicW',
  silencer: 'silencer',
  chromedExhaust: 'chromedExhaust',
  crossW: 'crossW',
  highSeat: 'highSeat',
  lowKitLowSeat: 'lowKitLowSeat',
  lowSeat: 'lowSeat',
  passengerKitLowSeat: 'passengerKitLowSeat',
  comfortPsgrSeat: 'comfortPsgrSeat',
  mPsgrSeat: 'mPsgrSeat'
};

exports.Prisma.BmwMotoOptions2OrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  comfortSeat: 'comfortSeat',
  designW: 'designW',
  loweringKit: 'loweringKit',
  forgedWheels: 'forgedWheels',
  carbonWheels: 'carbonWheels',
  centerStand: 'centerStand',
  billetPack1: 'billetPack1',
  billetPack2: 'billetPack2',
  heatedSeat: 'heatedSeat',
  lugRack: 'lugRack',
  lugRackBrackets: 'lugRackBrackets',
  chargeSocket: 'chargeSocket',
  auxLights: 'auxLights',
  mLightBat: 'mLightBat',
  carbonPkg: 'carbonPkg',
  enduroPkg: 'enduroPkg',
  sportShield: 'sportShield',
  sportWheels: 'sportWheels',
  sportSeat: 'sportSeat',
  brownBench: 'brownBench',
  brownSeat: 'brownSeat',
  handleRisers: 'handleRisers',
  lgihtsPkg: 'lgihtsPkg',
  fogLights: 'fogLights',
  pilSeatCover: 'pilSeatCover',
  lapTimer: 'lapTimer',
  floorLight: 'floorLight',
  blackBench: 'blackBench',
  hillStart: 'hillStart',
  floorboards: 'floorboards',
  reverse: 'reverse',
  forkTubeTrim: 'forkTubeTrim',
  spokedW: 'spokedW',
  lockGasCap: 'lockGasCap',
  aeroWheel: 'aeroWheel',
  psgrBench719: 'psgrBench719',
  blackS719: 'blackS719',
  aero719: 'aero719',
  pinstripe: 'pinstripe',
  designPkgBL: 'designPkgBL',
  benchseatlow: 'benchseatlow',
  iconWheel: 'iconWheel',
  centreStand: 'centreStand',
  tubeHandle: 'tubeHandle',
  classicWheels: 'classicWheels',
  blackContrastwheel: 'blackContrastwheel',
  silverContastWheel: 'silverContastWheel',
  silverWheel: 'silverWheel',
  activeCruise: 'activeCruise',
  blackPowertrain: 'blackPowertrain',
  blackWheel: 'blackWheel',
  aeroPkg719: 'aeroPkg719'
};

exports.Prisma.ActivixLeadOrderByRelevanceFieldEnum = {
  id: 'id',
  activixId: 'activixId',
  account_id: 'account_id',
  customer_id: 'customer_id',
  source_id: 'source_id',
  phoneId: 'phoneId',
  vehicleIdWanted: 'vehicleIdWanted',
  vehicleIdWTrade: 'vehicleIdWTrade',
  emailId: 'emailId',
  Integer: 'Integer',
  provider_id: 'provider_id',
  appointment_date: 'appointment_date',
  phone_appointment_date: 'phone_appointment_date',
  available_date: 'available_date',
  be_back_date: 'be_back_date',
  birth_date: 'birth_date',
  call_date: 'call_date',
  created_at: 'created_at',
  csi_date: 'csi_date',
  delivered_date: 'delivered_date',
  deliverable_date: 'deliverable_date',
  delivery_date: 'delivery_date',
  home_presented_date: 'home_presented_date',
  paperwork_date: 'paperwork_date',
  presented_date: 'presented_date',
  promised_date: 'promised_date',
  financed_date: 'financed_date',
  road_test_date: 'road_test_date',
  home_road_test_date: 'home_road_test_date',
  sale_date: 'sale_date',
  take_over_date: 'take_over_date',
  unsubscribe_all_date: 'unsubscribe_all_date',
  unsubscribe_call_date: 'unsubscribe_call_date',
  unsubscribe_email_date: 'unsubscribe_email_date',
  unsubscribe_sms_date: 'unsubscribe_sms_date',
  updated_at: 'updated_at',
  address_line1: 'address_line1',
  address_line2: 'address_line2',
  business: 'business',
  business_name: 'business_name',
  campaign: 'campaign',
  city: 'city',
  civility: 'civility',
  country: 'country',
  created_method: 'created_method',
  credit_approved: 'credit_approved',
  dealer_tour: 'dealer_tour',
  division: 'division',
  financial_institution: 'financial_institution',
  first_name: 'first_name',
  form: 'form',
  funded: 'funded',
  gender: 'gender',
  inspected: 'inspected',
  keyword: 'keyword',
  last_name: 'last_name',
  locale: 'locale',
  navigation_history: 'navigation_history',
  postal_code: 'postal_code',
  progress_state: 'progress_state',
  provider: 'provider',
  province: 'province',
  qualification: 'qualification',
  rating: 'rating',
  referrer: 'referrer',
  result: 'result',
  search_term: 'search_term',
  second_contact: 'second_contact',
  second_contact_civility: 'second_contact_civility',
  segment: 'segment',
  source: 'source',
  status: 'status',
  type: 'type',
  walk_around: 'walk_around',
  comment: 'comment',
  advisor: 'advisor',
  delivered_by: 'delivered_by',
  emails: 'emails',
  emails2: 'emails2',
  phones: 'phones',
  phones2: 'phones2',
  phones3: 'phones3',
  financeId: 'financeId',
  dashboardId: 'dashboardId',
  userEmail: 'userEmail',
  promised_datere: 'promised_datere'
};

exports.Prisma.activixCommunicationOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  lead_id: 'lead_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  executed_at: 'executed_at',
  method: 'method',
  type: 'type',
  description: 'description',
  call_duration: 'call_duration',
  call_phone: 'call_phone',
  call_status: 'call_status',
  email_subject: 'email_subject',
  email_body: 'email_body',
  email_user: 'email_user',
  url: 'url',
  answered: 'answered',
  attempted: 'attempted',
  error: 'error',
  interrupted: 'interrupted',
  pending: 'pending',
  unanswered: 'unanswered'
};

exports.Prisma.activixEmailOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  lead_id: 'lead_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  address: 'address',
  type: 'type',
  string: 'string',
  valid: 'valid'
};

exports.Prisma.activixEventOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  lead_id: 'lead_id',
  owner_id: 'owner_id',
  completed_at: 'completed_at',
  created_at: 'created_at',
  end_at: 'end_at',
  start_at: 'start_at',
  updated_at: 'updated_at',
  canceled: 'canceled',
  completed: 'completed',
  confirmed: 'confirmed',
  description: 'description',
  no_show: 'no_show',
  priority: 'priority',
  title: 'title',
  Attribute: 'Attribute',
  lead: 'lead',
  owner: 'owner'
};

exports.Prisma.activixNotesOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  parent_id: 'parent_id',
  lead_id: 'lead_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  content: 'content',
  file_url: 'file_url'
};

exports.Prisma.activixPhonesOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  lead_id: 'lead_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  extension: 'extension',
  number: 'number',
  type: 'type',
  valid: 'valid'
};

exports.Prisma.activixProductsOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  created_at: 'created_at',
  updated_at: 'updated_at',
  category: 'category',
  minutes: 'minutes',
  notes: 'notes',
  premium: 'premium',
  price: 'price',
  sold: 'sold',
  boolean: 'boolean',
  name: 'name',
  type: 'type',
  label: 'label',
  ins_filling: 'ins_filling',
  ins_rental: 'ins_rental',
  ins_invalidity: 'ins_invalidity',
  ins_health: 'ins_health',
  ins_life: 'ins_life',
  extended_warranty: 'extended_warranty',
  rustproofing: 'rustproofing',
  chiselling: 'chiselling',
  anti_theft: 'anti_theft',
  starter: 'starter',
  window_tint: 'window_tint',
  pre_paid_maintenance: 'pre_paid_maintenance',
  seat_protection: 'seat_protection',
  financing: 'financing',
  pef: 'pef',
  pep: 'pep',
  other: 'other',
  pellicule: 'pellicule',
  windshield_treatment: 'windshield_treatment',
  paint_treatment: 'paint_treatment',
  roof_treatment: 'roof_treatment',
  leather_tissu_interior_treatment: 'leather_tissu_interior_treatment',
  maintenance_a: 'maintenance_a',
  maintenance_b: 'maintenance_b',
  maintenance_c: 'maintenance_c',
  maintenance_d: 'maintenance_d',
  maintenance_recommended: 'maintenance_recommended',
  diagnostic: 'diagnostic',
  air_filter: 'air_filter',
  pollen_filter: 'pollen_filter',
  alignment: 'alignment',
  brakes: 'brakes',
  injection: 'injection',
  transmission: 'transmission',
  wash: 'wash',
  tires: 'tires',
  parts: 'parts',
  body: 'body',
  oil_filter: 'oil_filter',
  others: 'others',
  niotext: 'niotext',
  walk_in: 'walk_in',
  sale_table: 'sale_table',
  in_turn: 'in_turn',
  renewal: 'renewal',
  event: 'event',
  service: 'service'
};

exports.Prisma.activixUserOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  created_at: 'created_at',
  updated_at: 'updated_at',
  email: 'email',
  first_name: 'first_name',
  last_name: 'last_name'
};

exports.Prisma.activixVehicleOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  lead_id: 'lead_id',
  created_at: 'created_at',
  end_contract_date: 'end_contract_date',
  end_warranty_date: 'end_warranty_date',
  purchase_date: 'purchase_date',
  recorded_date: 'recorded_date',
  sold_date: 'sold_date',
  updated_at: 'updated_at',
  accessories: 'accessories',
  actual_value: 'actual_value',
  allowed_odometer: 'allowed_odometer',
  balance: 'balance',
  cash_down: 'cash_down',
  category: 'category',
  category_rv: 'category_rv',
  certified: 'certified',
  client_number: 'client_number',
  color_exterior: 'color_exterior',
  color_interior: 'color_interior',
  comment: 'comment',
  condition: 'condition',
  driving_wheels: 'driving_wheels',
  engine: 'engine',
  extended_warranty: 'extended_warranty',
  fuel: 'fuel',
  license_plate: 'license_plate',
  make: 'make',
  modality: 'modality',
  model: 'model',
  odometer: 'odometer',
  offer_number: 'offer_number',
  option: 'option',
  order_number: 'order_number',
  payment: 'payment',
  payment_frequency: 'payment_frequency',
  preparation: 'preparation',
  price: 'price',
  profit: 'profit',
  rate: 'rate',
  recall: 'recall',
  residual: 'residual',
  security_deposit: 'security_deposit',
  sleeping: 'sleeping',
  sold: 'sold',
  sold_by: 'sold_by',
  stock: 'stock',
  stock_state: 'stock_state',
  term: 'term',
  tire: 'tire',
  transmission: 'transmission',
  string: 'string',
  trim: 'trim',
  type: 'type',
  value: 'value',
  vin: 'vin',
  warranty: 'warranty',
  weight: 'weight',
  year: 'year',
  budget_max: 'budget_max',
  budget_min: 'budget_min',
  length_max: 'length_max',
  length_min: 'length_min',
  year_max: 'year_max',
  year_min: 'year_min',
  Attribute: 'Attribute',
  verified_by: 'verified_by'
};

exports.Prisma.activixTaskOrderByRelevanceFieldEnum = {
  id: 'id',
  financeId: 'financeId',
  lead_id: 'lead_id',
  owner_id: 'owner_id',
  completed_at: 'completed_at',
  created_at: 'created_at',
  date: 'date',
  updated_at: 'updated_at',
  completed: 'completed',
  description: 'description',
  priority: 'priority',
  title: 'title',
  type: 'type'
};

exports.Prisma.CanamOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  freight: 'freight',
  commodity: 'commodity',
  pdi: 'pdi',
  msrp: 'msrp'
};

exports.Prisma.CanamsxsOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  freight: 'freight',
  commodity: 'commodity',
  pdi: 'pdi',
  msrp: 'msrp'
};

exports.Prisma.SkidooOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  freight: 'freight',
  commodity: 'commodity',
  pdi: 'pdi',
  msrp: 'msrp'
};

exports.Prisma.SwitchOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  freight: 'freight',
  commodity: 'commodity',
  pdi: 'pdi',
  msrp: 'msrp'
};

exports.Prisma.SeadooOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  freight: 'freight',
  commodity: 'commodity',
  pdi: 'pdi',
  msrp: 'msrp'
};

exports.Prisma.SpyderOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  freight: 'freight',
  commodity: 'commodity',
  pdi: 'pdi',
  msrp: 'msrp'
};

exports.Prisma.SuzukiOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  model1: 'model1',
  color: 'color',
  modelCode: 'modelCode',
  freight: 'freight',
  commodity: 'commodity',
  pdi: 'pdi',
  msrp: 'msrp'
};

exports.Prisma.ManitouOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model'
};

exports.Prisma.BmwmotoOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color',
  brand: 'brand'
};

exports.Prisma.TriumphOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color',
  brand: 'brand'
};

exports.Prisma.KawasakiOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color',
  brand: 'brand'
};

exports.Prisma.HarleyOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color'
};

exports.Prisma.Harley24OrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color'
};

exports.Prisma.YamahaOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color'
};

exports.Prisma.KtmOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color'
};

exports.Prisma.IndianOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color'
};

exports.Prisma.my24canamOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  color: 'color',
  url: 'url',
  spec: 'spec'
};


exports.Prisma.ModelName = {
  User: 'User',
  microsoftAccount: 'microsoftAccount',
  microCache: 'microCache',
  userIntergration: 'userIntergration',
  DealerCustomer: 'DealerCustomer',
  DealerFees: 'DealerFees',
  DealerInfo: 'DealerInfo',
  DealerFeesAdmin: 'DealerFeesAdmin',
  DailyPDF: 'DailyPDF',
  UserPassword: 'UserPassword',
  UserRole: 'UserRole',
  UserProfile: 'UserProfile',
  UserAvatarImage: 'UserAvatarImage',
  UserCoverImage: 'UserCoverImage',
  NotificationsUser: 'NotificationsUser',
  UserNotification: 'UserNotification',
  StaffChat: 'StaffChat',
  Note: 'Note',
  NoteImage: 'NoteImage',
  Sales: 'Sales',
  Address: 'Address',
  Automation: 'Automation',
  InventoryMotorcycle: 'InventoryMotorcycle',
  Image: 'Image',
  GetConversation: 'GetConversation',
  Script: 'Script',
  EmailTemplates: 'EmailTemplates',
  EmailClient: 'EmailClient',
  UCDAForm: 'UCDAForm',
  SaveMyDoc: 'SaveMyDoc',
  UploadDocs: 'UploadDocs',
  TwilioSMSDetails: 'TwilioSMSDetails',
  FinanceStorage: 'FinanceStorage',
  FinanceNote: 'FinanceNote',
  ClientApts: 'ClientApts',
  Communications: 'Communications',
  CheckLatestEmail: 'CheckLatestEmail',
  CommunicationsOverview: 'CommunicationsOverview',
  WishList: 'WishList',
  Part: 'Part',
  PartsOrder: 'PartsOrder',
  PartsOrderDetail: 'PartsOrderDetail',
  Clientfile: 'Clientfile',
  Service: 'Service',
  Session: 'Session',
  LockFinanceTerminals: 'LockFinanceTerminals',
  Finance: 'Finance',
  Finance2: 'Finance2',
  Dashboard: 'Dashboard',
  FinManOptions: 'FinManOptions',
  FinCanOptions: 'FinCanOptions',
  BmwMotoOptions: 'BmwMotoOptions',
  BmwMotoOptions2: 'BmwMotoOptions2',
  ActivixLead: 'ActivixLead',
  activixCommunication: 'activixCommunication',
  activixEmail: 'activixEmail',
  activixEvent: 'activixEvent',
  activixNotes: 'activixNotes',
  activixPhones: 'activixPhones',
  activixProducts: 'activixProducts',
  activixUser: 'activixUser',
  activixVehicle: 'activixVehicle',
  activixTask: 'activixTask',
  Canam: 'Canam',
  Canamsxs: 'Canamsxs',
  Skidoo: 'Skidoo',
  Switch: 'Switch',
  Seadoo: 'Seadoo',
  Spyder: 'Spyder',
  Suzuki: 'Suzuki',
  Manitou: 'Manitou',
  Bmwmoto: 'Bmwmoto',
  Triumph: 'Triumph',
  Kawasaki: 'Kawasaki',
  Harley: 'Harley',
  Harley24: 'Harley24',
  Yamaha: 'Yamaha',
  Ktm: 'Ktm',
  Indian: 'Indian',
  my24canam: 'my24canam'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
