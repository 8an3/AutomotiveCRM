import { applySdkMetadata } from '@sentry/core';
import { init as init$1, getCurrentScope, getClient } from '@sentry/node';
export * from '@sentry/node';
export { DEFAULT_USER_INCLUDES, Handlers, Hub, Integrations, NodeClient, SDK_VERSION, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, Scope, addBreadcrumb, addEventProcessor, addGlobalEventProcessor, addIntegration, addRequestDataToEvent, autoDiscoverNodePerformanceMonitoringIntegrations, captureCheckIn, captureEvent, captureException, captureMessage, close, configureScope, consoleIntegration, contextLinesIntegration, continueTrace, createGetModuleFromFilename, createTransport, cron, deepReadDirSync, defaultIntegrations, defaultStackParser, enableAnrDetection, extractRequestData, extractTraceparentData, flush, functionToStringIntegration, getActiveSpan, getActiveTransaction, getClient, getCurrentHub, getCurrentScope, getDefaultIntegrations, getGlobalScope, getHubFromCarrier, getIsolationScope, getModuleFromFilename, getSentryRelease, getSpanStatusFromHttpCode, hapiErrorPlugin, inboundFiltersIntegration, isInitialized, lastEventId, linkedErrorsIntegration, localVariablesIntegration, makeMain, makeNodeTransport, metrics, modulesIntegration, nodeContextIntegration, onUncaughtExceptionIntegration, onUnhandledRejectionIntegration, parameterize, requestDataIntegration, runWithAsyncContext, setContext, setCurrentClient, setExtra, setExtras, setHttpStatus, setMeasurement, setTag, setTags, setUser, spanStatusfromHttpCode, startInactiveSpan, startSpan, startSpanManual, startTransaction, trace, trpcMiddleware, withActiveSpan, withIsolationScope, withMonitor, withScope } from '@sentry/node';
import { logger } from '@sentry/utils';
import { DEBUG_BUILD } from './utils/debug-build.js';
import { instrumentServer } from './utils/instrumentServer.js';
export { captureRemixServerException, wrapRemixHandleError } from './utils/instrumentServer.js';
export { ErrorBoundary, withErrorBoundary } from '@sentry/react';
export { remixRouterInstrumentation, withSentry } from './client/performance.js';
export { captureRemixErrorBoundaryError } from './client/errors.js';
export { browserTracingIntegration } from './client/browserTracingIntegration.js';
export { wrapExpressCreateRequestHandler } from './utils/serverAdapters/express.js';

function sdkAlreadyInitialized() {
  return !!getClient();
}

/** Initializes Sentry Remix SDK on Node. */
function init(options) {
  applySdkMetadata(options, 'remix', ['remix', 'node']);

  if (sdkAlreadyInitialized()) {
    DEBUG_BUILD && logger.log('SDK already initialized');

    return;
  }

  instrumentServer();

  init$1(options );

  getCurrentScope().setTag('runtime', 'node');
}

export { init };
//# sourceMappingURL=index.server.js.map
