// In your route file
import { PrismaClient } from "@prisma/client";
import { type ActionFunction } from "@remix-run/node";
import { prisma } from "~/libs";


// post
export let action: ActionFunction = async ({ request }) => {
  let data = await request.json();
  console.log(data)
  let clientfile = await prisma.clientfile.findUnique({
    where: {
      email: data.email,
    },
  });
  if (!clientfile) {
    clientfile = await prisma.clientfile.create({
      data: {
        firstName: data.firstName,
        lastName: data.lastName,
        name: data.name,
        email: data.email,
        phone: data.phone,
        address: data.address,
        city: data.city,
        postal: data.postal,
        province: data.province,
        dl: data.dl,
        typeOfContact: data.typeOfContact,
        timeToContact: data.timeToContact,
      },
    });
  }
  const options = {
    weekday: 'short',
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
  };
  const today = new Date()
  let finance = await prisma.finance.create({
    data: {
      clientfileId: clientfile.id,
      email: data.email,
      firstName: data.firstName,
      lastName: data.lastName,
      phone: data.phone,
      name: data.name,
      address: data.address,
      city: data.city,
      postal: data.postal,
      province: data.province,
      dl: data.dl,
      typeOfContact: data.typeOfContact,
      timeToContact: data.timeToContact,
      iRate: data.iRate,
      months: data.months,
      discount: data.discount,
      total: data.total,
      onTax: data.onTax,
      on60: data.on60,
      biweekly: data.biweekly,
      weekly: data.weekly,
      weeklyOth: data.weeklyOth,
      biweekOth: data.biweekOth,
      oth60: data.oth60,
      weeklyqc: data.weeklyqc,
      biweeklyqc: data.biweeklyqc,
      qc60: data.qc60,
      deposit: data.deposit,
      biweeklNatWOptions: data.biweeklNatWOptions,
      weeklylNatWOptions: data.weeklylNatWOptions,
      nat60WOptions: data.nat60WOptions,
      weeklyOthWOptions: data.weeklyOthWOptions,
      biweekOthWOptions: data.biweekOthWOptions,
      oth60WOptions: data.oth60WOptions,
      biweeklNat: data.biweeklNat,
      weeklylNat: data.weeklylNat,
      nat60: data.nat60,
      qcTax: data.qcTax,
      otherTax: data.otherTax,
      totalWithOptions: data.totalWithOptions,
      otherTaxWithOptions: data.otherTaxWithOptions,
      desiredPayments: data.desiredPayments,
      freight: data.freight,
      admin: data.admin,
      commodity: data.commodity,
      pdi: data.pdi,
      discountPer: data.discountPer,
      userLoanProt: data.userLoanProt,
      userTireandRim: data.userTireandRim,
      userGap: data.userGap,
      userExtWarr: data.userExtWarr,
      userServicespkg: data.userServicespkg,
      deliveryCharge: data.deliveryCharge,
      vinE: data.vinE,
      lifeDisability: data.lifeDisability,
      rustProofing: data.rustProofing,
      userOther: data.userOther,
      paintPrem: data.paintPrem,
      licensing: data.licensing,
      stockNum: data.stockNum,
      options: data.options,
      accessories: data.accessories,
      labour: data.labour,
      year: data.year,
      brand: data.brand,
      model: data.model,
      model1: data.model1,
      color: data.color,
      modelCode: data.modelCode,
      msrp: data.msrp,
      tradeValue: data.tradeValue,
      tradeDesc: data.tradeDesc,
      tradeColor: data.tradeColor,
      tradeYear: data.tradeYear,
      tradeMake: data.tradeMake,
      tradeVin: data.tradeVin,
      tradeTrim: data.tradeTrim,
      tradeMileage: data.tradeMileage,
      trim: data.trim,
      vin: data.vin,
      lien: data.lien,
      lastContact: today.toLocaleDateString('en-US', options),
      nextAppointment: 'TBD',
      referral: 'off',
      visited: 'off',
      bookedApt: 'off',
      aptShowed: 'off',
      aptNoShowed: 'off',
      testDrive: 'off',
      metService: 'off',
      metManager: 'off',
      metParts: 'off',
      sold: 'off',
      depositMade: 'off',
      refund: 'off',
      turnOver: 'off',
      financeApp: 'off',
      approved: 'off',
      signed: 'off',
      pickUpSet: 'off',
      demoed: 'off',
      delivered: 'off',
      notes: 'off',
      metSalesperson: 'on',
      metFinance: 'off',
      financeApplication: 'off',
      pickUpTime: 'off',
      depositTakenDate: 'off',
      docsSigned: 'off',
      tradeRepairs: 'off',
      seenTrade: 'off',
      lastNote: 'off',
      dLCopy: 'off',
      insCopy: 'off',
      testDrForm: 'off',
      voidChq: 'off',
      loanOther: 'off',
      signBill: 'off',
      ucda: 'off',
      tradeInsp: 'off',
      customerWS: 'off',
      otherDocs: 'off',
      urgentFinanceNote: 'off',
      funded: 'off',
      status: 'Active',
      result: 'Quoted',
      customerState: data.customerState,
      timesContacted: data.timesContacted,
      followUpDay: 'TBD',
      deliveredDate: 'TBD',
      // visits: data.visits,
      //  progress: data.progress,
      pickUpDate: 'TBD',
    },
  });
  console.log(finance)



  await prisma.notificationsUser.create({
    data: {
      title: `New Lead: ${finance.firstName} ${finance.lastName}`,
      read: false,
      type: 'New Lead',
      userEmail: 'newelead@newlead.com',
      content: `${finance.year} ${finance.brand} ${finance.model}`,
      // userId: '007',
      financeId: finance.id,
      clientfileId: clientfile.id,
    },
  });

  return new Response(null, { status: 200 });
};
