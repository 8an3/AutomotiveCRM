import { createReadableStreamFromReadable } from '@remix-run/node';
import { Readable } from 'node:stream';
import { prisma } from '~/libs';

export const loader = async () => {
  // Function to fetch data from the given endpoint
  const getAllFinanceData = async () => {
    const res = await fetch('http://localhost:3000/dealer/dashboard/calls/loader');
    if (!res.ok) {
      throw new Error("Failed to fetch data");
    }
    const data = await res.json();
    return data;
  };

  // Fetch the data
  const data = await getAllFinanceData();

  // Define the CSV headers
  const headers = [
    "id",
    "email",
    "firstName",
    "mileage",
    "lastName",
    "phone",
    "name",
    "address",
    "city",
    "postal",
    "province",
    "dl",
    "typeOfContact",
    "timeToContact",
    "iRate",
    "months",
    "discount",
    "total",
    "onTax",
    "on60",
    "biweekly",
    "weekly",
    "weeklyOth",
    "biweekOth",
    "oth60",
    "weeklyqc",
    "biweeklyqc",
    "qc60",
    "deposit",
    "biweeklNatWOptions",
    "weeklylNatWOptions",
    "nat60WOptions",
    "weeklyOthWOptions",
    "biweekOthWOptions",
    "oth60WOptions",
    "biweeklNat",
    "weeklylNat",
    "nat60",
    "qcTax",
    "otherTax",
    "totalWithOptions",
    "otherTaxWithOptions",
    "desiredPayments",
    "freight",
    "admin",
    "commodity",
    "pdi",
    "discountPer",
    "userLoanProt",
    "userTireandRim",
    "userGap",
    "userExtWarr",
    "userServicespkg",
    "deliveryCharge",
    "vinE",
    "lifeDisability",
    "rustProofing",
    "userOther",
    "paintPrem",
    "licensing",
    "stockNum",
    "options",
    "accessories",
    "labour",
    "year",
    "brand",
    "model",
    "model1",
    "color",
    "modelCode",
    "msrp",
    "userEmail",
    "tradeValue",
    "tradeDesc",
    "tradeColor",
    "tradeYear",
    "tradeMake",
    "tradeVin",
    "tradeTrim",
    "tradeMileage",
    "tradeLocation",
    "trim",
    "vin",
    "leadNote",
    "sendToFinanceNow",
    "dealNumber",
    "bikeStatus",
    "lien",
    "dob",
    "othTax",
    "optionsTotal",
    "lienPayout",
    "referral",
    "visited",
    "bookedApt",
    "aptShowed",
    "aptNoShowed",
    "testDrive",
    "metService",
    "metManager",
    "metParts",
    "sold",
    "depositMade",
    "refund",
    "turnOver",
    "financeApp",
    "approved",
    "signed",
    "pickUpSet",
    "demoed",
    "delivered",
    "lastContact",
    "status",
    "customerState",
    "result",
    "timesContacted",
    "nextAppointment",
    "followUpDay",
    "deliveredDate",
    "notes",
    "visits",
    "progress",
    "metSalesperson",
    "metFinance",
    "financeApplication",
    "pickUpDate",
    "pickUpTime",
    "depositTakenDate",
    "docsSigned",
    "tradeRepairs",
    "seenTrade",
    "lastNote",
    "applicationDone",
    "licensingSent",
    "liceningDone",
    "refunded",
    "cancelled",
    "lost",
    "dLCopy",
    "insCopy",
    "testDrForm",
    "voidChq",
    "loanOther",
    "signBill",
    "ucda",
    "tradeInsp",
    "customerWS",
    "otherDocs",
    "urgentFinanceNote",
    "funded",
    "leadSource",
  ];

  // Map the data into an array of strings, each representing a row in the CSV
  const rows = data.map(entry => [
    entry.id,
    entry.email,
    entry.firstName,
    entry.mileage,
    entry.lastName,
    entry.phone,
    entry.name,
    entry.address,
    entry.city,
    entry.postal,
    entry.province,
    entry.dl,
    entry.typeOfContact,
    entry.timeToContact,
    entry.iRate,
    entry.months,
    entry.discount,
    entry.total,
    entry.onTax,
    entry.on60,
    entry.biweekly,
    entry.weekly,
    entry.weeklyOth,
    entry.biweekOth,
    entry.oth60,
    entry.weeklyqc,
    entry.biweeklyqc,
    entry.qc60,
    entry.deposit,
    entry.biweeklNatWOptions,
    entry.weeklylNatWOptions,
    entry.nat60WOptions,
    entry.weeklyOthWOptions,
    entry.biweekOthWOptions,
    entry.oth60WOptions,
    entry.biweeklNat,
    entry.weeklylNat,
    entry.nat60,
    entry.qcTax,
    entry.otherTax,
    entry.totalWithOptions,
    entry.otherTaxWithOptions,
    entry.desiredPayments,
    entry.freight,
    entry.admin,
    entry.commodity,
    entry.pdi,
    entry.discountPer,
    entry.userLoanProt,
    entry.userTireandRim,
    entry.userGap,
    entry.userExtWarr,
    entry.userServicespkg,
    entry.deliveryCharge,
    entry.vinE,
    entry.lifeDisability,
    entry.rustProofing,
    entry.userOther,
    entry.paintPrem,
    entry.licensing,
    entry.stockNum,
    entry.options,
    entry.accessories,
    entry.labour,
    entry.year,
    entry.brand,
    entry.model,
    entry.model1,
    entry.color,
    entry.modelCode,
    entry.msrp,
    entry.userEmail,
    entry.tradeValue,
    entry.tradeDesc,
    entry.tradeColor,
    entry.tradeYear,
    entry.tradeMake,
    entry.tradeVin,
    entry.tradeTrim,
    entry.tradeMileage,
    entry.tradeLocation,
    entry.trim,
    entry.vin,
    entry.leadNote,
    entry.sendToFinanceNow,
    entry.dealNumber,
    entry.bikeStatus,
    entry.lien,
    entry.dob,
    entry.othTax,
    entry.optionsTotal,
    entry.lienPayout,
    entry.referral,
    entry.visited,
    entry.bookedApt,
    entry.aptShowed,
    entry.aptNoShowed,
    entry.testDrive,
    entry.metService,
    entry.metManager,
    entry.metParts,
    entry.sold,
    entry.depositMade,
    entry.refund,
    entry.turnOver,
    entry.financeApp,
    entry.approved,
    entry.signed,
    entry.pickUpSet,
    entry.demoed,
    entry.delivered,
    entry.lastContact,
    entry.status,
    entry.customerState,
    entry.result,
    entry.timesContacted,
    entry.nextAppointment,
    entry.followUpDay,
    entry.deliveredDate,
    entry.notes,
    entry.visits,
    entry.progress,
    entry.metSalesperson,
    entry.metFinance,
    entry.financeApplication,
    entry.pickUpDate,
    entry.pickUpTime,
    entry.depositTakenDate,
    entry.docsSigned,
    entry.tradeRepairs,
    entry.seenTrade,
    entry.lastNote,
    entry.applicationDone,
    entry.licensingSent,
    entry.liceningDone,
    entry.refunded,
    entry.cancelled,
    entry.lost,
    entry.dLCopy,
    entry.insCopy,
    entry.testDrForm,
    entry.voidChq,
    entry.loanOther,
    entry.signBill,
    entry.ucda,
    entry.tradeInsp,
    entry.customerWS,
    entry.otherDocs,
    entry.urgentFinanceNote,
    entry.funded,
    entry.leadSource,
  ].map(value => (value === null ? '' : value)).join(','));

  // Combine headers and rows into a single CSV string
  const csvContent = [headers.join(','), ...rows].join('\n');

  // Create a readable stream from the CSV string
  const file = createReadableStreamFromReadable(
    Readable.from([csvContent]),
  );

  // Return the response with appropriate headers
  return new Response(file, {
    headers: {
      'Content-Disposition': `attachment; filename="Deals.csv"`,
      'Content-Type': 'text/csv',
    },
  });
};
