import { createReadableStreamFromReadable, DataFunctionArgs } from '@remix-run/node';
import { Readable } from 'node:stream';
import { prisma } from '~/libs';

export async function loader({ params, request }: DataFunctionArgs) {
  let { dataType } = params;
  let headers
  let data
  let testData
  let csvData
  let rows

  switch (dataType) {
    case 'AccessoriesOnOrders':
      data = await prisma.accessoriesOnOrders.findMany();
      headers = [
        "id",
        "quantity",
        "accOrderId",
        "status",
        "orderNumber",
        "OrderInvId",
        "accessoryId",
        "service",
        "hour",
      ];
      testData = {
        "id": "id",
        "quantity": 10,
        "accOrderId": "accOrderId",
        "status": "status",
        "orderNumber": "orderNumber",
        "OrderInvId": "OrderInvId",
        "accessoryId": "accessoryId",
        "service": "service",
        "hour": 5,

      }
      csvData = data.length > 0 ? data : [testData];
      rows = csvData.map(entry => [
        entry.id,
        entry.quantity,
        entry.accOrderId,
        entry.status,
        entry.orderNumber,
        entry.OrderInvId,
        entry.accessoryId,
        entry.service,
        entry.hour,
      ].map(value => (value === null ? '' : value)).join(','));
      break;
    case 'Accessories':
      data = await prisma.accessories.findMany();
      headers = [
        "id",
        "createdAt",
        "updatedAt",
        "partNumber",
        "brand",
        "name",
        "price",
        "cost",
        "quantity",
        "minQuantity",
        "description",
        "category",
        "subCategory",
        "onOrder",
        "distributer",
        "location",
        "note",
        "workOrderSuggestion",
      ];
      testData = {
        "id": "id",
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),

        "partNumber": "partNumber",
        "brand": "brand",
        "name": "name",
        "price": 10.05,
        "cost": 10.05,
        "quantity": 5,
        "minQuantity": 5,
        "description": "description",
        "category": "category",
        "subCategory": "subCategory",
        "onOrder": 5,
        "distributer": "distributer",
        "location": "location",
        "note": "note",
        "workOrderSuggestion": "workOrderSuggestion",
      }
      csvData = data.length > 0 ? data : [testData];
      rows = csvData.map(entry => [
        entry.id,
        entry.createdAt,
        entry.updatedAt,
        entry.partNumber,
        entry.brand,
        entry.name,
        entry.price,
        entry.cost,
        entry.quantity,
        entry.minQuantity,
        entry.description,
        entry.category,
        entry.subCategory,
        entry.onOrder,
        entry.distributer,
        entry.location,
        entry.note,
        entry.workOrderSuggestion,
      ].map(value => (value === null ? '' : value)).join(','));
      break;
    case 'Customers':
      data = await prisma.clientfile.findMany();
      headers = [
        "id",
        "createdAt",
        "updatedAt",
        "financeId",
        "userId",
        "firstName",
        "lastName",
        "name",
        "email",
        "phone",
        "address",
        "city",
        "postal",
        "province",
        "dl",
        "typeOfContact",
        "timeToContact",
        "conversationId",
        "billingAddress",
      ];
      testData = {
        "id": "id",
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        "financeId": "financeId",
        "userId": "userId",
        "firstName": "firstName",
        "lastName": "lastName",
        "name": "name",
        "email": "email",
        "phone": "phone",
        "address": "address",
        "city": "city",
        "postal": "postal",
        "province": "province",
        "dl": "dl",
        "typeOfContact": "typeOfContact",
        "timeToContact": "timeToContact",
      }
      csvData = data.length > 0 ? data : [testData];
      rows = csvData.map(entry => [
        entry.id,
        entry.createdAt,
        entry.updatedAt,
        entry.financeId,
        entry.userId,
        entry.firstName,
        entry.lastName,
        entry.name,
        entry.email,
        entry.phone,
        entry.address,
        entry.city,
        entry.postal,
        entry.province,
        entry.dl,
        entry.typeOfContact,
        entry.timeToContact,
        entry.conversationId,
        entry.billingAddress,
      ].map(value => (value === null ? '' : value)).join(','));
      break;
    case 'Deals':
      data = await prisma.finance.findMany();
      headers = [
        "financeManager",
        "userEmail",
        "userName",
        "financeManagerName",
        "email",
        "firstName",
        "lastName",
        "phone",
        "name",
        "address",
        "city",
        "postal",
        "province",
        "dl",
        "typeOfContact",
        "timeToContact",
        "dob",
        "othTax",
        "optionsTotal",
        "lienPayout",
        "leadNote",
        "sendToFinanceNow",
        "dealNumber",
        "iRate",
        "months",
        "discount",
        "total",
        "onTax",
        "on60",
        "biweekly",
        "weekly",
        "weeklyOth",
        "biweekOth",
        "oth60",
        "weeklyqc",
        "biweeklyqc",
        "qc60",
        "deposit",
        "biweeklNatWOptions",
        "weeklylNatWOptions",
        "nat60WOptions",
        "weeklyOthWOptions",
        "biweekOthWOptions",
        "oth60WOptions",
        "biweeklNat",
        "weeklylNat",
        "nat60",
        "qcTax",
        "otherTax",
        "totalWithOptions",
        "otherTaxWithOptions",
        "desiredPayments",
        "admin",
        "commodity",
        "pdi",
        "discountPer",
        "userLoanProt",
        "userTireandRim",
        "userGap",
        "userExtWarr",
        "userServicespkg",
        "deliveryCharge",
        "vinE",
        "lifeDisability",
        "rustProofing",
        "userOther",
        "referral",
        "visited",
        "bookedApt",
        "aptShowed",
        "aptNoShowed",
        "testDrive",
        "metService",
        "metManager",
        "metParts",
        "sold",
        "depositMade",
        "refund",
        "turnOver",
        "financeApp",
        "approved",
        "signed",
        "pickUpSet",
        "demoed",
        "lastContact",
        "status",
        "customerState",
        "result",
        "timesContacted",
        "nextAppointment",
        "followUpDay",
        "deliveryDate",
        "delivered",
        "deliveredDate",
        "notes",
        "visits",
        "progress",
        "metSalesperson",
        "metFinance",
        "financeApplication",
        "pickUpDate",
        "pickUpTime",
        "depositTakenDate",
        "docsSigned",
        "tradeRepairs",
        "seenTrade",
        "lastNote",
        "applicationDone",
        "licensingSent",
        "liceningDone",
        "refunded",
        "cancelled",
        "lost",
        "dLCopy",
        "insCopy",
        "testDrForm",
        "voidChq",
        "loanOther",
        "signBill",
        "ucda",
        "tradeInsp",
        "customerWS",
        "otherDocs",
        "urgentFinanceNote",
        "funded",
        "leadSource",
        "financeDeptProductsTotal",
        "bank",
        "loanNumber",
        "idVerified",
        "dealerCommission",
        "financeCommission",
        "salesCommission",
        "firstPayment",
        "loanMaturity",
        "quoted",
        "InPerson",
        "Phone",
        "SMS",
        "Email",
        "Other",
        "paintPrem",
        "licensing",
        "stockNum",
        "options",
        "accessories",
        "freight",
        "labour",
        "year",
        "brand",
        "mileage",
        "model",
        "model1",
        "color",
        "modelCode",
        "msrp",
        "trim",
        "vin",
        "bikeStatus",
        "invId",
        "motor",
        "tag",
        "tradeValue",
        "tradeDesc",
        "tradeColor",
        "tradeYear",
        "tradeMake",
        "tradeVin",
        "tradeTrim",
        "tradeMileage",
        "tradeLocation",
        "lien",
        "id",
        "activixId",
        "theRealActId",
        "createdAt",
        "updatedAt",
        "clientfileId",
        "inventoryMotorcycleId",
      ];
      testData = {
        "financeManager": "financeManager",
        "userEmail": "userEmail",
        "userName": "userName",
        "financeManagerName": "financeManagerName",
        "email": "email",
        "firstName": "firstName",
        "lastName": "lastName",
        "phone": "phone",
        "name": "name",
        "address": "address",
        "city": "city",
        "postal": "postal",
        "province": "province",
        "dl": "dl",
        "typeOfContact": "typeOfContact",
        "timeToContact": "timeToContact",
        "dob": "dob",
        "othTax": "othTax",
        "optionsTotal": "optionsTotal",
        "lienPayout": "lienPayout",
        "leadNote": "leadNote",
        "sendToFinanceNow": "sendToFinanceNow",
        "dealNumber": "dealNumber",
        "iRate": "iRate",
        "months": "months",
        "discount": "discount",
        "total": "total",
        "onTax": "onTax",
        "on60": "on60",
        "biweekly": "biweekly",
        "weekly": "weekly",
        "weeklyOth": "weeklyOth",
        "biweekOth": "biweekOth",
        "oth60": "oth60",
        "weeklyqc": "weeklyqc",
        "biweeklyqc": "biweeklyqc",
        "qc60": "qc60",
        "deposit": "deposit",
        "biweeklNatWOptions": "biweeklNatWOptions",
        "weeklylNatWOptions": "weeklylNatWOptions",
        "nat60WOptions": "nat60WOptions",
        "weeklyOthWOptions": "weeklyOthWOptions",
        "biweekOthWOptions": "biweekOthWOptions",
        "oth60WOptions": "oth60WOptions",
        "biweeklNat": "biweeklNat",
        "weeklylNat": "weeklylNat",
        "nat60": "nat60",
        "qcTax": "qcTax",
        "otherTax": "otherTax",
        "totalWithOptions": "totalWithOptions",
        "otherTaxWithOptions": "otherTaxWithOptions",
        "desiredPayments": "desiredPayments",
        "admin": "admin",
        "commodity": "commodity",
        "pdi": "pdi",
        "discountPer": "discountPer",
        "userLoanProt": 5,
        "userTireandRim": "userTireandRim",
        "userGap": "userGap",
        "userExtWarr": 5,
        "userServicespkg": 5,
        "deliveryCharge": 5,
        "vinE": 5,
        "lifeDisability": 5,
        "rustProofing": 5,
        "userOther": 5,

        "referral": "referral",
        "visited": "visited",
        "bookedApt": "bookedApt",
        "aptShowed": "aptShowed",
        "aptNoShowed": "aptNoShowed",
        "testDrive": "testDrive",
        "metService": "metService",
        "metManager": "metManager",
        "metParts": "metParts",
        "sold": "sold",
        "depositMade": "depositMade",
        "refund": "refund",
        "turnOver": "turnOver",
        "financeApp": "financeApp",
        "approved": "approved",
        "signed": "signed",
        "pickUpSet": "pickUpSet",
        "demoed": "demoed",
        "lastContact": "lastContact",
        "status": "status",
        "customerState": "customerState",
        "result": "result",
        "timesContacted": "timesContacted",
        "nextAppointment": "nextAppointment",
        "followUpDay": "followUpDay",
        "deliveryDate": "deliveryDate",
        "delivered": "delivered",
        "deliveredDate": "deliveredDate",
        "notes": "notes",
        "visits": "visits",
        "progress": "progress",
        "metSalesperson": "metSalesperson",
        "metFinance": "metFinance",
        "financeApplication": "financeApplication",
        "pickUpDate": "pickUpDate",
        "pickUpTime": "pickUpTime",
        "depositTakenDate": "depositTakenDate",
        "docsSigned": "docsSigned",
        "tradeRepairs": "tradeRepairs",
        "seenTrade": "seenTrade",
        "lastNote": "lastNote",
        "applicationDone": "applicationDone",
        "licensingSent": "licensingSent",
        "liceningDone": "liceningDone",
        "refunded": "refunded",
        "cancelled": "cancelled",
        "lost": "lost",
        "dLCopy": "dLCopy",
        "insCopy": "insCopy",
        "testDrForm": "testDrForm",
        "voidChq": "voidChq",
        "loanOther": "loanOther",
        "signBill": "signBill",
        "ucda": "ucda",
        "tradeInsp": "tradeInsp",
        "customerWS": "customerWS",
        "otherDocs": "otherDocs",
        "urgentFinanceNote": "urgentFinanceNote",
        "funded": "funded",
        "leadSource": "leadSource",
        "financeDeptProductsTotal": "financeDeptProductsTotal",
        "bank": "bank",
        "loanNumber": "loanNumber",
        "idVerified": "idVerified",
        "dealerCommission": "dealerCommission",
        "financeCommission": "financeCommission",
        "salesCommission": "salesCommission",
        "firstPayment": "firstPayment",
        "loanMaturity": "loanMaturity",
        "quoted": "quoted",

        "InPerson": 5,
        "Phone": 5,
        "SMS": 5,
        "Email": 5,
        "Other": 5,

        "paintPrem": "paintPrem",
        "licensing": "licensing",
        "stockNum": "stockNum",
        "options": "options",
        "accessories": 100.05,
        "freight": "freight",
        "labour": "labour",
        "year": "year",
        "brand": "brand",
        "mileage": "mileage",
        "model": "model",
        "model1": "model1",
        "color": "color",
        "modelCode": "modelCode",
        "msrp": "msrp",
        "trim": "trim",
        "vin": "vin",
        "bikeStatus": "bikeStatus",
        "invId": "invId",
        "motor": "motor",
        "tag": "tag",
        "tradeValue": "tradeValue",
        "tradeDesc": "tradeDesc",
        "tradeColor": "tradeColor",
        "tradeYear": "tradeYear",
        "tradeMake": "tradeMake",
        "tradeVin": "tradeVin",
        "tradeTrim": "tradeTrim",
        "tradeMileage": "tradeMileage",
        "tradeLocation": "tradeLocation",
        "lien": "lien",
        "id": "id",
        "activixId": "activixId",
        "theRealActId": "theRealActId",
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        "clientfileId": "clientfileId",
        "inventoryMotorcycleId": "inventoryMotorcycleId",
      }
      csvData = data.length > 0 ? data : [testData];
      rows = csvData.map(entry => [
        entry.financeManager,
        entry.userEmail,
        entry.userName,
        entry.financeManagerName,
        entry.email,
        entry.firstName,
        entry.lastName,
        entry.phone,
        entry.name,
        entry.address,
        entry.city,
        entry.postal,
        entry.province,
        entry.dl,
        entry.typeOfContact,
        entry.timeToContact,
        entry.dob,
        entry.othTax,
        entry.optionsTotal,
        entry.lienPayout,
        entry.leadNote,
        entry.sendToFinanceNow,
        entry.dealNumber,
        entry.iRate,
        entry.months,
        entry.discount,
        entry.total,
        entry.onTax,
        entry.on60,
        entry.biweekly,
        entry.weekly,
        entry.weeklyOth,
        entry.biweekOth,
        entry.oth60,
        entry.weeklyqc,
        entry.biweeklyqc,
        entry.qc60,
        entry.deposit,
        entry.biweeklNatWOptions,
        entry.weeklylNatWOptions,
        entry.nat60WOptions,
        entry.weeklyOthWOptions,
        entry.biweekOthWOptions,
        entry.oth60WOptions,
        entry.biweeklNat,
        entry.weeklylNat,
        entry.nat60,
        entry.qcTax,
        entry.otherTax,
        entry.totalWithOptions,
        entry.otherTaxWithOptions,
        entry.desiredPayments,
        entry.admin,
        entry.commodity,
        entry.pdi,
        entry.discountPer,
        entry.userLoanProt,
        entry.userTireandRim,
        entry.userGap,
        entry.userExtWarr,
        entry.userServicespkg,
        entry.deliveryCharge,
        entry.vinE,
        entry.lifeDisability,
        entry.rustProofing,
        entry.userOther,
        entry.referral,
        entry.visited,
        entry.bookedApt,
        entry.aptShowed,
        entry.aptNoShowed,
        entry.testDrive,
        entry.metService,
        entry.metManager,
        entry.metParts,
        entry.sold,
        entry.depositMade,
        entry.refund,
        entry.turnOver,
        entry.financeApp,
        entry.approved,
        entry.signed,
        entry.pickUpSet,
        entry.demoed,
        entry.lastContact,
        entry.status,
        entry.customerState,
        entry.result,
        entry.timesContacted,
        entry.nextAppointment,
        entry.followUpDay,
        entry.deliveryDate,
        entry.delivered,
        entry.deliveredDate,
        entry.notes,
        entry.visits,
        entry.progress,
        entry.metSalesperson,
        entry.metFinance,
        entry.financeApplication,
        entry.pickUpDate,
        entry.pickUpTime,
        entry.depositTakenDate,
        entry.docsSigned,
        entry.tradeRepairs,
        entry.seenTrade,
        entry.lastNote,
        entry.applicationDone,
        entry.licensingSent,
        entry.liceningDone,
        entry.refunded,
        entry.cancelled,
        entry.lost,
        entry.dLCopy,
        entry.insCopy,
        entry.testDrForm,
        entry.voidChq,
        entry.loanOther,
        entry.signBill,
        entry.ucda,
        entry.tradeInsp,
        entry.customerWS,
        entry.otherDocs,
        entry.urgentFinanceNote,
        entry.funded,
        entry.leadSource,
        entry.financeDeptProductsTotal,
        entry.bank,
        entry.loanNumber,
        entry.idVerified,
        entry.dealerCommission,
        entry.financeCommission,
        entry.salesCommission,
        entry.firstPayment,
        entry.loanMaturity,
        entry.quoted,
        entry.InPerson,
        entry.Phone,
        entry.SMS,
        entry.Email,
        entry.Other,
        entry.paintPrem,
        entry.licensing,
        entry.stockNum,
        entry.options,
        entry.accessories,
        entry.freight,
        entry.labour,
        entry.year,
        entry.brand,
        entry.mileage,
        entry.model,
        entry.model1,
        entry.color,
        entry.modelCode,
        entry.msrp,
        entry.trim,
        entry.vin,
        entry.bikeStatus,
        entry.invId,
        entry.motor,
        entry.tag,
        entry.tradeValue,
        entry.tradeDesc,
        entry.tradeColor,
        entry.tradeYear,
        entry.tradeMake,
        entry.tradeVin,
        entry.tradeTrim,
        entry.tradeMileage,
        entry.tradeLocation,
        entry.lien,
        entry.id,
        entry.activixId,
        entry.theRealActId,
        entry.createdAt,
        entry.updatedAt,
        entry.clientfileId,
        entry.inventoryMotorcycleId,
        // InventoryMotorcycle
        //
        // financeStorage
        // clientApts
        // Comm
        // FinanceDeptProducts
        // FinanceUnit
        // FinanceTradeUnit
        // AccOrders
        // WorkOrders
        // Payments
        // FinanceNote
        // //
        // Clientfile
        // //
        // finManOptions
        // bmwMotoOptions
        // uCDAForm
        // FinCanOptions
      ].map(value => (value === null ? '' : value)).join(','));
      break;
    case 'UnitInventory':
      data = await prisma.inventoryMotorcycle.findMany();
      headers = [
        "packageNumber",
        "packagePrice",
        "stockNumber",
        "type",
        "class",
        "year",
        "make",
        "model",
        "modelName",
        "submodel",
        "subSubmodel",
        "price",
        "exteriorColor",
        "mileage",
        "consignment",
        "onOrder",
        "expectedOn",
        "status",
        "orderStatus",
        "hdcFONumber",
        "hdmcFONumber",
        "vin",
        "age",
        "floorPlanDueDate",
        "location",
        "stocked",
        "stockedDate",
        "isNew",
        "actualCost",
        "mfgSerialNumber",
        "engineNumber",
        "plates",
        "keyNumber",
        "length",
        "width",
        "engine",
        "fuelType",
        "power",
        "chassisNumber",
        "chassisYear",
        "chassisMake",
        "chassisModel",
        "chassisType",
        "registrationState",
        "registrationExpiry",
        "grossWeight",
        "netWeight",
        "insuranceCompany",
        "policyNumber",
        "insuranceAgent",
        "insuranceStartDate",
        "insuranceEndDate",
        "sold",
      ];
      testData = {
        "packageNumber": '165265',
        "packagePrice": '350',
        "stockNumber": 'B8858',
        "type": 'H-D Large Cruiser',
        "class": '',
        "year": '2024',
        "make": 'H-D',
        "model": 'CVO Road Glide',
        "modelName": 'FLHXSE CVO',
        "submodel": '',
        "subSubmodel": '',
        "price": '62000',
        "exteriorColor": 'Black',
        "mileage": '2',
        "consignment": false,
        "onOrder": false,
        "expectedOn": '',
        "status": '',
        "orderStatus": '',
        "hdcFONumber": '',
        "hdmcFONumber": '',
        "vin": 'B654648151',
        "age": 45,
        "floorPlanDueDate": '',
        "location": 'Floor',
        "stocked": true,
        "stockedDate": 'Jan 5th 2024',
        "isNew": true,
        "actualCost": '',
        "mfgSerialNumber": '',
        "engineNumber": '',
        "plates": '',
        "keyNumber": '',
        "length": '',
        "width": '',
        "engine": '',
        "fuelType": '',
        "power": '',
        "chassisNumber": '',
        "chassisYear": '',
        "chassisMake": '',
        "chassisModel": '',
        "chassisType": '',
        "registrationState": '',
        "registrationExpiry": '',
        "grossWeight": '',
        "netWeight": '',
        "insuranceCompany": '',
        "policyNumber": '',
        "insuranceAgent": '',
        "insuranceStartDate": '',
        "insuranceEndDate": '',
        "sold": false,
        "freight": 750.85
      }
      csvData = data.length > 0 ? data : [testData];
      rows = csvData.map(entry => [
        entry.packageNumber,
        entry.packagePrice,
        entry.stockNumber,
        entry.type,
        entry.class,
        entry.year,
        entry.make,
        entry.model,
        entry.modelName,
        entry.submodel,
        entry.subSubmodel,
        entry.price,
        entry.exteriorColor,
        entry.mileage,
        entry.consignment,
        entry.onOrder,
        entry.expectedOn,
        entry.status,
        entry.orderStatus,
        entry.hdcFONumber,
        entry.hdmcFONumber,
        entry.vin,
        entry.age,
        entry.floorPlanDueDate,
        entry.location,
        entry.stocked,
        entry.stockedDate,
        entry.isNew,
        entry.actualCost,
        entry.mfgSerialNumber,
        entry.engineNumber,
        entry.plates,
        entry.keyNumber,
        entry.length,
        entry.width,
        entry.engine,
        entry.fuelType,
        entry.power,
        entry.chassisNumber,
        entry.chassisYear,
        entry.chassisMake,
        entry.chassisModel,
        entry.chassisType,
        entry.registrationState,
        entry.registrationExpiry,
        entry.grossWeight,
        entry.netWeight,
        entry.insuranceCompany,
        entry.policyNumber,
        entry.insuranceAgent,
        entry.insuranceStartDate,
        entry.insuranceEndDate,
        entry.sold,

      ].map(value => (value === null ? '' : value)).join(','));

      break;
    case 'workOrders':
      data = await prisma.workOrder.findMany();
      headers = [
        "workOrderId",
        "unit",
        "mileage",
        "vin",
        "tag",
        "motor",
        "color",
        "budget",
        "waiter",
        "totalLabour",
        "totalParts",
        "subTotal",
        "total",
        "writer",
        "userEmail",
        "tech",
        "techEmail",
        "notes",
        "customerSig",
        "status",
        "location",
        "quoted",
        "paid",
        "remaining",
        "FinanceUnitId",
        "ServiceUnitId",
        "financeId",
        "clientfileId",
        "note",
        "closedAt",
        "createdAt",
        "updatedAt",
      ];
      testData = {
        "workOrderId": 52,
        "unit": "unit",
        "mileage": "mileage",
        "vin": "vin",
        "tag": "tag",
        "motor": "motor",
        "color": "color",
        "budget": "budget",
        "waiter": false,
        "totalLabour": 10.05,
        "totalParts": 10.05,
        "subTotal": 10.05,
        "total": 10.05,
        "writer": "writer",
        "userEmail": "userEmail",
        "tech": "tech",
        "techEmail": "techEmail",
        "discDollar": 10.05,
        "discPer": 10.05,
        "notes": "notes",
        "customerSig": "customerSig",
        "status": "status",
        "location": "location",
        "quoted": "quoted",
        "paid": "paid",
        "remaining": "remaining",
        "FinanceUnitId": "FinanceUnitId",
        "ServiceUnitId": "ServiceUnitId",
        "financeId": "financeId",
        "clientfileId": "clientfileId",
        "note": "note",
        "closedAt": new Date().toISOString(),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      }
      csvData = data.length > 0 ? data : [testData];
      rows = csvData.map(entry => [
        entry.workOrderId,
        entry.unit,
        entry.mileage,
        entry.vin,
        entry.tag,
        entry.motor,
        entry.color,
        entry.budget,
        entry.waiter,
        entry.totalLabour,
        entry.totalParts,
        entry.subTotal,
        entry.total,
        entry.writer,
        entry.userEmail,
        entry.tech,
        entry.techEmail,
        entry.notes,
        entry.customerSig,
        entry.status,
        entry.location,
        entry.quoted,
        entry.paid,
        entry.remaining,
        entry.FinanceUnitId,
        entry.ServiceUnitId,
        entry.financeId,
        entry.clientfileId,
        entry.note,
        entry.closedAt,
        entry.createdAt,
        entry.updatedAt,
      ].map(value => (value === null ? '' : value)).join(','));

      break;
    default:
      break;
  }
  const csvContent = [headers.join(','), ...rows].join('\n');

  const file = createReadableStreamFromReadable(
    Readable.from([csvContent]),
  );

  return new Response(file, {
    headers: {
      'Content-Disposition': 'attachment; filename="Accessories.csv"',
      'Content-Type': 'text/csv',
    },
  });
};
