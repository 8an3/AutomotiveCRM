import { prisma } from "~/libs";

export async function updateBMWOptions({
  financeId,
  passengerKitLowSeat,
  comfortPsgrSeat,
  m1000rMPkg,
  m1000rTitEx,
  desOption,
  m1000rrMPkg,
  s1000rrRacePkg,
  s1000rrRacePkg2,
  f7gsConn,
  f8gsDblSeat,
  r12rtAudioSystem,
  f9xrHandProtectors,
  r12gsCrossGld,
  r12gsSpSusp,
  r12gsProtBar,
  r12gsCrossBlk,
  audioSystem,
  highShield,
  psgrKit,
  alarm,
  color,
  chain,
  comfortPkg,
  touringPkg,
  activePkg,
  dynamicPkg,
  offTire,
  keyless,
  headlightPro,
  shiftAssPro,
  tpc,
  cruise,
  windshield,
  handleBar,
  extraHighSeat,
  alumTank1,
  alumTank2,
  classicW,
  silencer,
  chromedExhaust,
  crossW,
  highSeat,
  lowKitLowSeat,
  lowSeat,
  mPsgrSeat,
  aeroPkg719,
}) {
  try {
    const finance = await prisma.bmwMotoOptions.update({
      data: {
        passengerKitLowSeat,
        financeId,
        comfortPsgrSeat,
        m1000rMPkg,
        m1000rTitEx,
        desOption,
        m1000rrMPkg,
        s1000rrRacePkg,
        s1000rrRacePkg2,
        f7gsConn,
        f8gsDblSeat,
        r12rtAudioSystem,
        f9xrHandProtectors,
        r12gsCrossGld,
        r12gsSpSusp,
        r12gsProtBar,
        r12gsCrossBlk,
        audioSystem,
        highShield,
        psgrKit,
        alarm,
        color,
        chain,
        comfortPkg,
        touringPkg,
        activePkg,
        dynamicPkg,
        offTire,
        keyless,
        headlightPro,
        shiftAssPro,
        tpc,
        cruise,
        windshield,
        handleBar,
        extraHighSeat,
        alumTank1,
        alumTank2,
        classicW,
        silencer,
        chromedExhaust,
        crossW,
        highSeat,
        lowKitLowSeat,
        lowSeat,
        mPsgrSeat,
        aeroPkg719,
      },
      where: { financeId: financeId },
    });
    //console.log('finance created successfully')
    return finance;
  } catch (error) {
    console.error("Error creating finance:", error);
    throw error;
  }
}
export async function updateBMWOptions2({
  financeId,
  comfortSeat,
  designW,
  loweringKit,
  forgedWheels,
  carbonWheels,
  centerStand,
  billetPack1,
  billetPack2,
  heatedSeat,
  lugRack,
  lugRackBrackets,
  chargeSocket,
  auxLights,
  mLightBat,
  carbonPkg,
  enduroPkg,
  sportShield,
  sportWheels,
  sportSeat,
  brownBench,
  brownSeat,
  handleRisers,
  lgihtsPkg,
  fogLights,
  pilSeatCover,
  lapTimer,
  floorLight,
  blackBench,
  hillStart,
  floorboards,
  reverse,
  forkTubeTrim,
  spokedW,
  lockGasCap,
  aeroWheel,
  psgrBench719,
  blackS719,
  aero719,
  pinstripe,
  designPkgBL,
  benchseatlow,
  iconWheel,
  centreStand,
  tubeHandle,
  classicWheels,
  blackContrastwheel,
  silverContastWheel,
  silverWheel,
  activeCruise,
  blackPowertrain,
  blackWheel,
}) {
  try {
    const finance = await prisma.bmwMotoOptions2.update({
      data: {
        comfortSeat,
        designW,
        loweringKit,
        forgedWheels,
        carbonWheels,
        centerStand,
        billetPack1,
        billetPack2,
        heatedSeat,
        lugRack,
        lugRackBrackets,
        chargeSocket,
        auxLights,
        mLightBat,
        carbonPkg,
        enduroPkg,
        sportShield,
        sportWheels,
        sportSeat,
        brownBench,
        brownSeat,
        handleRisers,
        lgihtsPkg,
        fogLights,
        pilSeatCover,
        lapTimer,
        floorLight,
        blackBench,
        hillStart,
        floorboards,
        reverse,
        forkTubeTrim,
        spokedW,
        lockGasCap,
        aeroWheel,
        psgrBench719,
        blackS719,
        aero719,
        pinstripe,
        designPkgBL,
        benchseatlow,
        iconWheel,
        centreStand,
        tubeHandle,
        classicWheels,
        blackContrastwheel,
        silverContastWheel,
        silverWheel,
        activeCruise,
        blackPowertrain,
        blackWheel,
      },
      where: { financeId: financeId },
    });
    //console.log('finance created successfully')
    return finance;
  } catch (error) {
    console.error("Error creating finance:", error);
    throw error;
  }
}


export async function updateFinance({
  id,
  freight,
  admin,
  commodity,
  pdi,
  discountPer,
  weeklyqc,
  qcTax,
  biweeklyqc,
  deliveryCharge,
  qc60,
  paintPrem,
  financeId,
  iRate,
  months,
  discount,
  total,
  onTax,
  firstName,
  lastName,
  on60,
  biweekly,
  desiredPayments,
  weekly,
  deposit,
  name,
  email,
  phone,
  address,
  model,
  stockNum,
  brand,
  options,
  accessories,
  labour,
  year,
  model1,
  color,
  modelCode,
  msrp,
  licensing,
  weeklyOth,
  biweekOth,
  oth60,
  otherTaxWithOptions,
  otherTax,
  weeklyOthWOptions,
  biweekOthWOptions,
  oth60WOptions,
  totalWithOptions,
  biweeklNat,
  weeklylNat,
  nat60,
  biweeklNatWOptions,
  weeklylNatWOptions,
  nat60WOptions,
  typeOfContact,
  timeToContact,
  timeOfDay,
  date,
  dl,
  postal,
  city,
  tradeDesc,
  userLoanProt,
  userTireandRim,
  userGap,
  userExtWarr,
  userServicespkg,
  vinE,
  lifeDisability,
  rustProofing,
  userOther,
  province,
  tradeColor,
  tradeYear,
  tradeMake,
  tradeVin,
  tradeValue,



  tradeTrim,
  trim,
  vin,
}) {
  try {
    const updatingFinance = await prisma.finance.update({
      data: {

        tradeYear,
        tradeMake,
        tradeVin,
        tradeTrim,
        trim,
        vin,
        tradeColor,
        postal,
        province,

        freight,
        rustProofing,
        admin,
        userOther,
        commodity,
        firstName,
        lastName,
        pdi,
        discountPer,
        weeklyqc,
        qcTax,
        biweeklyqc,
        qc60,
        paintPrem,
        iRate,
        deliveryCharge,
        months,
        tradeValue,
        discount,
        total,
        onTax,
        on60,
        biweekly,
        weekly,
        deposit,
        email,
        phone,
        name,
        address,
        model,
        stockNum,
        brand,
        desiredPayments,
        options,
        accessories,
        labour,
        year,
        model1,
        color,
        modelCode,
        msrp,
        licensing,
        weeklyOth,
        biweekOth,
        oth60,
        otherTax,
        otherTaxWithOptions,
        weeklyOthWOptions,
        biweekOthWOptions,
        totalWithOptions,
        oth60WOptions,
        biweeklNat,
        weeklylNat,
        nat60,
        biweeklNatWOptions,
        weeklylNatWOptions,
        nat60WOptions,
        typeOfContact,
        timeToContact,
        timeOfDay,
        date,
        dl,
        city,
        tradeDesc,
        userLoanProt,
        userTireandRim,
        userGap,
        userExtWarr,
        userServicespkg,
        vinE,
        lifeDisability,
      },
      where: { id: id },
    });
    console.log("finance updated successfully");

    return updatingFinance;
  } catch (error) {
    console.error("Error creating finance:", error);
    throw new Error("Failed to create finance");
  }
}
