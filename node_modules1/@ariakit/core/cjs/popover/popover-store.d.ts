import type { DialogStoreFunctions, DialogStoreOptions, DialogStoreState } from "../dialog/dialog-store.js";
import type { Store, StoreOptions, StoreProps } from "../utils/store.js";
import type { SetState } from "../utils/types.js";
type BasePlacement = "top" | "bottom" | "left" | "right";
type Placement = BasePlacement | `${BasePlacement}-start` | `${BasePlacement}-end`;
type AnchorRect = {
    x?: number;
    y?: number;
    width?: number;
    height?: number;
};
/**
 * Creates a popover store.
 */
export declare function createPopoverStore({ getAnchorRect, renderCallback, popover: otherPopover, ...props }?: PopoverStoreProps): PopoverStore;
export interface PopoverStoreRenderCallbackProps extends Pick<PopoverStoreState, "anchorElement" | "popoverElement" | "arrowElement" | "mounted" | "placement" | "fixed" | "gutter" | "shift" | "overlap" | "flip" | "sameWidth" | "fitViewport" | "arrowPadding" | "overflowPadding"> {
    /**
     * A method that updates the `currentPlacement` state.
     */
    setPlacement: SetState<Placement>;
    /**
     * The default render callback that will be called when the `renderCallback`
     * prop is not provided.
     */
    defaultRenderCallback: () => () => void;
}
export interface PopoverStoreState extends DialogStoreState {
    /**
     * The anchor element.
     */
    anchorElement: HTMLElement | null;
    /**
     * The popover element that will render the placement attributes.
     */
    popoverElement: HTMLElement | null;
    /**
     * The arrow element.
     */
    arrowElement: HTMLElement | null;
    /**
     * The current temporary placement state of the popover. This may be different
     * from the the `placement` state if the popover has needed to update its
     * position on the fly.
     */
    currentPlacement: Placement;
    /**
     * The placement of the popover.
     * @default "bottom"
     */
    placement: Placement;
    /**
     * Whether the popover has `position: fixed` or not.
     * @default false
     */
    fixed: boolean;
    /**
     * The distance between the popover and the anchor element. By default, it's 0
     * plus half of the arrow offset, if it exists.
     */
    gutter: number | undefined;
    /**
     * The skidding of the popover along the anchor element.
     * @default 0
     */
    shift: number;
    /**
     * Controls the behavior of the popover when it overflows the viewport:
     *   - If a `boolean`, specifies whether the popover should flip to the
     *     opposite side when it overflows.
     *   - If a `string`, indicates the preferred fallback placements when it
     *     overflows. The placements must be spaced-delimited, e.g. "top left".
     * @default true
     */
    flip: boolean | string;
    /**
     * Whether the popover should slide when it overflows.
     * @default true
     */
    slide: boolean;
    /**
     * Whether the popover can overlap the anchor element when it overflows.
     * @default false
     */
    overlap: boolean;
    /**
     * Whether the popover should have the same width as the anchor element. This
     * will be exposed to CSS as `--popover-anchor-width`.
     * @default false
     */
    sameWidth: boolean;
    /**
     * Whether the popover should fit the viewport. If this is set to true, the
     * popover wrapper will have `maxWidth` and `maxHeight` set to the viewport
     * size. This will be exposed to CSS as `--popover-available-width` and
     * `--popover-available-height`.
     * @default false
     */
    fitViewport: boolean;
    /**
     * The minimum padding between the arrow and the popover corner.
     * @default 4
     */
    arrowPadding: number;
    /**
     * The minimum padding between the popover and the viewport edge. This will be
     * exposed to CSS as `--popover-overflow-padding`.
     * @default 8
     */
    overflowPadding: number;
}
export interface PopoverStoreFunctions extends DialogStoreFunctions {
    /**
     * Sets the anchor element.
     */
    setAnchorElement: SetState<PopoverStoreState["anchorElement"]>;
    /**
     * Sets the popover element.
     */
    setPopoverElement: SetState<PopoverStoreState["popoverElement"]>;
    /**
     * Sets the arrow element.
     */
    setArrowElement: SetState<PopoverStoreState["arrowElement"]>;
    /**
     * Function that returns the anchor element's DOMRect. If this is explicitly
     * passed, it will override the anchor `getBoundingClientRect` method.
     * @param anchor The anchor element.
     */
    getAnchorRect?: (anchor: HTMLElement | null) => AnchorRect | null;
    /**
     * A function that will be called when the popover needs to calculate its
     * styles. It will override the internal behavior.
     */
    renderCallback?: (props: PopoverStoreRenderCallbackProps) => void | (() => void);
    /**
     * A function that can be used to recompute the popover styles. This is useful
     * when the popover anchor changes in a way that affects the popover position.
     */
    render: () => void;
}
export interface PopoverStoreOptions extends StoreOptions<PopoverStoreState, "placement" | "fixed" | "gutter" | "shift" | "flip" | "slide" | "overlap" | "sameWidth" | "fitViewport" | "arrowPadding" | "overflowPadding">, Partial<Pick<PopoverStoreFunctions, "getAnchorRect" | "renderCallback">>, DialogStoreOptions {
    /**
     * A reference to another popover store that's controlling another popover to
     * keep them in sync.
     */
    popover?: PopoverStore;
}
export type PopoverStoreProps = PopoverStoreOptions & StoreProps<PopoverStoreState>;
export type PopoverStore = PopoverStoreFunctions & Store<PopoverStoreState>;
export {};
