import {
  usePopoverAnchor
} from "../__chunks/D6NPK2DL.js";
import {
  useComposite
} from "../__chunks/OY5YT7OV.js";
import "../__chunks/OXPV2NBK.js";
import "../__chunks/AGWM73EZ.js";
import "../__chunks/BMLNRUFQ.js";
import "../__chunks/Z3X3QN6P.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/5ETIGB6O.js";
import {
  useBooleanEvent,
  useEvent,
  useForceUpdate,
  useForkRef,
  useId,
  useSafeLayoutEffect,
  useUpdateEffect,
  useUpdateLayoutEffect
} from "../__chunks/ASYR66PQ.js";
import "../__chunks/SXC6BPOF.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/4BKCJXBM.js";

// src/combobox/combobox.ts
import { useEffect, useMemo, useRef, useState } from "react";
import { getPopupRole } from "@ariakit/core/utils/dom";
import {
  isFocusEventOutside,
  queueBeforeEvent
} from "@ariakit/core/utils/events";
import { normalizeString } from "@ariakit/core/utils/misc";
function isFirstItemAutoSelected(items, activeValue, autoSelect) {
  if (!autoSelect)
    return false;
  const firstItem = items.find((item) => !item.disabled && item.value);
  return (firstItem == null ? void 0 : firstItem.value) === activeValue;
}
function hasCompletionString(value, activeValue) {
  if (!activeValue)
    return false;
  if (value == null)
    return false;
  value = normalizeString(value);
  return activeValue.length > value.length && activeValue.toLowerCase().indexOf(value.toLowerCase()) === 0;
}
function isInputEvent(event) {
  return event.type === "input";
}
var useCombobox = createHook(
  (_a) => {
    var _b = _a, {
      store,
      focusable = true,
      autoSelect: autoSelectProp = false,
      showOnChange = true,
      setValueOnChange = true,
      showOnMouseDown = true,
      setValueOnClick = true,
      showOnKeyDown = true,
      moveOnKeyPress = true,
      autoComplete = "list"
    } = _b, props = __objRest(_b, [
      "store",
      "focusable",
      "autoSelect",
      "showOnChange",
      "setValueOnChange",
      "showOnMouseDown",
      "setValueOnClick",
      "showOnKeyDown",
      "moveOnKeyPress",
      "autoComplete"
    ]);
    const ref = useRef(null);
    const [valueUpdated, forceValueUpdate] = useForceUpdate();
    const valueChangedRef = useRef(false);
    const composingRef = useRef(false);
    const autoSelect = store.useState(
      (state) => !!autoSelectProp && state.virtualFocus
    );
    const inline = autoComplete === "inline" || autoComplete === "both";
    const [canInline, setCanInline] = useState(inline);
    useUpdateLayoutEffect(() => {
      if (!inline)
        return;
      setCanInline(true);
    }, [inline]);
    const storeValue = store.useState("value");
    const activeValue = store.useState(
      (state) => inline && canInline ? state.activeValue : void 0
    );
    const items = store.useState("renderedItems");
    const open = store.useState("open");
    const value = useMemo(() => {
      if (!inline)
        return storeValue;
      if (!canInline)
        return storeValue;
      const firstItemAutoSelected = isFirstItemAutoSelected(
        items,
        activeValue,
        autoSelect
      );
      if (firstItemAutoSelected) {
        if (hasCompletionString(storeValue, activeValue)) {
          const slice = (activeValue == null ? void 0 : activeValue.slice(storeValue.length)) || "";
          return storeValue + slice;
        }
        return storeValue;
      }
      return activeValue || storeValue;
    }, [inline, canInline, items, activeValue, autoSelect, storeValue]);
    useEffect(() => {
      const element = ref.current;
      if (!element)
        return;
      const onCompositeItemMove = () => setCanInline(true);
      element.addEventListener("combobox-item-move", onCompositeItemMove);
      return () => {
        element.removeEventListener("combobox-item-move", onCompositeItemMove);
      };
    }, []);
    useEffect(() => {
      if (!inline)
        return;
      if (!canInline)
        return;
      if (!activeValue)
        return;
      const firstItemAutoSelected = isFirstItemAutoSelected(
        items,
        activeValue,
        autoSelect
      );
      if (!firstItemAutoSelected)
        return;
      if (!hasCompletionString(storeValue, activeValue))
        return;
      queueMicrotask(() => {
        const element = ref.current;
        if (!element)
          return;
        element.setSelectionRange(storeValue.length, activeValue.length);
      });
    }, [
      valueUpdated,
      inline,
      canInline,
      activeValue,
      items,
      autoSelect,
      storeValue
    ]);
    useSafeLayoutEffect(() => {
      if (!storeValue)
        return;
      if (composingRef.current)
        return;
      valueChangedRef.current = true;
    }, [storeValue]);
    useSafeLayoutEffect(() => {
      if (open)
        return;
      valueChangedRef.current = false;
    }, [open]);
    useUpdateEffect(() => {
      var _a2;
      if (!autoSelect)
        return;
      if (!valueChangedRef.current)
        return;
      store.move((_a2 = store.first()) != null ? _a2 : null);
    }, [store, valueUpdated, storeValue, autoSelect, items]);
    useSafeLayoutEffect(() => {
      if (autoSelect)
        return;
      store.setActiveId(null);
    }, [valueUpdated, autoSelect, store]);
    const contentElement = store.useState("contentElement");
    useEffect(() => {
      if (!inline)
        return;
      const combobox = ref.current;
      if (!combobox)
        return;
      const elements = [combobox, contentElement].filter(Boolean);
      const onBlur2 = (event) => {
        if (elements.every((el) => isFocusEventOutside(event, el))) {
          store.setValue(value);
        }
      };
      elements.forEach((el) => el == null ? void 0 : el.addEventListener("focusout", onBlur2));
      return () => {
        elements.forEach((el) => el == null ? void 0 : el.removeEventListener("focusout", onBlur2));
      };
    }, [inline, contentElement, store, value]);
    const onChangeProp = props.onChange;
    const showOnChangeProp = useBooleanEvent(showOnChange);
    const setValueOnChangeProp = useBooleanEvent(setValueOnChange);
    const onChange = useEvent((event) => {
      onChangeProp == null ? void 0 : onChangeProp(event);
      if (event.defaultPrevented)
        return;
      const { target } = event;
      const nativeEvent = event.nativeEvent;
      valueChangedRef.current = true;
      if (isInputEvent(nativeEvent)) {
        if (nativeEvent.isComposing) {
          valueChangedRef.current = false;
          composingRef.current = true;
        }
        if (inline) {
          const textInserted = nativeEvent.inputType === "insertText" || nativeEvent.inputType === "insertCompositionText";
          const caretAtEnd = target.selectionStart === target.value.length;
          setCanInline(textInserted && caretAtEnd);
        }
      }
      if (showOnChangeProp(event)) {
        store.show();
      }
      if (setValueOnChangeProp(event)) {
        store.setValue(target.value);
      }
      if (inline && autoSelect) {
        forceValueUpdate();
      }
      if (!autoSelect || !valueChangedRef.current) {
        store.setActiveId(null);
      }
    });
    const onCompositionEndProp = props.onCompositionEnd;
    const onCompositionEnd = useEvent(
      (event) => {
        onCompositionEndProp == null ? void 0 : onCompositionEndProp(event);
        if (event.defaultPrevented)
          return;
        valueChangedRef.current = true;
        composingRef.current = false;
        if (!autoSelect)
          return;
        forceValueUpdate();
      }
    );
    const onMouseDownProp = props.onMouseDown;
    const setValueOnClickProp = useBooleanEvent(setValueOnClick);
    const showOnMouseDownProp = useBooleanEvent(showOnMouseDown);
    const onMouseDown = useEvent((event) => {
      onMouseDownProp == null ? void 0 : onMouseDownProp(event);
      if (event.defaultPrevented)
        return;
      if (event.button)
        return;
      if (event.ctrlKey)
        return;
      store.setActiveId(null);
      if (setValueOnClickProp(event)) {
        store.setValue(value);
      }
      if (showOnMouseDownProp(event)) {
        queueBeforeEvent(event.currentTarget, "mouseup", store.show);
      }
    });
    const onKeyDownProp = props.onKeyDown;
    const showOnKeyDownProp = useBooleanEvent(showOnKeyDown);
    const onKeyDown = useEvent(
      (event) => {
        onKeyDownProp == null ? void 0 : onKeyDownProp(event);
        if (event.defaultPrevented)
          return;
        valueChangedRef.current = false;
        if (event.ctrlKey)
          return;
        if (event.altKey)
          return;
        if (event.shiftKey)
          return;
        if (event.metaKey)
          return;
        const { open: open2, activeId } = store.getState();
        if (open2)
          return;
        if (activeId !== null)
          return;
        if (event.key === "ArrowUp" || event.key === "ArrowDown") {
          if (showOnKeyDownProp(event)) {
            event.preventDefault();
            store.show();
          }
        }
      }
    );
    const onBlurProp = props.onBlur;
    const onBlur = useEvent((event) => {
      onBlurProp == null ? void 0 : onBlurProp(event);
      if (event.defaultPrevented)
        return;
      valueChangedRef.current = false;
    });
    const id = useId(props.id);
    props = __spreadProps(__spreadValues({
      id,
      role: "combobox",
      "aria-autocomplete": autoComplete,
      "aria-haspopup": getPopupRole(contentElement, "listbox"),
      "aria-expanded": open,
      "aria-controls": contentElement == null ? void 0 : contentElement.id,
      value
    }, props), {
      ref: useForkRef(ref, props.ref),
      onChange,
      onCompositionEnd,
      onMouseDown,
      onKeyDown,
      onBlur
    });
    const moveOnKeyPressProp = useBooleanEvent(moveOnKeyPress);
    props = useComposite(__spreadProps(__spreadValues({
      store,
      focusable
    }, props), {
      // Enable inline autocomplete when the user moves from the combobox input
      // to an item.
      moveOnKeyPress: (event) => {
        if (!moveOnKeyPressProp(event))
          return false;
        if (inline)
          setCanInline(true);
        return true;
      }
    }));
    props = usePopoverAnchor(__spreadValues({ store }, props));
    return __spreadValues({ autoComplete: "off" }, props);
  }
);
var Combobox = createComponent((props) => {
  const htmlProps = useCombobox(props);
  return createElement("input", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Combobox.displayName = "Combobox";
}
export {
  Combobox,
  useCombobox
};
