import {
  ToolbarContext
} from "../__chunks/DFUIIKXE.js";
import {
  useComposite
} from "../__chunks/OY5YT7OV.js";
import "../__chunks/OXPV2NBK.js";
import "../__chunks/AGWM73EZ.js";
import "../__chunks/BMLNRUFQ.js";
import "../__chunks/Z3X3QN6P.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/5ETIGB6O.js";
import {
  useWrapElement
} from "../__chunks/ASYR66PQ.js";
import "../__chunks/SXC6BPOF.js";
import {
  __objRest,
  __spreadValues
} from "../__chunks/4BKCJXBM.js";

// src/toolbar/toolbar.tsx
import { jsx } from "react/jsx-runtime";
var useToolbar = createHook((_a) => {
  var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
  const orientation = store.useState(
    (state) => state.orientation === "both" ? void 0 : state.orientation
  );
  props = useWrapElement(
    props,
    (element) => /* @__PURE__ */ jsx(ToolbarContext.Provider, { value: store, children: element }),
    [store]
  );
  props = __spreadValues({
    role: "toolbar",
    "aria-orientation": orientation
  }, props);
  props = useComposite(__spreadValues({ store }, props));
  return props;
});
var Toolbar = createComponent((props) => {
  const htmlProps = useToolbar(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Toolbar.displayName = "Toolbar";
}
export {
  Toolbar,
  useToolbar
};
