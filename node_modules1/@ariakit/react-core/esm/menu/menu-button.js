import {
  useHovercardAnchor
} from "../__chunks/65MJJ4BW.js";
import {
  MenuBarContext,
  MenuContext
} from "../__chunks/HVBRRKV4.js";
import {
  hasExpandedMenuButton
} from "../__chunks/W7JXAQKF.js";
import {
  usePopoverDisclosure
} from "../__chunks/6O3TZMB4.js";
import "../__chunks/LSTZ5Q72.js";
import "../__chunks/24P2K6AU.js";
import "../__chunks/OQUXG6FE.js";
import {
  useCompositeTypeahead
} from "../__chunks/KSVEVAMH.js";
import "../__chunks/6GS36SYX.js";
import "../__chunks/D6NPK2DL.js";
import "../__chunks/4QNHBDVS.js";
import "../__chunks/OXPV2NBK.js";
import "../__chunks/AGWM73EZ.js";
import "../__chunks/BMLNRUFQ.js";
import "../__chunks/Z3X3QN6P.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/5ETIGB6O.js";
import {
  useStoreState
} from "../__chunks/AV5WE37O.js";
import {
  useEvent,
  useForkRef,
  useId
} from "../__chunks/ASYR66PQ.js";
import "../__chunks/SXC6BPOF.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/4BKCJXBM.js";

// src/menu/menu-button.ts
import { useContext, useEffect, useRef } from "react";
import { getPopupItemRole, getPopupRole } from "@ariakit/core/utils/dom";
function getInitialFocus(event, dir) {
  const keyMap = {
    ArrowDown: dir === "bottom" || dir === "top" ? "first" : false,
    ArrowUp: dir === "bottom" || dir === "top" ? "last" : false,
    ArrowRight: dir === "right" ? "first" : false,
    ArrowLeft: dir === "left" ? "first" : false
  };
  return keyMap[event.key];
}
var useMenuButton = createHook(
  (_a) => {
    var _b = _a, { store, focusable, accessibleWhenDisabled, showOnHover } = _b, props = __objRest(_b, ["store", "focusable", "accessibleWhenDisabled", "showOnHover"]);
    const ref = useRef(null);
    const parentMenu = useContext(MenuContext);
    const parentMenuBar = useContext(MenuBarContext);
    const hasParentMenu = !!parentMenu;
    const parentIsMenuBar = !!parentMenuBar && !hasParentMenu;
    const disabled = props.disabled || props["aria-disabled"] === true || props["aria-disabled"] === "true";
    useEffect(() => {
      store.setDisclosureElement(ref.current);
    });
    const onFocusProp = props.onFocus;
    const onFocus = useEvent((event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      if (disabled)
        return;
      if (event.defaultPrevented)
        return;
      store.setAutoFocusOnShow(false);
      store.setActiveId(null);
      if (!parentMenuBar)
        return;
      if (!parentIsMenuBar)
        return;
      const { items } = parentMenuBar.getState();
      if (hasExpandedMenuButton(items, event.currentTarget)) {
        store.show();
      }
    });
    const dir = store.useState(
      (state) => state.placement.split("-")[0]
    );
    const onKeyDownProp = props.onKeyDown;
    const onKeyDown = useEvent((event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (disabled)
        return;
      if (event.defaultPrevented)
        return;
      const initialFocus = getInitialFocus(event, dir);
      if (initialFocus) {
        event.preventDefault();
        store.show();
        store.setAutoFocusOnShow(true);
        store.setInitialFocus(initialFocus);
      }
    });
    const onClickProp = props.onClick;
    const onClick = useEvent((event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      const isKeyboardClick = !event.detail;
      const { open } = store.getState();
      if (!open || isKeyboardClick) {
        if (!hasParentMenu || isKeyboardClick) {
          store.setAutoFocusOnShow(true);
        }
        store.setInitialFocus(isKeyboardClick ? "first" : "container");
      }
      if (hasParentMenu) {
        store.show();
      }
    });
    if (hasParentMenu) {
      props = __spreadValues({ as: "div" }, props);
    }
    const id = useId(props.id);
    const parentContentElement = useStoreState(parentMenu, "contentElement");
    const role = hasParentMenu || parentIsMenuBar ? getPopupItemRole(parentContentElement, "menuitem") : void 0;
    const contentElement = store.useState("contentElement");
    props = __spreadProps(__spreadValues({
      id,
      role,
      "aria-haspopup": getPopupRole(contentElement, "menu")
    }, props), {
      ref: useForkRef(ref, props.ref),
      onFocus,
      onKeyDown,
      onClick
    });
    props = useHovercardAnchor(__spreadProps(__spreadValues({
      store,
      focusable,
      accessibleWhenDisabled
    }, props), {
      showOnHover: (event) => {
        if (typeof showOnHover === "function")
          return showOnHover(event);
        if (showOnHover != null)
          return showOnHover;
        if (hasParentMenu)
          return true;
        if (!parentMenuBar)
          return false;
        const { items } = parentMenuBar.getState();
        return parentIsMenuBar && hasExpandedMenuButton(items);
      }
    }));
    props = usePopoverDisclosure(__spreadValues({
      store,
      toggleOnClick: !hasParentMenu,
      focusable,
      accessibleWhenDisabled
    }, props));
    props = useCompositeTypeahead(__spreadValues({
      store,
      typeahead: parentIsMenuBar
    }, props));
    return props;
  }
);
var MenuButton = createComponent((props) => {
  const htmlProps = useMenuButton(props);
  return createElement("button", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  MenuButton.displayName = "MenuButton";
}
export {
  MenuButton,
  useMenuButton
};
