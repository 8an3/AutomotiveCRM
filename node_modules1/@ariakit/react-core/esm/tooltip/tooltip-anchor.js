import {
  usePopoverAnchor
} from "../__chunks/D6NPK2DL.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/5ETIGB6O.js";
import {
  useEvent
} from "../__chunks/ASYR66PQ.js";
import "../__chunks/SXC6BPOF.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/4BKCJXBM.js";

// src/tooltip/tooltip-anchor.ts
var useTooltipAnchor = createHook(
  (_a) => {
    var _b = _a, { store, described } = _b, props = __objRest(_b, ["store", "described"]);
    const onFocusProp = props.onFocus;
    const onFocus = useEvent((event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      if (event.defaultPrevented)
        return;
      store.setAnchorElement(event.currentTarget);
      store.show();
    });
    const onBlurProp = props.onBlur;
    const onBlur = useEvent((event) => {
      onBlurProp == null ? void 0 : onBlurProp(event);
      if (event.defaultPrevented)
        return;
      store.hide();
    });
    const onMouseEnterProp = props.onMouseEnter;
    const onMouseEnter = useEvent((event) => {
      onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);
      if (event.defaultPrevented)
        return;
      store.setAnchorElement(event.currentTarget);
      store.show();
    });
    const onMouseLeaveProp = props.onMouseLeave;
    const onMouseLeave = useEvent((event) => {
      onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);
      if (event.defaultPrevented)
        return;
      store.hide();
    });
    const contentElement = store.useState("contentElement");
    props = __spreadProps(__spreadValues({
      tabIndex: 0,
      "aria-labelledby": !described ? contentElement == null ? void 0 : contentElement.id : void 0,
      "aria-describedby": described ? contentElement == null ? void 0 : contentElement.id : void 0
    }, props), {
      onFocus,
      onBlur,
      onMouseEnter,
      onMouseLeave
    });
    props = usePopoverAnchor(__spreadValues({ store }, props));
    return props;
  }
);
var TooltipAnchor = createComponent((props) => {
  const htmlProps = useTooltipAnchor(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  TooltipAnchor.displayName = "TooltipAnchor";
}
export {
  TooltipAnchor,
  useTooltipAnchor
};
