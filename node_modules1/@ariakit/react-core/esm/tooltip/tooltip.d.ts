import type { HTMLAttributes } from "react";
import type { BooleanOrCallback } from "@ariakit/core/utils/types";
import type { DisclosureContentOptions } from "../disclosure/disclosure-content.js";
import type { PortalOptions } from "../portal/portal.js";
import type { As, Props } from "../utils/types.js";
import type { TooltipStore } from "./tooltip-store.js";
/**
 * Returns props to create a `Tooltip` component.
 * @see https://ariakit.org/components/tooltip
 * @example
 * ```jsx
 * const store = useToolTipStore();
 * const props = useTooltip({ store });
 * <TooltipAnchor store={store}>Anchor</TooltipAnchor>
 * <Role {...props}>Tooltip</Role>
 * ```
 */
export declare const useTooltip: import("../utils/types.js").Hook<TooltipOptions<"div">>;
/**
 * Renders a tooltip element.
 * @see https://ariakit.org/components/tooltip
 * @example
 * ```jsx
 * const tooltip = useTooltipStore();
 * <TooltipAnchor store={tooltip}>Anchor</TooltipAnchor>
 * <Tooltip store={tooltip}>Tooltip</Tooltip>
 * ```
 */
export declare const Tooltip: import("../utils/types.js").Component<TooltipOptions<"div">>;
export interface TooltipOptions<T extends As = "div"> extends DisclosureContentOptions<T>, Omit<PortalOptions<T>, "preserveTabOrder"> {
    /**
     * Object returned by the `useTooltipStore` hook.
     */
    store: TooltipStore;
    /**
     * Determines whether the tooltip will be hidden when the user presses the
     * Escape key.
     * @default true
     */
    hideOnEscape?: BooleanOrCallback<KeyboardEvent>;
    /**
     * Determines whether the tooltip will be hidden when the user presses the
     * Control key. This has been proposed as an alternative to the Escape key,
     * which may introduce some issues, especially when tooltips are used within
     * dialogs that also hide on Escape. See
     * https://github.com/w3c/aria-practices/issues/1506
     * @default false
     */
    hideOnControl?: BooleanOrCallback<KeyboardEvent>;
    /**
     * Props that will be passed to the popover wrapper element. This element
     * will be used to position the popover.
     */
    wrapperProps?: HTMLAttributes<HTMLDivElement>;
}
export type TooltipProps<T extends As = "div"> = Props<TooltipOptions<T>>;
