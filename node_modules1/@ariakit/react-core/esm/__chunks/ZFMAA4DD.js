import {
  markAncestor
} from "./BH4YAZB2.js";
import {
  useDisclosureContent
} from "./6AJCHLAV.js";
import {
  useForkRef,
  useSafeLayoutEffect
} from "./ASYR66PQ.js";
import {
  __spreadProps,
  __spreadValues
} from "./4BKCJXBM.js";

// src/dialog/dialog-backdrop.tsx
import { useMemo, useRef } from "react";
import { noop } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
function DialogBackdrop({
  store,
  backdrop,
  backdropProps,
  hidden,
  children
}) {
  const ref = useRef(null);
  store = useMemo(
    () => __spreadProps(__spreadValues({}, store), {
      // Override the setContentElement method to prevent the backdrop from
      // overwriting the dialog's content element. TODO: Refactor this.
      setContentElement: noop
    }),
    [store]
  );
  const contentElement = store.useState("contentElement");
  useSafeLayoutEffect(() => {
    const backdrop2 = ref.current;
    const dialog = contentElement;
    if (!backdrop2)
      return;
    if (!dialog)
      return;
    backdrop2.style.zIndex = getComputedStyle(dialog).zIndex;
  }, [contentElement]);
  useSafeLayoutEffect(() => {
    const id = contentElement == null ? void 0 : contentElement.id;
    if (!id)
      return;
    const backdrop2 = ref.current;
    if (!backdrop2)
      return;
    return markAncestor(backdrop2, id);
  }, [contentElement]);
  const props = useDisclosureContent(__spreadProps(__spreadValues({
    store,
    id: void 0,
    role: "presentation",
    hidden
  }, backdropProps), {
    ref: useForkRef(backdropProps == null ? void 0 : backdropProps.ref, ref),
    style: __spreadValues({
      position: "fixed",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }, backdropProps == null ? void 0 : backdropProps.style)
  }));
  const Component = typeof backdrop !== "boolean" ? backdrop || "div" : "div";
  return /* @__PURE__ */ jsx(Component, __spreadProps(__spreadValues({}, props), { "data-backdrop": (contentElement == null ? void 0 : contentElement.id) || "", children }));
}

export {
  DialogBackdrop
};
