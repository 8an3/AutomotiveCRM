import {
  CompositeContext,
  CompositeRowContext
} from "./Z3X3QN6P.js";
import {
  createComponent,
  createElement,
  createHook
} from "./5ETIGB6O.js";
import {
  useId,
  useWrapElement
} from "./ASYR66PQ.js";
import {
  __objRest,
  __spreadValues
} from "./4BKCJXBM.js";

// src/composite/composite-row.tsx
import { useContext, useMemo } from "react";
import { invariant } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
var useCompositeRow = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const context = useContext(CompositeContext);
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "CompositeRow must be wrapped in a Composite component"
    );
    const id = useId(props.id);
    const baseElement = store.useState(
      (state) => state.baseElement || void 0
    );
    const providerValue = useMemo(
      () => ({ id, baseElement }),
      [id, baseElement]
    );
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(CompositeRowContext.Provider, { value: providerValue, children: element }),
      [providerValue]
    );
    props = __spreadValues({ id }, props);
    return props;
  }
);
var CompositeRow = createComponent((props) => {
  const htmlProps = useCompositeRow(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  CompositeRow.displayName = "CompositeRow";
}

export {
  useCompositeRow,
  CompositeRow
};
