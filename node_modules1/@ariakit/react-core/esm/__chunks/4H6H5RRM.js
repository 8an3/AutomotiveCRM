import {
  hideElementFromAccessibilityTree
} from "./7A3SODQV.js";
import {
  supportsInert
} from "./KOVUJERF.js";
import {
  assignStyle,
  setAttribute,
  setProperty
} from "./DJESYNLE.js";
import {
  walkTreeOutside
} from "./ISPCL6N4.js";

// src/dialog/utils/disable-tree-outside.ts
import { contains } from "@ariakit/core/utils/dom";
import { getAllTabbable } from "@ariakit/core/utils/focus";
import { chain, noop } from "@ariakit/core/utils/misc";
function disableElement(element) {
  if (!("style" in element))
    return noop;
  if (supportsInert()) {
    return setProperty(element, "inert", true);
  }
  return chain(
    hideElementFromAccessibilityTree(element),
    assignStyle(element, {
      pointerEvents: "none",
      userSelect: "none",
      cursor: "default"
    })
  );
}
function disableTreeOutside(...elements) {
  const cleanups = [];
  if (!supportsInert()) {
    getAllTabbable().forEach((element) => {
      if (elements.some((el) => el && contains(el, element)))
        return;
      cleanups.unshift(setAttribute(element, "tabindex", "-1"));
    });
  }
  walkTreeOutside(elements, (element) => {
    cleanups.unshift(disableElement(element));
  });
  const restoreTreeOutside = () => {
    cleanups.forEach((fn) => fn());
  };
  return restoreTreeOutside;
}

export {
  disableTreeOutside
};
