"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _2DVMVYK2cjs = require('../__chunks/2DVMVYK2.cjs');
require('../__chunks/DASOL6J2.cjs');
require('../__chunks/NVBNDB5B.cjs');
require('../__chunks/LHHW5ZQP.cjs');




var _7NAIPZYNcjs = require('../__chunks/7NAIPZYN.cjs');


var _NREUHWTUcjs = require('../__chunks/NREUHWTU.cjs');
require('../__chunks/2X5K3J7Y.cjs');




var _6455U47Tcjs = require('../__chunks/6455U47T.cjs');

// src/combobox/combobox-cancel.tsx
var _jsxruntime = require('react/jsx-runtime');
var children = /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
  "svg",
  {
    "aria-hidden": "true",
    display: "block",
    viewBox: "0 0 16 16",
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "1pt",
    width: "1em",
    height: "1em",
    pointerEvents: "none",
    children: [
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "line", { x1: "5", y1: "5", x2: "11", y2: "11" }),
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "line", { x1: "5", y1: "11", x2: "11", y2: "5" })
    ]
  }
);
var useComboboxCancel = _7NAIPZYNcjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, { store } = _b, props = _6455U47Tcjs.__objRest.call(void 0, _b, ["store"]);
    const onClickProp = props.onClick;
    const onClick = _NREUHWTUcjs.useEvent.call(void 0, (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      store.setValue("");
      store.move(null);
    });
    const comboboxId = store.useState((state) => {
      var _a2;
      return (_a2 = state.baseElement) == null ? void 0 : _a2.id;
    });
    props = _6455U47Tcjs.__spreadProps.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, {
      children,
      "aria-label": "Clear input",
      // This aria-controls will ensure the combobox popup remains visible when
      // this element gets focused. This logic is done in the ComboboxPopover
      // component.
      "aria-controls": comboboxId
    }, props), {
      onClick
    });
    props = _2DVMVYK2cjs.useButton.call(void 0, props);
    return props;
  }
);
var ComboboxCancel = _7NAIPZYNcjs.createComponent.call(void 0, 
  (props) => {
    const htmlProps = useComboboxCancel(props);
    return _7NAIPZYNcjs.createElement.call(void 0, "button", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  ComboboxCancel.displayName = "ComboboxCancel";
}



exports.ComboboxCancel = ComboboxCancel; exports.useComboboxCancel = useComboboxCancel;
