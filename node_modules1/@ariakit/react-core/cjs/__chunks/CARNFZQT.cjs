"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _NR3SJH64cjs = require('./NR3SJH64.cjs');


var _EE6OIU6Xcjs = require('./EE6OIU6X.cjs');

// src/dialog/utils/mark-tree-outside.ts
var _misc = require('@ariakit/core/utils/misc');
function getPropertyName(id = "", ancestor = false) {
  return `__ariakit-dialog-${ancestor ? "ancestor" : "outside"}${id ? `-${id}` : ""}`;
}
function markElement(element, id = "") {
  return _misc.chain.call(void 0, 
    _NR3SJH64cjs.setProperty.call(void 0, element, getPropertyName(), true),
    _NR3SJH64cjs.setProperty.call(void 0, element, getPropertyName(id), true)
  );
}
function markAncestor(element, id = "") {
  return _misc.chain.call(void 0, 
    _NR3SJH64cjs.setProperty.call(void 0, element, getPropertyName("", true), true),
    _NR3SJH64cjs.setProperty.call(void 0, element, getPropertyName(id, true), true)
  );
}
function isElementMarked(element, id) {
  const ancestorProperty = getPropertyName(id, true);
  if (element[ancestorProperty])
    return true;
  const elementProperty = getPropertyName(id);
  do {
    if (element[elementProperty])
      return true;
    if (!element.parentElement)
      return false;
    element = element.parentElement;
  } while (true);
}
function markTreeOutside(dialogId, ...elements) {
  const cleanups = [];
  _EE6OIU6Xcjs.walkTreeOutside.call(void 0, 
    elements,
    (element) => cleanups.unshift(markElement(element, dialogId)),
    (ancestor) => cleanups.unshift(markAncestor(ancestor, dialogId))
  );
  const restoreAccessibilityTree = () => {
    cleanups.forEach((fn) => fn());
  };
  return restoreAccessibilityTree;
}






exports.markElement = markElement; exports.markAncestor = markAncestor; exports.isElementMarked = isElementMarked; exports.markTreeOutside = markTreeOutside;
