"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _OTRABJ4Ycjs = require('../__chunks/OTRABJ4Y.cjs');




var _7NAIPZYNcjs = require('../__chunks/7NAIPZYN.cjs');







var _NREUHWTUcjs = require('../__chunks/NREUHWTU.cjs');
require('../__chunks/2X5K3J7Y.cjs');




var _6455U47Tcjs = require('../__chunks/6455U47T.cjs');

// src/form/form.tsx
var _react = require('react');
var _dom = require('@ariakit/core/utils/dom');
var _jsxruntime = require('react/jsx-runtime');
function isField(element, items) {
  return items.some(
    (item) => item.type === "field" && item.element === element
  );
}
function getFirstInvalidField(items) {
  return items.find(
    (item) => {
      var _a;
      return item.type === "field" && ((_a = item.element) == null ? void 0 : _a.getAttribute("aria-invalid")) === "true";
    }
  );
}
var useForm = _7NAIPZYNcjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, {
      store,
      validateOnChange = true,
      validateOnBlur = true,
      resetOnUnmount = false,
      resetOnSubmit = true,
      autoFocusOnSubmit = true
    } = _b, props = _6455U47Tcjs.__objRest.call(void 0, _b, [
      "store",
      "validateOnChange",
      "validateOnBlur",
      "resetOnUnmount",
      "resetOnSubmit",
      "autoFocusOnSubmit"
    ]);
    const ref = _react.useRef.call(void 0, null);
    const values = store.useState("values");
    const submitSucceed = store.useState("submitSucceed");
    const submitFailed = store.useState("submitFailed");
    const items = store.useState("items");
    const defaultValues = _NREUHWTUcjs.useInitialValue.call(void 0, values);
    _react.useEffect.call(void 0, 
      () => resetOnUnmount ? store.reset : void 0,
      [resetOnUnmount, store.reset]
    );
    _NREUHWTUcjs.useUpdateEffect.call(void 0, () => {
      if (!validateOnChange)
        return;
      if (values === defaultValues)
        return;
      store.validate();
    }, [validateOnChange, values, defaultValues, store]);
    _react.useEffect.call(void 0, () => {
      if (!resetOnSubmit)
        return;
      if (!submitSucceed)
        return;
      store.reset();
    }, [resetOnSubmit, submitSucceed, store]);
    const [shouldFocusOnSubmit, setShouldFocusOnSubmit] = _react.useState.call(void 0, false);
    _react.useEffect.call(void 0, () => {
      if (!shouldFocusOnSubmit)
        return;
      if (!submitFailed)
        return;
      const field = getFirstInvalidField(items);
      const element = field == null ? void 0 : field.element;
      if (!element)
        return;
      setShouldFocusOnSubmit(false);
      element.focus();
      if (_dom.isTextField.call(void 0, element)) {
        element.select();
      }
    }, [autoFocusOnSubmit, submitFailed, items]);
    const onSubmitProp = props.onSubmit;
    const onSubmit = _NREUHWTUcjs.useEvent.call(void 0, (event) => {
      onSubmitProp == null ? void 0 : onSubmitProp(event);
      if (event.defaultPrevented)
        return;
      event.preventDefault();
      store.submit();
      if (!autoFocusOnSubmit)
        return;
      setShouldFocusOnSubmit(true);
    });
    const onBlurProp = props.onBlur;
    const onBlur = _NREUHWTUcjs.useEvent.call(void 0, (event) => {
      onBlurProp == null ? void 0 : onBlurProp(event);
      if (event.defaultPrevented)
        return;
      if (!validateOnBlur)
        return;
      if (!isField(event.target, store.getState().items))
        return;
      store.validate();
    });
    const onResetProp = props.onReset;
    const onReset = _NREUHWTUcjs.useEvent.call(void 0, (event) => {
      onResetProp == null ? void 0 : onResetProp(event);
      if (event.defaultPrevented)
        return;
      event.preventDefault();
      store.reset();
    });
    props = _NREUHWTUcjs.useWrapElement.call(void 0, 
      props,
      (element) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, _OTRABJ4Ycjs.FormContext.Provider, { value: store, children: element }),
      [store]
    );
    const tagName = _NREUHWTUcjs.useTagName.call(void 0, ref, props.as || "form");
    props = _6455U47Tcjs.__spreadProps.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, {
      role: tagName !== "form" ? "form" : void 0,
      noValidate: true
    }, props), {
      ref: _NREUHWTUcjs.useForkRef.call(void 0, ref, props.ref),
      onSubmit,
      onBlur,
      onReset
    });
    return props;
  }
);
var Form = _7NAIPZYNcjs.createComponent.call(void 0, (props) => {
  const htmlProps = useForm(props);
  return _7NAIPZYNcjs.createElement.call(void 0, "form", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Form.displayName = "Form";
}



exports.Form = Form; exports.useForm = useForm;
