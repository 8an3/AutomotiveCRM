"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _OTRABJ4Ycjs = require('../__chunks/OTRABJ4Y.cjs');


var _3FTPSHLHcjs = require('../__chunks/3FTPSHLH.cjs');
require('../__chunks/ZQAFJQIS.cjs');




var _7NAIPZYNcjs = require('../__chunks/7NAIPZYN.cjs');





var _NREUHWTUcjs = require('../__chunks/NREUHWTU.cjs');
require('../__chunks/2X5K3J7Y.cjs');




var _6455U47Tcjs = require('../__chunks/6455U47T.cjs');

// src/form/form-label.ts
var _react = require('react');
var _focus = require('@ariakit/core/utils/focus');
var _misc = require('@ariakit/core/utils/misc');
function supportsNativeLabel(tagName) {
  return tagName === "input" || tagName === "textarea" || tagName === "select" || tagName === "meter" || tagName === "progress";
}
var useFormLabel = _7NAIPZYNcjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, { store, name: nameProp, getItem: getItemProp } = _b, props = _6455U47Tcjs.__objRest.call(void 0, _b, ["store", "name", "getItem"]);
    const context = _react.useContext.call(void 0, _OTRABJ4Ycjs.FormContext);
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "FormLabel must be wrapped in a Form component"
    );
    const id = _NREUHWTUcjs.useId.call(void 0, props.id);
    const ref = _react.useRef.call(void 0, null);
    const name = `${nameProp}`;
    const getItem = _react.useCallback.call(void 0, 
      (item) => {
        const nextItem = _6455U47Tcjs.__spreadProps.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, {}, item), { id: id || item.id, name, type: "label" });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [id, name, getItemProp]
    );
    const field = store.useState(
      (state) => state.items.find((item) => item.type === "field" && item.name === name)
    );
    const fieldTagName = _NREUHWTUcjs.useTagName.call(void 0, field == null ? void 0 : field.element, "input");
    const isNativeLabel = supportsNativeLabel(fieldTagName);
    const onClickProp = props.onClick;
    const onClick = _NREUHWTUcjs.useEvent.call(void 0, (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (isNativeLabel)
        return;
      const fieldElement = field == null ? void 0 : field.element;
      if (!fieldElement)
        return;
      queueMicrotask(() => {
        const focusableElement = _focus.getFirstTabbableIn.call(void 0, fieldElement, true, true);
        focusableElement == null ? void 0 : focusableElement.focus();
        focusableElement == null ? void 0 : focusableElement.click();
      });
    });
    props = _6455U47Tcjs.__spreadProps.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, {
      id,
      // @ts-expect-error
      as: isNativeLabel ? "label" : "span",
      htmlFor: isNativeLabel ? field == null ? void 0 : field.id : void 0
    }, props), {
      ref: _NREUHWTUcjs.useForkRef.call(void 0, ref, props.ref),
      onClick
    });
    if (!isNativeLabel) {
      props = _6455U47Tcjs.__spreadProps.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, {}, props), {
        style: _6455U47Tcjs.__spreadValues.call(void 0, {
          cursor: "default"
        }, props.style)
      });
    }
    props = _3FTPSHLHcjs.useCollectionItem.call(void 0, _6455U47Tcjs.__spreadProps.call(void 0, _6455U47Tcjs.__spreadValues.call(void 0, { store }, props), { getItem }));
    return props;
  }
);
var FormLabel = _7NAIPZYNcjs.createMemoComponent.call(void 0, (props) => {
  const htmlProps = useFormLabel(props);
  return _7NAIPZYNcjs.createElement.call(void 0, "label", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  FormLabel.displayName = "FormLabel";
}



exports.FormLabel = FormLabel; exports.useFormLabel = useFormLabel;
