import { z } from 'zod';
import type { LoaderArgs } from '@remix-run/server-runtime';
import type { output, SafeParseReturnType, ZodObject, ZodRawShape, ZodTypeAny } from 'zod';
declare type Params = LoaderArgs['params'];
declare type Options<Parser = SearchParamsParser> = {
    /** Custom error message for when the validation fails. */
    message?: string;
    /** Status code for thrown request when validation fails. */
    status?: number;
    /** Custom URLSearchParams parsing function. */
    parser?: Parser;
};
/**
 * Generic return type for parseX functions.
 */
declare type ParsedData<T extends ZodRawShape | ZodTypeAny> = T extends ZodTypeAny ? output<T> : T extends ZodRawShape ? output<ZodObject<T>> : never;
/**
 * Generic return type for parseXSafe functions.
 */
declare type SafeParsedData<T extends ZodRawShape | ZodTypeAny> = T extends ZodTypeAny ? SafeParseReturnType<z.infer<T>, ParsedData<T>> : T extends ZodRawShape ? SafeParseReturnType<ZodObject<T>, ParsedData<T>> : never;
/**
 * Parse and validate Params from LoaderArgs or ActionArgs. Throws an error if validation fails.
 * @param params - A Remix Params object.
 * @param schema - A Zod object shape or object schema to validate.
 * @throws {Response} - Throws an error Response if validation fails.
 */
export declare function parseParams<T extends ZodRawShape | ZodTypeAny>(params: Params, schema: T, options?: Options): ParsedData<T>;
/**
 * Parse and validate Params from LoaderArgs or ActionArgs. Doesn't throw if validation fails.
 * @param params - A Remix Params object.
 * @param schema - A Zod object shape or object schema to validate.
 * @returns {SafeParseReturnType} - An object with the parsed data or a ZodError.
 */
export declare function parseParamsSafe<T extends ZodRawShape | ZodTypeAny>(params: Params, schema: T): SafeParsedData<T>;
/**
 * Parse and validate URLSearchParams or a Request. Throws an error if validation fails.
 * @param request - A Request or URLSearchParams
 * @param schema - A Zod object shape or object schema to validate.
 * @throws {Response} - Throws an error Response if validation fails.
 */
export declare function parseQuery<T extends ZodRawShape | ZodTypeAny>(request: Request | URLSearchParams, schema: T, options?: Options): ParsedData<T>;
/**
 * Parse and validate URLSearchParams or a Request. Doesn't throw if validation fails.
 * @param request - A Request or URLSearchParams
 * @param schema - A Zod object shape or object schema to validate.
 * @returns {SafeParseReturnType} - An object with the parsed data or a ZodError.
 */
export declare function parseQuerySafe<T extends ZodRawShape | ZodTypeAny>(request: Request | URLSearchParams, schema: T, options?: Options): SafeParsedData<T>;
/**
 * Parse and validate FormData from a Request. Throws an error if validation fails.
 * @param request - A Request or FormData
 * @param schema - A Zod object shape or object schema to validate.
 * @throws {Response} - Throws an error Response if validation fails.
 */
export declare function parseForm<T extends ZodRawShape | ZodTypeAny, Parser extends SearchParamsParser<any>>(request: Request | FormData, schema: T, options?: Options<Parser>): Promise<ParsedData<T>>;
/**
 * Parse and validate FormData from a Request. Doesn't throw if validation fails.
 * @param request - A Request or FormData
 * @param schema - A Zod object shape or object schema to validate.
 * @returns {SafeParseReturnType} - An object with the parsed data or a ZodError.
 */
export declare function parseFormSafe<T extends ZodRawShape | ZodTypeAny, Parser extends SearchParamsParser<any>>(request: Request | FormData, schema: T, options?: Options<Parser>): Promise<SafeParsedData<T>>;
/**
 * The data returned from parsing a URLSearchParams object.
 */
declare type ParsedSearchParams = Record<string, string | string[]>;
/**
 * Function signature to allow for custom URLSearchParams parsing.
 */
declare type SearchParamsParser<T = ParsedSearchParams> = (searchParams: URLSearchParams) => T;
export {};
