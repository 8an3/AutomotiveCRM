import { FunctionCallHandler, Action } from '@copilotkit/shared';
import { Message, TextMessage } from '@copilotkit/runtime-client-gql';
import { CopilotApiConfig } from '../context/copilot-context.js';
import '../types/frontend-action.js';
import 'react';
import './use-tree.js';
import '../types/document-pointer.js';
import '../types/chat-suggestion-configuration.js';

type UseChatOptions = {
    /**
     * System messages of the chat. Defaults to an empty array.
     */
    initialMessages?: Message[];
    /**
     * Callback function to be called when a function call is received.
     * If the function returns a `ChatRequest` object, the request will be sent
     * automatically to the API and will be used to update the chat.
     */
    onFunctionCall?: FunctionCallHandler;
    /**
     * Function definitions to be sent to the API.
     */
    actions: Action[];
    /**
     * The CopilotKit API configuration.
     */
    copilotConfig: CopilotApiConfig;
    /**
     * The current list of messages in the chat.
     */
    messages: Message[];
    /**
     * The setState-powered method to update the chat messages.
     */
    setMessages: React.Dispatch<React.SetStateAction<Message[]>>;
    /**
     * A callback to get the latest system message.
     */
    makeSystemMessageCallback: () => TextMessage;
    /**
     * Whether the API request is in progress
     */
    isLoading: boolean;
    /**
     * setState-powered method to update the isChatLoading value
     */
    setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;
};
type UseChatHelpers = {
    /**
     * Append a user message to the chat list. This triggers the API call to fetch
     * the assistant's response.
     * @param message The message to append
     */
    append: (message: Message) => Promise<void>;
    /**
     * Reload the last AI chat response for the given chat history. If the last
     * message isn't from the assistant, it will request the API to generate a
     * new response.
     */
    reload: () => Promise<void>;
    /**
     * Abort the current request immediately, keep the generated tokens if any.
     */
    stop: () => void;
};
declare function useChat(options: UseChatOptions): UseChatHelpers;

export { UseChatHelpers, UseChatOptions, useChat };
