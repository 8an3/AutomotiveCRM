import { B as BaseMessageOutput, t as MessageStatus, s as MessageRole, T as TextMessageInput, A as ActionExecutionMessageInput, z as ResultMessageInput } from '../graphql-06ad6345.js';
import '@graphql-typed-document-node/core';

declare class Message {
    id: BaseMessageOutput["id"];
    createdAt: BaseMessageOutput["createdAt"];
    status: MessageStatus;
    constructor(props: any);
}
declare const Role: typeof MessageRole;
type MessageConstructorOptions = Partial<Message>;
type TextMessageConstructorOptions = MessageConstructorOptions & TextMessageInput;
declare class TextMessage extends Message implements TextMessageConstructorOptions {
    role: TextMessageInput["role"];
    content: TextMessageInput["content"];
    constructor(props: TextMessageConstructorOptions);
}
type ActionExecutionMessageConstructorOptions = MessageConstructorOptions & Omit<ActionExecutionMessageInput, "arguments"> & {
    arguments: Record<string, any>;
};
declare class ActionExecutionMessage extends Message implements Omit<ActionExecutionMessageInput, "arguments"> {
    name: ActionExecutionMessageInput["name"];
    arguments: Record<string, any>;
    scope: ActionExecutionMessageInput["scope"];
    constructor(props: ActionExecutionMessageConstructorOptions);
}
type ResultMessageConstructorOptions = MessageConstructorOptions & ResultMessageInput;
declare class ResultMessage extends Message implements ResultMessageConstructorOptions {
    actionExecutionId: ResultMessageInput["actionExecutionId"];
    actionName: ResultMessageInput["actionName"];
    result: ResultMessageInput["result"];
    constructor(props: ResultMessageConstructorOptions);
    static decodeResult(result: string): any;
    static encodeResult(result: any): string;
}

export { ActionExecutionMessage, Message, ResultMessage, Role, TextMessage };
