'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var formdata = require('./formdata.js');
var intent = require('./intent.js');

function parse(payload, options) {
  var submission = {
    intent: intent.getIntent(payload),
    payload: formdata.resolve(payload),
    error: {}
  };
  var command = intent.parseListCommand(submission.intent);
  if (command) {
    formdata.setValue(submission.payload, command.scope, list => {
      if (typeof list !== 'undefined' && !Array.isArray(list)) {
        throw new Error('The list command can only be applied to a list');
      }
      return intent.updateList(list !== null && list !== void 0 ? list : [], command);
    });
  }
  if (typeof (options === null || options === void 0 ? void 0 : options.resolve) === 'undefined') {
    return submission;
  }
  var result = options.resolve(submission.payload, submission.intent);
  var mergeResolveResult = resolved => {
    return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, submission), resolved);
  };
  if (result instanceof Promise) {
    return result.then(mergeResolveResult);
  }
  return mergeResolveResult(result);
}

exports.parse = parse;
