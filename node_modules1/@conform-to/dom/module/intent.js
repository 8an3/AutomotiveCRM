import { createSubmitter, requestSubmit } from './dom.js';

var INTENT = '__intent__';

/**
 *
 * @param payload
 * @returns
 */
function getIntent(payload) {
  if (!payload.has(INTENT)) {
    return 'submit';
  }
  var [intent, ...rest] = payload.getAll(INTENT);
  if (typeof intent !== 'string' || rest.length > 0) {
    throw new Error('The intent could only be set on a button');
  }
  payload.delete(INTENT);
  return intent;
}

/**
 * Returns the properties required to configure an intent button for validation
 *
 * @see https://conform.guide/api/react#validate
 */
function validate(field) {
  return {
    name: INTENT,
    value: field ? "validate/".concat(field) : 'validate',
    formNoValidate: true
  };
}
function requestIntent(form, buttonProps) {
  if (!form) {
    console.warn('No form element is provided');
    return;
  }
  var submitter = createSubmitter({
    name: INTENT,
    value: buttonProps.value,
    hidden: true,
    formNoValidate: buttonProps.formNoValidate
  });
  requestSubmit(form, submitter);
}

/**
 * Helpers to configure an intent button for modifying a list
 *
 * @see https://conform.guide/api/react#list
 */
var list = new Proxy({}, {
  get(_target, type) {
    return function (scope) {
      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return {
        name: INTENT,
        value: "list/".concat(type, "/").concat(scope, "/").concat(JSON.stringify(payload)),
        formNoValidate: true
      };
    };
  }
});
function isSubmitting(intent) {
  var [type] = intent.split('/', 1);
  return type !== 'validate' && type !== 'list';
}
function getScope(intent) {
  var _parseListCommand$sco, _parseListCommand;
  var [type, ...rest] = intent.split('/');
  switch (type) {
    case 'validate':
      return rest.length > 0 ? rest.join('/') : null;
    case 'list':
      return (_parseListCommand$sco = (_parseListCommand = parseListCommand(intent)) === null || _parseListCommand === void 0 ? void 0 : _parseListCommand.scope) !== null && _parseListCommand$sco !== void 0 ? _parseListCommand$sco : null;
    default:
      return null;
  }
}
function parseListCommand(intent) {
  try {
    var [group, type, scope, json] = intent.split('/');
    if (group !== 'list' || !['prepend', 'append', 'replace', 'remove', 'reorder'].includes(type) || !scope) {
      return null;
    }
    var _payload = JSON.parse(json);
    return {
      // @ts-expect-error
      type,
      scope,
      payload: _payload
    };
  } catch (error) {
    return null;
  }
}
function updateList(list, command) {
  switch (command.type) {
    case 'prepend':
      list.unshift(command.payload.defaultValue);
      break;
    case 'append':
      list.push(command.payload.defaultValue);
      break;
    case 'replace':
      list.splice(command.payload.index, 1, command.payload.defaultValue);
      break;
    case 'remove':
      list.splice(command.payload.index, 1);
      break;
    case 'reorder':
      list.splice(command.payload.to, 0, ...list.splice(command.payload.from, 1));
      break;
    default:
      throw new Error('Unknown list command received');
  }
  return list;
}

export { INTENT, getIntent, getScope, isSubmitting, list, parseListCommand, requestIntent, updateList, validate };
