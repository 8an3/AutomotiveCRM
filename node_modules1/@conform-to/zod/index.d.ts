import { type FieldsetConstraint, type Submission } from '@conform-to/dom';
import * as z from 'zod';
export declare function getFieldsetConstraint<Source extends z.ZodTypeAny>(source: Source): FieldsetConstraint<z.input<Source>>;
export declare function parse<Schema extends z.ZodTypeAny>(payload: FormData | URLSearchParams, config: {
    schema: Schema | ((intent: string) => Schema);
    acceptMultipleErrors?: ({ name, intent, payload, }: {
        name: string;
        intent: string;
        payload: Record<string, any>;
    }) => boolean;
    async?: false;
}): Submission<z.output<Schema>>;
export declare function parse<Schema extends z.ZodTypeAny>(payload: FormData | URLSearchParams, config: {
    schema: Schema | ((intent: string) => Schema);
    acceptMultipleErrors?: ({ name, intent, payload, }: {
        name: string;
        intent: string;
        payload: Record<string, any>;
    }) => boolean;
    async: true;
}): Promise<Submission<z.output<Schema>>>;
export declare function ifNonEmptyString(fn: (value: string) => unknown): (value: unknown) => unknown;
