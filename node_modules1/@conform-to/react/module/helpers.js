import { objectSpread2 as _objectSpread2 } from './_virtual/_rollupPluginBabelHelpers.js';
export { INTENT } from '@conform-to/dom';
export { VALIDATION_SKIPPED, VALIDATION_UNDEFINED } from './hooks.js';

/**
 * Style to make the input element visually hidden
 * Based on the `sr-only` class from tailwindcss
 */
var hiddenStyle = {
  position: 'absolute',
  width: '1px',
  height: '1px',
  padding: 0,
  margin: '-1px',
  overflow: 'hidden',
  clip: 'rect(0,0,0,0)',
  whiteSpace: 'nowrap',
  border: 0
};
function getFormControlProps(config, options) {
  var _config$error;
  var props = {
    id: config.id,
    name: config.name,
    form: config.form,
    required: config.required
  };
  if (config.id) {
    props.id = config.id;
  }
  if (config.descriptionId && options !== null && options !== void 0 && options.description) {
    props['aria-describedby'] = config.descriptionId;
  }
  if (config.errorId && (_config$error = config.error) !== null && _config$error !== void 0 && _config$error.length) {
    props['aria-invalid'] = true;
    props['aria-describedby'] = config.descriptionId && options !== null && options !== void 0 && options.description ? "".concat(config.errorId, " ").concat(config.descriptionId) : config.errorId;
  }
  if (config.initialError && Object.entries(config.initialError).length > 0) {
    props.autoFocus = true;
  }
  if (options !== null && options !== void 0 && options.hidden) {
    props.style = hiddenStyle;
    props.tabIndex = -1;
    props['aria-hidden'] = true;
  }
  return props;
}
function input(config) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var props = _objectSpread2(_objectSpread2({}, getFormControlProps(config, options)), {}, {
    type: options.type,
    minLength: config.minLength,
    maxLength: config.maxLength,
    min: config.min,
    max: config.max,
    step: config.step,
    pattern: config.pattern,
    multiple: config.multiple
  });
  if (options.type === 'checkbox' || options.type === 'radio') {
    var _options$value;
    props.value = (_options$value = options.value) !== null && _options$value !== void 0 ? _options$value : 'on';
    props.defaultChecked = config.defaultValue === props.value;
  } else if (options.type !== 'file') {
    props.defaultValue = config.defaultValue;
  }
  return props;
}
function select(config, options) {
  var props = _objectSpread2(_objectSpread2({}, getFormControlProps(config, options)), {}, {
    defaultValue: config.defaultValue,
    multiple: config.multiple
  });
  return props;
}
function textarea(config, options) {
  var props = _objectSpread2(_objectSpread2({}, getFormControlProps(config, options)), {}, {
    defaultValue: config.defaultValue,
    minLength: config.minLength,
    maxLength: config.maxLength
  });
  return props;
}

export { input, select, textarea };
