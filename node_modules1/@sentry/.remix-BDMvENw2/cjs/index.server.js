Object.defineProperty(exports, '__esModule', { value: true });

const core = require('@sentry/core');
const node = require('@sentry/node');
const utils = require('@sentry/utils');
const debugBuild = require('./utils/debug-build.js');
const instrumentServer = require('./utils/instrumentServer.js');
const react = require('@sentry/react');
const performance = require('./client/performance.js');
const errors = require('./client/errors.js');
const browserTracingIntegration = require('./client/browserTracingIntegration.js');
const express = require('./utils/serverAdapters/express.js');

function sdkAlreadyInitialized() {
  return !!node.getClient();
}

/** Initializes Sentry Remix SDK on Node. */
function init(options) {
  core.applySdkMetadata(options, 'remix', ['remix', 'node']);

  if (sdkAlreadyInitialized()) {
    debugBuild.DEBUG_BUILD && utils.logger.log('SDK already initialized');

    return;
  }

  instrumentServer.instrumentServer();

  node.init(options );

  node.getCurrentScope().setTag('runtime', 'node');
}

exports.DEFAULT_USER_INCLUDES = node.DEFAULT_USER_INCLUDES;
exports.Handlers = node.Handlers;
exports.Hub = node.Hub;
exports.Integrations = node.Integrations;
exports.NodeClient = node.NodeClient;
exports.SDK_VERSION = node.SDK_VERSION;
exports.SEMANTIC_ATTRIBUTE_SENTRY_OP = node.SEMANTIC_ATTRIBUTE_SENTRY_OP;
exports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = node.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;
exports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = node.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;
exports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = node.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;
exports.Scope = node.Scope;
exports.addBreadcrumb = node.addBreadcrumb;
exports.addEventProcessor = node.addEventProcessor;
exports.addGlobalEventProcessor = node.addGlobalEventProcessor;
exports.addIntegration = node.addIntegration;
exports.addRequestDataToEvent = node.addRequestDataToEvent;
exports.autoDiscoverNodePerformanceMonitoringIntegrations = node.autoDiscoverNodePerformanceMonitoringIntegrations;
exports.captureCheckIn = node.captureCheckIn;
exports.captureConsoleIntegration = node.captureConsoleIntegration;
exports.captureEvent = node.captureEvent;
exports.captureException = node.captureException;
exports.captureMessage = node.captureMessage;
exports.close = node.close;
exports.configureScope = node.configureScope;
exports.consoleIntegration = node.consoleIntegration;
exports.contextLinesIntegration = node.contextLinesIntegration;
exports.continueTrace = node.continueTrace;
exports.createGetModuleFromFilename = node.createGetModuleFromFilename;
exports.createTransport = node.createTransport;
exports.cron = node.cron;
exports.debugIntegration = node.debugIntegration;
exports.dedupeIntegration = node.dedupeIntegration;
exports.deepReadDirSync = node.deepReadDirSync;
exports.defaultIntegrations = node.defaultIntegrations;
exports.defaultStackParser = node.defaultStackParser;
exports.enableAnrDetection = node.enableAnrDetection;
exports.extraErrorDataIntegration = node.extraErrorDataIntegration;
exports.extractRequestData = node.extractRequestData;
exports.extractTraceparentData = node.extractTraceparentData;
exports.flush = node.flush;
exports.functionToStringIntegration = node.functionToStringIntegration;
exports.getActiveSpan = node.getActiveSpan;
exports.getActiveTransaction = node.getActiveTransaction;
exports.getClient = node.getClient;
exports.getCurrentHub = node.getCurrentHub;
exports.getCurrentScope = node.getCurrentScope;
exports.getDefaultIntegrations = node.getDefaultIntegrations;
exports.getGlobalScope = node.getGlobalScope;
exports.getHubFromCarrier = node.getHubFromCarrier;
exports.getIsolationScope = node.getIsolationScope;
exports.getModuleFromFilename = node.getModuleFromFilename;
exports.getSentryRelease = node.getSentryRelease;
exports.getSpanStatusFromHttpCode = node.getSpanStatusFromHttpCode;
exports.hapiErrorPlugin = node.hapiErrorPlugin;
exports.httpClientIntegration = node.httpClientIntegration;
exports.inboundFiltersIntegration = node.inboundFiltersIntegration;
exports.isInitialized = node.isInitialized;
exports.lastEventId = node.lastEventId;
exports.linkedErrorsIntegration = node.linkedErrorsIntegration;
exports.localVariablesIntegration = node.localVariablesIntegration;
exports.makeMain = node.makeMain;
exports.makeNodeTransport = node.makeNodeTransport;
exports.metrics = node.metrics;
exports.modulesIntegration = node.modulesIntegration;
exports.nodeContextIntegration = node.nodeContextIntegration;
exports.onUncaughtExceptionIntegration = node.onUncaughtExceptionIntegration;
exports.onUnhandledRejectionIntegration = node.onUnhandledRejectionIntegration;
exports.parameterize = node.parameterize;
exports.reportingObserverIntegration = node.reportingObserverIntegration;
exports.requestDataIntegration = node.requestDataIntegration;
exports.rewriteFramesIntegration = node.rewriteFramesIntegration;
exports.runWithAsyncContext = node.runWithAsyncContext;
exports.sessionTimingIntegration = node.sessionTimingIntegration;
exports.setContext = node.setContext;
exports.setCurrentClient = node.setCurrentClient;
exports.setExtra = node.setExtra;
exports.setExtras = node.setExtras;
exports.setHttpStatus = node.setHttpStatus;
exports.setMeasurement = node.setMeasurement;
exports.setTag = node.setTag;
exports.setTags = node.setTags;
exports.setUser = node.setUser;
exports.spanStatusfromHttpCode = node.spanStatusfromHttpCode;
exports.startInactiveSpan = node.startInactiveSpan;
exports.startSpan = node.startSpan;
exports.startSpanManual = node.startSpanManual;
exports.startTransaction = node.startTransaction;
exports.trace = node.trace;
exports.trpcMiddleware = node.trpcMiddleware;
exports.withActiveSpan = node.withActiveSpan;
exports.withIsolationScope = node.withIsolationScope;
exports.withMonitor = node.withMonitor;
exports.withScope = node.withScope;
exports.captureRemixServerException = instrumentServer.captureRemixServerException;
exports.wrapRemixHandleError = instrumentServer.wrapRemixHandleError;
exports.ErrorBoundary = react.ErrorBoundary;
exports.withErrorBoundary = react.withErrorBoundary;
exports.remixRouterInstrumentation = performance.remixRouterInstrumentation;
exports.withSentry = performance.withSentry;
exports.captureRemixErrorBoundaryError = errors.captureRemixErrorBoundaryError;
exports.browserTracingIntegration = browserTracingIntegration.browserTracingIntegration;
exports.wrapExpressCreateRequestHandler = express.wrapExpressCreateRequestHandler;
exports.init = init;
for (const k in node) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) exports[k] = node[k];
}
//# sourceMappingURL=index.server.js.map
