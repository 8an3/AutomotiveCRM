import type { RemixOptions } from './utils/remixOptions';
export { addGlobalEventProcessor, addEventProcessor, addBreadcrumb, addIntegration, captureCheckIn, withMonitor, captureException, captureEvent, captureMessage, configureScope, createTransport, extractTraceparentData, getActiveTransaction, getHubFromCarrier, getCurrentHub, getClient, getCurrentScope, getGlobalScope, getIsolationScope, Hub, makeMain, setCurrentClient, NodeClient, Scope, startTransaction, SDK_VERSION, setContext, setExtra, setExtras, setTag, setTags, setUser, spanStatusfromHttpCode, getSpanStatusFromHttpCode, setHttpStatus, trace, withScope, withIsolationScope, autoDiscoverNodePerformanceMonitoringIntegrations, makeNodeTransport, defaultIntegrations, getDefaultIntegrations, defaultStackParser, lastEventId, flush, close, getSentryRelease, addRequestDataToEvent, DEFAULT_USER_INCLUDES, extractRequestData, deepReadDirSync, Integrations, consoleIntegration, onUncaughtExceptionIntegration, onUnhandledRejectionIntegration, modulesIntegration, contextLinesIntegration, nodeContextIntegration, localVariablesIntegration, requestDataIntegration, functionToStringIntegration, inboundFiltersIntegration, linkedErrorsIntegration, captureConsoleIntegration, dedupeIntegration, debugIntegration, extraErrorDataIntegration, reportingObserverIntegration, rewriteFramesIntegration, sessionTimingIntegration, httpClientIntegration, Handlers, trpcMiddleware, setMeasurement, getActiveSpan, startSpan, startSpanManual, startInactiveSpan, withActiveSpan, continueTrace, isInitialized, cron, parameterize, metrics, getModuleFromFilename, createGetModuleFromFilename, hapiErrorPlugin, runWithAsyncContext, enableAnrDetection, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, } from '@sentry/node';
export * from '@sentry/node';
export { captureRemixServerException, wrapRemixHandleError } from './utils/instrumentServer';
export { ErrorBoundary, withErrorBoundary } from '@sentry/react';
export { remixRouterInstrumentation, withSentry } from './client/performance';
export { captureRemixErrorBoundaryError } from './client/errors';
export { browserTracingIntegration } from './client/browserTracingIntegration';
export { wrapExpressCreateRequestHandler } from './utils/serverAdapters/express';
export type { SentryMetaArgs } from './utils/types';
/** Initializes Sentry Remix SDK on Node. */
export declare function init(options: RemixOptions): void;
//# sourceMappingURL=index.server.d.ts.map