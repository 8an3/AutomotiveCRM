import { _optionalChain } from '@sentry/utils';
import { runWithAsyncContext, getCurrentHub, getCurrentScope, hasTracingEnabled, setHttpStatus, getClient } from '@sentry/core';
import { flush } from '@sentry/node';
import { fill, extractRequestData, isString, logger } from '@sentry/utils';
import { DEBUG_BUILD } from '../debug-build.js';
import { createRoutes, getTransactionName, startRequestHandlerTransaction, instrumentBuild } from '../instrumentServer.js';

function wrapExpressRequestHandler(
  origRequestHandler,
  build,
) {
  let routes;

  return async function (

    req,
    res,
    next,
  ) {
    await runWithAsyncContext(async () => {
      // eslint-disable-next-line @typescript-eslint/unbound-method
      res.end = wrapEndMethod(res.end);

      const request = extractRequestData(req);
      // eslint-disable-next-line deprecation/deprecation
      const hub = getCurrentHub();
      const options = _optionalChain([getClient, 'call', _ => _(), 'optionalAccess', _2 => _2.getOptions, 'call', _3 => _3()]);
      const scope = getCurrentScope();

      scope.setSDKProcessingMetadata({ request });

      if (!options || !hasTracingEnabled(options) || !request.url || !request.method) {
        return origRequestHandler.call(this, req, res, next);
      }

      const url = new URL(request.url);

      // This is only meant to be used on development servers, so we don't need to worry about performance here
      if (build && typeof build === 'function') {
        const resolvedBuild = build();

        if (resolvedBuild instanceof Promise) {
          return resolvedBuild.then(resolved => {
            routes = createRoutes(resolved.routes);

            startRequestHandlerTransactionWithRoutes.call(this, origRequestHandler, routes, req, res, next, hub, url);
          });
        } else {
          routes = createRoutes(resolvedBuild.routes);

          return startRequestHandlerTransactionWithRoutes.call(
            this,
            origRequestHandler,
            routes,
            req,
            res,
            next,
            hub,
            url,
          );
        }
      } else {
        routes = createRoutes(build.routes);
      }

      return startRequestHandlerTransactionWithRoutes.call(this, origRequestHandler, routes, req, res, next, hub, url);
    });
  };
}

function startRequestHandlerTransactionWithRoutes(

  origRequestHandler,
  routes,
  req,
  res,
  next,
  // eslint-disable-next-line deprecation/deprecation
  hub,
  url,
) {
  const [name, source] = getTransactionName(routes, url);
  const transaction = startRequestHandlerTransaction(hub, name, source, {
    headers: {
      'sentry-trace': (req.headers && isString(req.headers['sentry-trace']) && req.headers['sentry-trace']) || '',
      baggage: (req.headers && isString(req.headers.baggage) && req.headers.baggage) || '',
    },
    method: req.method,
  });
  // save a link to the transaction on the response, so that even if there's an error (landing us outside of
  // the domain), we can still finish it (albeit possibly missing some scope data)
  (res ).__sentryTransaction = transaction;
  return origRequestHandler.call(this, req, res, next);
}

function wrapGetLoadContext(origGetLoadContext) {
  return function ( req, res) {
    const loadContext = (origGetLoadContext.call(this, req, res) || {}) ;

    loadContext['__sentry_express_wrapped__'] = true;

    return loadContext;
  };
}

// wrap build function which returns either a Promise or the build itself
// This is currently only required for Vite development mode with HMR
function wrapBuildFn(origBuildFn) {
  return async function ( ...args) {
    const resolvedBuild = origBuildFn.call(this, ...args);

    if (resolvedBuild instanceof Promise) {
      return resolvedBuild.then(resolved => {
        return instrumentBuild(resolved, true);
      });
    }

    return instrumentBuild(resolvedBuild, true);
  };
}

// A wrapper around build if it's a Promise or a function that returns a Promise that calls instrumentServer on the resolved value
// This is currently only required for Vite development mode with HMR
function wrapBuild(
  build,
) {
  if (typeof build === 'function') {
    return wrapBuildFn(build);
  }

  return instrumentBuild(build, true);
}

/**
 * Instruments `createRequestHandler` from `@remix-run/express`
 */
function wrapExpressCreateRequestHandler(
  origCreateRequestHandler,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
) {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return function ( options) {
    if (!('getLoadContext' in options)) {
      options['getLoadContext'] = () => ({});
    }

    fill(options, 'getLoadContext', wrapGetLoadContext);

    const newBuild = wrapBuild(options.build);
    const requestHandler = origCreateRequestHandler.call(this, {
      ...options,
      build: newBuild,
    });

    return wrapExpressRequestHandler(requestHandler, newBuild);
  };
}

/**
 * Wrap `res.end()` so that it closes the transaction and flushes events before letting the request finish.
 *
 * Note: This wraps a sync method with an async method. While in general that's not a great idea in terms of keeping
 * things in the right order, in this case it's safe, because the native `.end()` actually *is* async, and its run
 * actually *is* awaited, just manually so (which reflects the fact that the core of the request/response code in Node
 * by far predates the introduction of `async`/`await`). When `.end()` is done, it emits the `prefinish` event, and
 * only once that fires does request processing continue. See
 * https://github.com/nodejs/node/commit/7c9b607048f13741173d397795bac37707405ba7.
 *
 * @param origEnd The original `res.end()` method
 * @returns The wrapped version
 */
function wrapEndMethod(origEnd) {
  return async function newEnd( ...args) {
    await finishSentryProcessing(this);

    return origEnd.call(this, ...args);
  };
}

/**
 * Close the open transaction (if any) and flush events to Sentry.
 *
 * @param res The outgoing response for this request, on which the transaction is stored
 */
async function finishSentryProcessing(res) {
  const { __sentryTransaction: transaction } = res;

  if (transaction) {
    setHttpStatus(transaction, res.statusCode);

    // Push `transaction.finish` to the next event loop so open spans have a better chance of finishing before the
    // transaction closes, and make sure to wait until that's done before flushing events
    await new Promise(resolve => {
      setImmediate(() => {
        transaction.end();
        resolve();
      });
    });
  }

  // Flush the event queue to ensure that events get sent to Sentry before the response is finished and the lambda
  // ends. If there was an error, rethrow it so that the normal exception-handling mechanisms can apply.
  try {
    DEBUG_BUILD && logger.log('Flushing events...');
    await flush(2000);
    DEBUG_BUILD && logger.log('Done flushing events');
  } catch (e) {
    DEBUG_BUILD && logger.log('Error while flushing events:\n', e);
  }
}

export { wrapExpressCreateRequestHandler };
//# sourceMappingURL=express.js.map
