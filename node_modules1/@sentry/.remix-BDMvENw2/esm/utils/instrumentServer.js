import { _optionalChain } from '@sentry/utils';
import { getActiveTransaction, spanToJSON, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, runWithAsyncContext, getCurrentScope, hasTracingEnabled, setHttpStatus, getActiveSpan, getDynamicSamplingContextFromSpan, spanToTraceHeader, getClient } from '@sentry/core';
import { captureException, getCurrentHub } from '@sentry/node';
import { logger, objectify, addExceptionMechanism, loadModule, fill, tracingContextFromHeaders, isPrimitive, isNodeEnv, dynamicSamplingContextToSentryBaggageHeader } from '@sentry/utils';
import { DEBUG_BUILD } from './debug-build.js';
import { getFutureFlagsServer, getRemixVersionFromBuild } from './futureFlags.js';
import { isResponse, isRouteErrorResponse, extractData, matchServerRoutes, getRequestMatch, isDeferredData, json } from './vendor/response.js';
import { normalizeRemixRequest } from './web-fetch.js';

/* eslint-disable max-lines */

let FUTURE_FLAGS;
let IS_REMIX_V2;

const redirectStatusCodes = new Set([301, 302, 303, 307, 308]);
function isRedirectResponse(response) {
  return redirectStatusCodes.has(response.status);
}

function isCatchResponse(response) {
  return response.headers.get('X-Remix-Catch') != null;
}

async function extractResponseError(response) {
  const responseData = await extractData(response);

  if (typeof responseData === 'string' && responseData.length > 0) {
    return new Error(responseData);
  }

  if (response.statusText) {
    return new Error(response.statusText);
  }

  return responseData;
}

/**
 * Sentry utility to be used in place of `handleError` function of Remix v2
 * Remix Docs: https://remix.run/docs/en/main/file-conventions/entry.server#handleerror
 *
 * Should be used in `entry.server` like:
 *
 * export const handleError = Sentry.wrapRemixHandleError
 */
function wrapRemixHandleError(err, { request }) {
  // We are skipping thrown responses here as they are handled by
  // `captureRemixServerException` at loader / action level
  // We don't want to capture them twice.
  // This function is only for capturing unhandled server-side exceptions.
  // https://remix.run/docs/en/main/file-conventions/entry.server#thrown-responses
  // https://remix.run/docs/en/v1/api/conventions#throwing-responses-in-loaders
  if (isResponse(err) || isRouteErrorResponse(err)) {
    return;
  }

  captureRemixServerException(err, 'remix.server.handleError', request).then(null, e => {
    DEBUG_BUILD && logger.warn('Failed to capture Remix Server exception.', e);
  });
}

/**
 * Captures an exception happened in the Remix server.
 *
 * @param err The error to capture.
 * @param name The name of the origin function.
 * @param request The request object.
 *
 * @returns A promise that resolves when the exception is captured.
 */
async function captureRemixServerException(err, name, request) {
  // Skip capturing if the thrown error is not a 5xx response
  // https://remix.run/docs/en/v1/api/conventions#throwing-responses-in-loaders
  if (IS_REMIX_V2 && isRouteErrorResponse(err) && err.status < 500) {
    return;
  }

  if (isResponse(err) && err.status < 500) {
    return;
  }
  // Skip capturing if the request is aborted as Remix docs suggest
  // Ref: https://remix.run/docs/en/main/file-conventions/entry.server#handleerror
  if (request.signal.aborted) {
    DEBUG_BUILD && logger.warn('Skipping capture of aborted request');
    return;
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  let normalizedRequest = request ;

  try {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    normalizedRequest = normalizeRemixRequest(request );
  } catch (e) {
    DEBUG_BUILD && logger.warn('Failed to normalize Remix request');
  }

  const objectifiedErr = objectify(err);

  captureException(isResponse(objectifiedErr) ? await extractResponseError(objectifiedErr) : objectifiedErr, scope => {
    // eslint-disable-next-line deprecation/deprecation
    const transaction = getActiveTransaction();
    const activeTransactionName = transaction ? spanToJSON(transaction).description : undefined;

    scope.setSDKProcessingMetadata({
      request: {
        ...normalizedRequest,
        // When `route` is not defined, `RequestData` integration uses the full URL
        route: activeTransactionName
          ? {
              path: activeTransactionName,
            }
          : undefined,
      },
    });

    scope.addEventProcessor(event => {
      addExceptionMechanism(event, {
        type: 'instrument',
        handled: false,
        data: {
          function: name,
        },
      });

      return event;
    });

    return scope;
  });
}

function makeWrappedDocumentRequestFunction(remixVersion) {
  return function (origDocumentRequestFunction) {
    return async function (

      request,
      responseStatusCode,
      responseHeaders,
      context,
      loadContext,
    ) {
      let res;
      // eslint-disable-next-line deprecation/deprecation
      const activeTransaction = getActiveTransaction();

      try {
        // eslint-disable-next-line deprecation/deprecation
        const span = _optionalChain([activeTransaction, 'optionalAccess', _ => _.startChild, 'call', _2 => _2({
          op: 'function.remix.document_request',
          origin: 'auto.function.remix',
          description: spanToJSON(activeTransaction).description,
          tags: {
            method: request.method,
            url: request.url,
          },
        })]);

        res = await origDocumentRequestFunction.call(
          this,
          request,
          responseStatusCode,
          responseHeaders,
          context,
          loadContext,
        );

        _optionalChain([span, 'optionalAccess', _3 => _3.end, 'call', _4 => _4()]);
      } catch (err) {
        const isRemixV1 = !_optionalChain([FUTURE_FLAGS, 'optionalAccess', _5 => _5.v2_errorBoundary]) && remixVersion !== 2;

        // This exists to capture the server-side rendering errors on Remix v1
        // On Remix v2, we capture SSR errors at `handleError`
        // We also skip primitives here, as we can't dedupe them, and also we don't expect any primitive SSR errors.
        if (isRemixV1 && !isPrimitive(err)) {
          await captureRemixServerException(err, 'documentRequest', request);
        }

        throw err;
      }

      return res;
    };
  };
}

function makeWrappedDataFunction(
  origFn,
  id,
  name,
  remixVersion,
  manuallyInstrumented,
) {
  return async function ( args) {
    if (args.context.__sentry_express_wrapped__ && !manuallyInstrumented) {
      return origFn.call(this, args);
    }

    let res;
    // eslint-disable-next-line deprecation/deprecation
    const activeTransaction = getActiveTransaction();
    const currentScope = getCurrentScope();

    try {
      // eslint-disable-next-line deprecation/deprecation
      const span = _optionalChain([activeTransaction, 'optionalAccess', _6 => _6.startChild, 'call', _7 => _7({
        op: `function.remix.${name}`,
        origin: 'auto.ui.remix',
        description: id,
        tags: {
          name,
        },
      })]);

      if (span) {
        // Assign data function to hub to be able to see `db` transactions (if any) as children.
        // eslint-disable-next-line deprecation/deprecation
        currentScope.setSpan(span);
      }

      res = await origFn.call(this, args);

      // eslint-disable-next-line deprecation/deprecation
      currentScope.setSpan(activeTransaction);
      _optionalChain([span, 'optionalAccess', _8 => _8.end, 'call', _9 => _9()]);
    } catch (err) {
      const isRemixV2 = _optionalChain([FUTURE_FLAGS, 'optionalAccess', _10 => _10.v2_errorBoundary]) || remixVersion === 2;

      // On Remix v2, we capture all unexpected errors (except the `Route Error Response`s / Thrown Responses) in `handleError` function.
      // This is both for consistency and also avoid duplicates such as primitives like `string` or `number` being captured twice.
      // Remix v1 does not have a `handleError` function, so we capture all errors here.
      if (isRemixV2 ? isResponse(err) : true) {
        await captureRemixServerException(err, name, args.request);
      }

      throw err;
    }

    return res;
  };
}

const makeWrappedAction =
  (id, remixVersion, manuallyInstrumented) =>
  (origAction) => {
    return makeWrappedDataFunction(origAction, id, 'action', remixVersion, manuallyInstrumented);
  };

const makeWrappedLoader =
  (id, remixVersion, manuallyInstrumented) =>
  (origLoader) => {
    return makeWrappedDataFunction(origLoader, id, 'loader', remixVersion, manuallyInstrumented);
  };

function getTraceAndBaggage()

 {
  // eslint-disable-next-line deprecation/deprecation
  const transaction = getActiveTransaction();

  if (isNodeEnv() && hasTracingEnabled()) {
    const span = getActiveSpan();

    if (span && transaction) {
      const dynamicSamplingContext = getDynamicSamplingContextFromSpan(transaction);

      return {
        sentryTrace: spanToTraceHeader(span),
        sentryBaggage: dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext),
      };
    }
  }

  return {};
}

function makeWrappedRootLoader(remixVersion) {
  return function (origLoader) {
    return async function ( args) {
      const res = await origLoader.call(this, args);
      const traceAndBaggage = getTraceAndBaggage();

      if (isDeferredData(res)) {
        res.data['sentryTrace'] = traceAndBaggage.sentryTrace;
        res.data['sentryBaggage'] = traceAndBaggage.sentryBaggage;
        res.data['remixVersion'] = remixVersion;

        return res;
      }

      if (isResponse(res)) {
        // Note: `redirect` and `catch` responses do not have bodies to extract.
        // We skip injection of trace and baggage in those cases.
        // For `redirect`, a valid internal redirection target will have the trace and baggage injected.
        if (isRedirectResponse(res) || isCatchResponse(res)) {
          DEBUG_BUILD && logger.warn('Skipping injection of trace and baggage as the response does not have a body');
          return res;
        } else {
          const data = await extractData(res);

          if (typeof data === 'object') {
            return json(
              { ...data, ...traceAndBaggage, remixVersion },
              {
                headers: res.headers,
                statusText: res.statusText,
                status: res.status,
              },
            );
          } else {
            DEBUG_BUILD && logger.warn('Skipping injection of trace and baggage as the response body is not an object');
            return res;
          }
        }
      }

      return { ...res, ...traceAndBaggage, remixVersion };
    };
  };
}

/**
 * Creates routes from the server route manifest
 *
 * @param manifest
 * @param parentId
 */
function createRoutes(manifest, parentId) {
  return Object.entries(manifest)
    .filter(([, route]) => route.parentId === parentId)
    .map(([id, route]) => ({
      ...route,
      children: createRoutes(manifest, id),
    }));
}

/**
 * Starts a new transaction for the given request to be used by different `RequestHandler` wrappers.
 */
function startRequestHandlerTransaction(
  // eslint-disable-next-line deprecation/deprecation
  hub,
  name,
  source,
  request

,
) {
  // eslint-disable-next-line deprecation/deprecation
  const { traceparentData, dynamicSamplingContext, propagationContext } = tracingContextFromHeaders(
    request.headers['sentry-trace'],
    request.headers.baggage,
  );
  // eslint-disable-next-line deprecation/deprecation
  hub.getScope().setPropagationContext(propagationContext);

  // TODO: Refactor this to `startSpan()`
  // eslint-disable-next-line deprecation/deprecation
  const transaction = hub.startTransaction({
    name,
    op: 'http.server',
    attributes: {
      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.remix',
    },
    tags: {
      method: request.method,
    },
    ...traceparentData,
    metadata: {
      source,
      dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,
    },
  });

  // eslint-disable-next-line deprecation/deprecation
  hub.getScope().setSpan(transaction);
  return transaction;
}

/**
 * Get transaction name from routes and url
 */
function getTransactionName(routes, url) {
  const matches = matchServerRoutes(routes, url.pathname);
  const match = matches && getRequestMatch(url, matches);
  return match === null ? [url.pathname, 'url'] : [match.route.id || 'no-route-id', 'route'];
}

function wrapRequestHandler(origRequestHandler, build) {
  const routes = createRoutes(build.routes);

  return async function ( request, loadContext) {
    // This means that the request handler of the adapter (ex: express) is already wrapped.
    // So we don't want to double wrap it.
    if (_optionalChain([loadContext, 'optionalAccess', _11 => _11.__sentry_express_wrapped__])) {
      return origRequestHandler.call(this, request, loadContext);
    }

    const upperCaseMethod = request.method.toUpperCase();

    // We don't want to wrap OPTIONS and HEAD requests
    if (upperCaseMethod === 'OPTIONS' || upperCaseMethod === 'HEAD') {
      return origRequestHandler.call(this, request, loadContext);
    }

    return runWithAsyncContext(async () => {
      // eslint-disable-next-line deprecation/deprecation
      const hub = getCurrentHub();
      const options = _optionalChain([getClient, 'call', _12 => _12(), 'optionalAccess', _13 => _13.getOptions, 'call', _14 => _14()]);
      const scope = getCurrentScope();

      let normalizedRequest = request;

      try {
        normalizedRequest = normalizeRemixRequest(request);
      } catch (e) {
        DEBUG_BUILD && logger.warn('Failed to normalize Remix request');
      }

      const url = new URL(request.url);
      const [name, source] = getTransactionName(routes, url);

      scope.setSDKProcessingMetadata({
        request: {
          ...normalizedRequest,
          route: {
            path: name,
          },
        },
      });

      if (!options || !hasTracingEnabled(options)) {
        return origRequestHandler.call(this, request, loadContext);
      }

      const transaction = startRequestHandlerTransaction(hub, name, source, {
        headers: {
          'sentry-trace': request.headers.get('sentry-trace') || '',
          baggage: request.headers.get('baggage') || '',
        },
        method: request.method,
      });

      const res = (await origRequestHandler.call(this, request, loadContext)) ;

      if (isResponse(res)) {
        setHttpStatus(transaction, res.status);
      }

      transaction.end();

      return res;
    });
  };
}

/**
 * Instruments `remix` ServerBuild for performance tracing and error tracking.
 */
function instrumentBuild(build, manuallyInstrumented = false) {
  const routes = {};

  const remixVersion = getRemixVersionFromBuild(build);
  IS_REMIX_V2 = remixVersion === 2;

  const wrappedEntry = { ...build.entry, module: { ...build.entry.module } };

  // Not keeping boolean flags like it's done for `requestHandler` functions,
  // Because the build can change between build and runtime.
  // So if there is a new `loader` or`action` or `documentRequest` after build.
  // We should be able to wrap them, as they may not be wrapped before.
  const defaultExport = wrappedEntry.module.default ;
  if (defaultExport && !defaultExport.__sentry_original__) {
    fill(wrappedEntry.module, 'default', makeWrappedDocumentRequestFunction(remixVersion));
  }

  for (const [id, route] of Object.entries(build.routes)) {
    const wrappedRoute = { ...route, module: { ...route.module } };

    const routeAction = wrappedRoute.module.action ;
    if (routeAction && !routeAction.__sentry_original__) {
      fill(wrappedRoute.module, 'action', makeWrappedAction(id, remixVersion, manuallyInstrumented));
    }

    const routeLoader = wrappedRoute.module.loader ;
    if (routeLoader && !routeLoader.__sentry_original__) {
      fill(wrappedRoute.module, 'loader', makeWrappedLoader(id, remixVersion, manuallyInstrumented));
    }

    // Entry module should have a loader function to provide `sentry-trace` and `baggage`
    // They will be available for the root `meta` function as `data.sentryTrace` and `data.sentryBaggage`
    if (!wrappedRoute.parentId) {
      if (!wrappedRoute.module.loader) {
        wrappedRoute.module.loader = () => ({});
      }

      // We want to wrap the root loader regardless of whether it's already wrapped before.
      fill(wrappedRoute.module, 'loader', makeWrappedRootLoader(remixVersion));
    }

    routes[id] = wrappedRoute;
  }

  return { ...build, routes, entry: wrappedEntry };
}

function makeWrappedCreateRequestHandler(
  origCreateRequestHandler,
) {
  return function ( build, ...args) {
    FUTURE_FLAGS = getFutureFlagsServer(build);
    const newBuild = instrumentBuild(build, false);
    const requestHandler = origCreateRequestHandler.call(this, newBuild, ...args);

    return wrapRequestHandler(requestHandler, newBuild);
  };
}

/**
 * Monkey-patch Remix's `createRequestHandler` from `@remix-run/server-runtime`
 * which Remix Adapters (https://remix.run/docs/en/v1/api/remix) use underneath.
 */
function instrumentServer() {
  const pkg = loadModule

('@remix-run/server-runtime');

  if (!pkg) {
    DEBUG_BUILD && logger.warn('Remix SDK was unable to require `@remix-run/server-runtime` package.');

    return;
  }

  fill(pkg, 'createRequestHandler', makeWrappedCreateRequestHandler);
}

export { captureRemixServerException, createRoutes, getTransactionName, instrumentBuild, instrumentServer, startRequestHandlerTransaction, wrapRemixHandleError };
//# sourceMappingURL=instrumentServer.js.map
